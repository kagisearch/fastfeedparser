{
  "entries": [
    {
      "author": "Corbin",
      "content": [
        {
          "base": null,
          "language": null,
          "type": "text/html",
          "value": "<h3 id=\"introduction\">Introduction</h3>\n<p>This post started as a quick note summarizing a recent experiment I carried\nout upon a small RPython interpreter by rewriting it in an uncommon style. It\nis written for folks who have already written some RPython and want to take a\ndeeper look at interpreter architecture.</p>\n<p>Some experiments are about finding solutions to problems. This experiment is\nabout taking a solution which is already well-understood and applying it in\nthe context of RPython to find a new approach. As we will see, there is no\nreal change in functionality or the number of clauses in the interpreter; it's\nmore like a comparison between endo- and exoskeletons, a different arrangement\nof equivalent bones and plates.</p>\n<h3 id=\"overview\">Overview</h3>\n<p>An RPython interpreter for a programming language generally does three or four\nthings, in order:</p>\n<ol>\n<li>Read and parse input programs</li>\n<li>Encode concrete syntax as abstract syntax</li>\n<li><em>Optionally</em>, optimize or reduce the abstract syntax</li>\n<li>Evaluate the abstract syntax: read input data, compute, print output data,\n   etc.</li>\n</ol>\n<p>Today we'll look at abstract syntax. Most programming languages admit a\n<a href=\"https://en.wikipedia.org/wiki/Parse_tree\">concrete parse tree</a> which is\nreadily abstracted to provide an <a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\">abstract syntax\ntree</a> (AST). The AST is\nusually encoded with the <em>initial</em> style of encoding. An initial encoding can\nbe transformed into any other encoding for the same AST, looks like a\nhierarchy of classes, and is implemented as a static structure on the heap.</p>\n<p>In contrast, there is also a <em>final</em> encoding. A final encoding can be\ntransformed into by any other encoding, looks like an interface for the\nactions of the interpreter, and is implemented as an unwinding structure on\nthe stack. From the RPython perspective, Python builtin modules like <code>os</code> or\n<code>sys</code> are final encodings for features of the operating system; the underlying\nimplementation is different when translated or untranslated, but the interface\nused to access those features does not change.</p>\n<p>In RPython, an initial encoding is built from a hierarchy of classes. Each\nclass represents a type of tree nodes, corresponding to a parser production in\nthe concrete parse tree. Each class instance therefore represents an\nindividual tree node. The fields of a class, particularly those filled during\n<code>.__init__()</code>, store pre-computed properties of each node; methods can be used\nto compute node properties on demand. This seems like an obvious and simple\napproach; what other approaches could there be? We need an example.</p>\n<h3 id=\"final-encoding-of-brainfuck\">Final Encoding of Brainfuck</h3>\n<p>We will consider <a href=\"https://esolangs.org/wiki/Brainfuck\">Brainfuck</a>, a simple\nTuring-complete programming language. An example Brainfuck program might be:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">[</span><span class=\"nb\">-</span><span class=\"k\">]</span>\n</pre></div>\n\n<p>This program is built from a loop and a decrement, and sets a cell to zero. In\nan initial encoding which follows the <a href=\"https://esolangs.org/wiki/Algebraic_Brainfuck\">algebraic semantics of\nBrainfuck</a>, the program could\nbe expressed by applying class constructors to build a structure on the heap:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">Loop</span><span class=\"p\">(</span><span class=\"n\">Plus</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n</pre></div>\n\n<p>A final encoding is similar, except that class constructors are replaced by\nmethods, the structure is built on the stack, and we are parameterized over\nthe choice of class:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">lambda</span> <span class=\"bp\">cls</span><span class=\"p\">:</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n</pre></div>\n\n<p>In ordinary Python, transforming between these would be trivial, and mostly is\na matter of passing around the appropriate class. Indeed, initial and final\nencodings are equivalent; we'll return to that fact later. However, in RPython,\nall of the types must line up, and classes must be determined before\ntranslation. We'll need to monomorphize our final encodings, using some\nRPython tricks later on. Before that, let's see what an actual Brainfuck\ninterface looks like, so that we can cover all of the difficulties with final\nencoding.</p>\n<p>Before we embark, please keep in mind that local code doesn't know what <code>cls</code>\nis. There's no type-safe way to inspect an arbitrary semantic domain. In the\ninitial-encoded version, we can ask <code>isinstance(bf, Loop)</code> to see whether an\nAST node is a loop, but there simply isn't an equivalent for final-encoded\nASTs. So, there is an implicit challenge to think about: how do we evaluate a\nprogram in an arbitrary semantic domain? For bonus points, how do we optimize\na program without inspecting the types of its AST nodes?</p>\n<p>What follows is a dissection of\n<a href=\"https://github.com/rpypkgs/rpypkgs/blob/d439d225b79ac82e009a5f1cd1c670f00356464c/bf/bf.py\">this</a>\nmodule at the given revision. Readers may find it satisfying to read the\nentire interpreter top to bottom first; it is less than 300 lines.</p>\n<h4 id=\"core-functionality\">Core Functionality</h4>\n<p>Final encoding is given as methods on an interface. These five methods\ncorrespond precisely to the summands of the algebra of Brainfuck.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">BF</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Other methods elided</span>\n    <span class=\"k\">def</span> <span class=\"nf\">plus</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n    <span class=\"k\">def</span> <span class=\"nf\">right</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n    <span class=\"k\">def</span> <span class=\"nf\">input</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n    <span class=\"k\">def</span> <span class=\"nf\">output</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n    <span class=\"k\">def</span> <span class=\"nf\">loop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">bfs</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n</pre></div>\n\n<p>Note that the <code>.loop()</code> method takes another program as an argument.\nInitial-encoded ASTs have other initial-encoded ASTs as fields on class\ninstances; final-encoded ASTs have other final-encoded ASTs as parameters\nto interface methods. RPython infers all of the types, so the reader has to\nknow that <code>i</code> is usually an integer while <code>bfs</code> is a sequence of Brainfuck\noperations.</p>\n<p>We're using a class to implement this functionality. Later, we'll treat it as\na mixin, rather than a superclass, to avoid typing problems.</p>\n<h4 id=\"monoid\">Monoid</h4>\n<p>In order to optimize input programs, we'll need to represent the underlying\n<a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a> of Brainfuck programs. To do\nthis, we add the signature for a monoid:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">BF</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Other methods elided</span>\n    <span class=\"k\">def</span> <span class=\"nf\">unit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n    <span class=\"k\">def</span> <span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n</pre></div>\n\n<p>This is technically a <a href=\"https://en.wikipedia.org/wiki/Magma_(algebra)\">unital\nmagma</a>, since RPython doesn't\nsupport algebraic laws, but we will enforce the algebraic laws later on during\noptimization. We also want to make use of the folklore that <a href=\"https://en.wikipedia.org/wiki/Free_monoid\">free\nmonoids</a> are lists, allowing\ncallers to pass a list of actions which we'll reduce with recursion:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">BF</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Other methods elided</span>\n    <span class=\"k\">def</span> <span class=\"nf\">joinList</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">bfs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">bfs</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"p\">()</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">joinList</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[:</span><span class=\"n\">i</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">joinList</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:]))</span>\n</pre></div>\n\n<p><code>.joinList()</code> is a little bulky to implement, but Wirth's principle applies:\nthe interpreter is shorter with it than without it.</p>\n<h4 id=\"idioms\">Idioms</h4>\n<p>Finally, our interface includes a few high-level idioms, like the zero program\nshown earlier, which are defined in terms of low-level behaviors. In an\ninitial encoding, these could be defined as module-level functions; here, we\ndefine them on the mixin class <code>BF</code>.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">BF</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Other methods elided</span>\n    <span class=\"k\">def</span> <span class=\"nf\">zero</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"k\">def</span> <span class=\"nf\">move</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scalemove</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">move2</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scalemove2</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">scalemove</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">joinList</span><span class=\"p\">([</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"p\">)]))</span>\n    <span class=\"k\">def</span> <span class=\"nf\">scalemove2</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">joinList</span><span class=\"p\">([</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">),</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">j</span><span class=\"p\">)]))</span>\n</pre></div>\n\n<h3 id=\"interface-oriented-architecture\">Interface-oriented Architecture</h3>\n<h4 id=\"applying-interfaces\">Applying Interfaces</h4>\n<p>Now, we hack at RPython's object model until everything translates. First,\nconsider the task of pretty-printing. For Brainfuck, we'll simply regurgitate\nthe input program as a Python string:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">AsStr</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">import_from_mixin</span><span class=\"p\">(</span><span class=\"n\">BF</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">unit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"s2\">\"\"</span>\n    <span class=\"k\">def</span> <span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span>\n    <span class=\"k\">def</span> <span class=\"nf\">plus</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"s1\">'+'</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"s1\">'-'</span> <span class=\"o\">*</span> <span class=\"o\">-</span><span class=\"n\">i</span>\n    <span class=\"k\">def</span> <span class=\"nf\">right</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"s1\">'&gt;'</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"s1\">'&lt;'</span> <span class=\"o\">*</span> <span class=\"o\">-</span><span class=\"n\">i</span>\n    <span class=\"k\">def</span> <span class=\"nf\">loop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">bfs</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"s1\">'['</span> <span class=\"o\">+</span> <span class=\"n\">bfs</span> <span class=\"o\">+</span> <span class=\"s1\">']'</span>\n    <span class=\"k\">def</span> <span class=\"nf\">input</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"s1\">','</span>\n    <span class=\"k\">def</span> <span class=\"nf\">output</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"s1\">'.'</span>\n</pre></div>\n\n<p>Via <code>rlib.objectmodel.import_from_mixin</code>, no stressing with covariance of\nreturn types is required. Instead, we shift from a Java-esque view of classes\nand objects, to an OCaml-ish view of prebuilt classes and constructors.\n<code>AsStr</code> is monomorphic, and any caller of it will have to create their own\ncovariance somehow. For example, here are the first few lines of the parsing\nfunction:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"nd\">@specialize</span><span class=\"o\">.</span><span class=\"n\">argtype</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"p\">):</span>\n    <span class=\"n\">ops</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"p\">()]</span>\n    <span class=\"c1\"># Parser elided to preserve the reader's attention</span>\n</pre></div>\n\n<p>By invoking <code>rlib.objectmodel.specialize.argtype</code>, we make copies of the\nparsing function, up to one per call site, based on our choice of semantic\ndomain. <a href=\"https://okmij.org/ftp/tagless-final/\">Oleg</a> calls these \"symantics\"\nbut I prefer \"domain\" in code. Also, note how the parsing stack starts with\nthe unit of the monoid, which corresponds to the empty input string; the\nparser will repeatedly use the monoidal join to build up a parsed expression\nwithout inspecting it. Here's a small taste of that:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">while</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">'+'</span><span class=\"p\">:</span> <span class=\"n\">ops</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">ops</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"k\">elif</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">'-'</span><span class=\"p\">:</span> <span class=\"n\">ops</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">ops</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"c1\"># and so on</span>\n</pre></div>\n\n<p>The reader may feel justifiably mystified; what breaks if we don't add these\nmagic annotations? Well, the translator will throw <code>UnionError</code> because the\nlow-level types don't match. RPython only wants to make one copy of functions\nlike <code>parse()</code> in its low-level representation, and each copy of <code>parse()</code>\nwill be compiled to monomorphic machine code. In this interpreter, in order to\nsupport parsing to an optimized string and also parsing to an evaluator, we\nneed two copies of <code>parse()</code>. <strong>It is okay to not fully understand this at\nfirst.</strong></p>\n<h4 id=\"composing-interfaces\">Composing Interfaces</h4>\n<p>Earlier, we noted that an interpreter can optionally optimize input programs\nafter parsing. To support this, we'll precompose a <a href=\"https://en.wikipedia.org/wiki/Peephole_optimization\">peephole\noptimizer</a> onto an\narbitrary domain. We could also postcompose with a parser instead, but that\nsounds more difficult. Here are the relevant parts:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">makePeephole</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n    <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">stripDomain</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">joinList</span><span class=\"p\">([</span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">bfs</span><span class=\"p\">])</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Peephole</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n        <span class=\"n\">import_from_mixin</span><span class=\"p\">(</span><span class=\"n\">BF</span><span class=\"p\">)</span>\n        <span class=\"k\">def</span> <span class=\"nf\">unit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"p\">[]</span>\n        <span class=\"k\">def</span> <span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span>\n        <span class=\"c1\"># Actual definition elided... for now...</span>\n    <span class=\"k\">return</span> <span class=\"n\">Peephole</span><span class=\"p\">,</span> <span class=\"n\">stripDomain</span>\n</pre></div>\n\n<p>Don't worry about the actual optimization yet. What's important here is the\npattern of initialization of semantic domains. <code>makePeephole</code> is an\n<a href=\"https://en.wikipedia.org/wiki/Standard_ML\">SML</a>-style functor on semantic\ndomains: given a final encoding of Brainfuck, it produces another final\nencoding of Brainfuck which incorporates optimizations. The helper\n<code>stripDomain</code> is a finalizer which performs the extraction from the\noptimizer's domain to the underlying <code>cls</code> that was passed in at translation\ntime. For example, let's optimize pretty-printing:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">AsStr</span><span class=\"p\">,</span> <span class=\"n\">finishStr</span> <span class=\"o\">=</span> <span class=\"n\">makePeephole</span><span class=\"p\">(</span><span class=\"n\">AsStr</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Now, it only takes one line to parse and print an optimized AST without ever\nbuilding it on the heap. To be pedantic, fragments of the output string will\nbe heap-allocated, but the AST's node structure will only ever be\nstack-allocated. Further, to be shallow, the parser is written to prevent\nmalicious input from causing a stack overflow, and this forces it to maintain\na heap-allocated RPython list of intermediate operations inside loops.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"nb\">print</span> <span class=\"n\">finishStr</span><span class=\"p\">(</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">AsStr</span><span class=\"p\">()))</span>\n</pre></div>\n\n<h3 id=\"performance\">Performance</h3>\n<p>But is it fast? Yes. It's faster than the prior version, which was\ninitial-encoded, and also faster than Andrew Brown's classic version (<a href=\"https://pypy.org/posts/2011/04/tutorial-writing-interpreter-with-pypy-3785910476193156295.html\">part\n1</a>,\n<a href=\"https://pypy.org/posts/2011/04/tutorial-part-2-adding-jit-8121732841568309472.html\">part\n2</a>).\nSince Brown's interpreter does not perform much optimization, we will focus on\nhow final encoding can outperform initial encoding.</p>\n<h4 id=\"jit\">JIT</h4>\n<p>First, why is it faster than the same interpreter with initial encoding? Well,\nit still has initial encoding from the JIT's perspective! There is an <code>Op</code>\nclass with a hierarchy of subclasses implementing individual behaviors. A\nsincere tagless-final student, or those who remember <a href=\"https://pyvideo.org/pycon-us-2012/stop-writing-classes.html\">Stop Writing Classes\n(2012, Pycon\nUS)</a>, will\nrecognize that the following classes could be plain functions, and should\nthink of the classes as a concession to RPython's lack of support for lambdas\nwith closures rather than an initial encoding. We aren't ever going to\ndirectly typecheck any <code>Op</code>, but the JIT will generate typechecking guards\nanyway, so we effectively get a fully-promoted AST inlined into each JIT\ntrace. First, some simple behaviors:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">Op</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span> <span class=\"n\">_immutable_</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">_Input</span><span class=\"p\">(</span><span class=\"n\">Op</span><span class=\"p\">):</span>\n    <span class=\"n\">_immutable_</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">def</span> <span class=\"nf\">runOn</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tape</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">):</span>\n        <span class=\"n\">tape</span><span class=\"p\">[</span><span class=\"n\">position</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">position</span>\n<span class=\"n\">Input</span> <span class=\"o\">=</span> <span class=\"n\">_Input</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">_Output</span><span class=\"p\">(</span><span class=\"n\">Op</span><span class=\"p\">):</span>\n    <span class=\"n\">_immutable_</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">def</span> <span class=\"nf\">runOn</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tape</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">):</span>\n        <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"n\">tape</span><span class=\"p\">[</span><span class=\"n\">position</span><span class=\"p\">]))</span>\n        <span class=\"k\">return</span> <span class=\"n\">position</span>\n<span class=\"n\">Output</span> <span class=\"o\">=</span> <span class=\"n\">_Output</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Add</span><span class=\"p\">(</span><span class=\"n\">Op</span><span class=\"p\">):</span>\n    <span class=\"n\">_immutable_</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">_immutable_fields_</span> <span class=\"o\">=</span> <span class=\"s2\">\"imm\"</span><span class=\"p\">,</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">imm</span><span class=\"p\">):</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">imm</span> <span class=\"o\">=</span> <span class=\"n\">imm</span>\n    <span class=\"k\">def</span> <span class=\"nf\">runOn</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tape</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">):</span>\n        <span class=\"n\">tape</span><span class=\"p\">[</span><span class=\"n\">position</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">imm</span>\n        <span class=\"k\">return</span> <span class=\"n\">position</span>\n</pre></div>\n\n<p>The JIT does technically have less information than before; it no longer knows\nthat a sequence of immutable operations is immutable enough to be worth\nunrolling, but a bit of <code>rlib.jit.unroll_safe</code> fixes that:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">Seq</span><span class=\"p\">(</span><span class=\"n\">Op</span><span class=\"p\">):</span>\n    <span class=\"n\">_immutable_</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">_immutable_fields_</span> <span class=\"o\">=</span> <span class=\"s2\">\"ops[*]\"</span><span class=\"p\">,</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ops</span><span class=\"p\">):</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ops</span> <span class=\"o\">=</span> <span class=\"n\">ops</span>\n    <span class=\"nd\">@unroll_safe</span>\n    <span class=\"k\">def</span> <span class=\"nf\">runOn</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tape</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"p\">:</span> <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">runOn</span><span class=\"p\">(</span><span class=\"n\">tape</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">position</span>\n</pre></div>\n\n<p>Finally, the JIT entry point is at the head of each loop, just like with prior\ninterpreters. Since Brainfuck doesn't support mid-loop jumps, there's no\npenalty for only allowing merge points at the head of the loop.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">Loop</span><span class=\"p\">(</span><span class=\"n\">Op</span><span class=\"p\">):</span>\n    <span class=\"n\">_immutable_</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">_immutable_fields_</span> <span class=\"o\">=</span> <span class=\"s2\">\"op\"</span><span class=\"p\">,</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">):</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">op</span>\n    <span class=\"k\">def</span> <span class=\"nf\">runOn</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tape</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">):</span>\n        <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">op</span>\n        <span class=\"k\">while</span> <span class=\"n\">tape</span><span class=\"p\">[</span><span class=\"n\">position</span><span class=\"p\">]:</span>\n            <span class=\"n\">jitdriver</span><span class=\"o\">.</span><span class=\"n\">jit_merge_point</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">=</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">tape</span><span class=\"o\">=</span><span class=\"n\">tape</span><span class=\"p\">)</span>\n            <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">runOn</span><span class=\"p\">(</span><span class=\"n\">tape</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">position</span>\n</pre></div>\n\n<p>That's the end of the implicit challenge. There's no secret to it; just\nevaluate the AST. Here's part of the semantic domain for evaluation, as well\nas the \"functor\" to optimize it. In <code>AsOps.join()</code> are the <em>only</em>\n<code>isinstance()</code> calls in the entire interpreter! This is acceptable because\n<code>Seq</code> is effectively a type wrapper for an RPython list, so that a list of\noperations is also an operation; its list is initial-encoded and available for\ninspection.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">AsOps</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">import_from_mixin</span><span class=\"p\">(</span><span class=\"n\">BF</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">unit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"n\">Shift</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">Seq</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">Seq</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">Seq</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">ops</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">Seq</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"n\">Seq</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">ops</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">])</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">Seq</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"n\">Seq</span><span class=\"p\">([</span><span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">Seq</span><span class=\"p\">([</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">])</span>\n    <span class=\"c1\"># Other methods elided!</span>\n\n<span class=\"n\">AsOps</span><span class=\"p\">,</span> <span class=\"n\">finishOps</span> <span class=\"o\">=</span> <span class=\"n\">makePeephole</span><span class=\"p\">(</span><span class=\"n\">AsOps</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>And finally here is the actual top-level code to evaluate the input program.\nAs before, once everything is composed, the actual invocation only takes one\nline.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">tape</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\x00</span><span class=\"s2\">\"</span> <span class=\"o\">*</span> <span class=\"n\">cells</span><span class=\"p\">)</span>\n<span class=\"n\">finishOps</span><span class=\"p\">(</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">AsOps</span><span class=\"p\">()))</span><span class=\"o\">.</span><span class=\"n\">runOn</span><span class=\"p\">(</span><span class=\"n\">tape</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre></div>\n\n<h4 id=\"peephole-optimization\">Peephole Optimization</h4>\n<p>Our peephole optimizer is an <a href=\"https://en.wikipedia.org/wiki/Abstract_interpretation\">abstract\ninterpreter</a> with one\ninstruction of lookahead/rewrite buffer. It implements the aforementioned\nalgebraic laws of the Brainfuck monoid. It also implements idiom recognition\nfor loops. First, the abstract interpreter. The abstract domain has six\nelements:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">AbstractDomain</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n<span class=\"n\">meh</span><span class=\"p\">,</span> <span class=\"n\">aLoop</span><span class=\"p\">,</span> <span class=\"n\">aZero</span><span class=\"p\">,</span> <span class=\"n\">theIdentity</span><span class=\"p\">,</span> <span class=\"n\">anAdd</span><span class=\"p\">,</span> <span class=\"n\">aRight</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">AbstractDomain</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)]</span>\n</pre></div>\n\n<p>We'll also tag everything with an integer, so that <code>anAdd</code> or <code>aRight</code> can be\nexact annotations. <em>This</em> is the actual <code>Peephole.join()</code> method:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">l</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"n\">r</span>\n    <span class=\"n\">rv</span> <span class=\"o\">=</span> <span class=\"n\">l</span><span class=\"p\">[:]</span>\n    <span class=\"n\">bfHead</span><span class=\"p\">,</span> <span class=\"n\">adHead</span><span class=\"p\">,</span> <span class=\"n\">immHead</span> <span class=\"o\">=</span> <span class=\"n\">rv</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">bf</span><span class=\"p\">,</span> <span class=\"n\">ad</span><span class=\"p\">,</span> <span class=\"n\">imm</span> <span class=\"ow\">in</span> <span class=\"n\">r</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">ad</span> <span class=\"ow\">is</span> <span class=\"n\">theIdentity</span><span class=\"p\">:</span> <span class=\"k\">continue</span>\n        <span class=\"k\">elif</span> <span class=\"n\">adHead</span> <span class=\"ow\">is</span> <span class=\"n\">aLoop</span> <span class=\"ow\">and</span> <span class=\"n\">ad</span> <span class=\"ow\">is</span> <span class=\"n\">aLoop</span><span class=\"p\">:</span> <span class=\"k\">continue</span>\n        <span class=\"k\">elif</span> <span class=\"n\">adHead</span> <span class=\"ow\">is</span> <span class=\"n\">theIdentity</span><span class=\"p\">:</span>\n            <span class=\"n\">bfHead</span><span class=\"p\">,</span> <span class=\"n\">adHead</span><span class=\"p\">,</span> <span class=\"n\">immHead</span> <span class=\"o\">=</span> <span class=\"n\">bf</span><span class=\"p\">,</span> <span class=\"n\">ad</span><span class=\"p\">,</span> <span class=\"n\">imm</span>\n        <span class=\"k\">elif</span> <span class=\"n\">adHead</span> <span class=\"ow\">is</span> <span class=\"n\">anAdd</span> <span class=\"ow\">and</span> <span class=\"n\">ad</span> <span class=\"ow\">is</span> <span class=\"n\">aZero</span><span class=\"p\">:</span>\n            <span class=\"n\">bfHead</span><span class=\"p\">,</span> <span class=\"n\">adHead</span><span class=\"p\">,</span> <span class=\"n\">immHead</span> <span class=\"o\">=</span> <span class=\"n\">bf</span><span class=\"p\">,</span> <span class=\"n\">ad</span><span class=\"p\">,</span> <span class=\"n\">imm</span>\n        <span class=\"k\">elif</span> <span class=\"n\">adHead</span> <span class=\"ow\">is</span> <span class=\"n\">anAdd</span> <span class=\"ow\">and</span> <span class=\"n\">ad</span> <span class=\"ow\">is</span> <span class=\"n\">anAdd</span><span class=\"p\">:</span>\n            <span class=\"n\">immHead</span> <span class=\"o\">+=</span> <span class=\"n\">imm</span>\n            <span class=\"k\">if</span> <span class=\"n\">immHead</span><span class=\"p\">:</span> <span class=\"n\">bfHead</span> <span class=\"o\">=</span> <span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"n\">immHead</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">rv</span><span class=\"p\">:</span> <span class=\"n\">bfHead</span><span class=\"p\">,</span> <span class=\"n\">adHead</span><span class=\"p\">,</span> <span class=\"n\">immHead</span> <span class=\"o\">=</span> <span class=\"n\">rv</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">bfHead</span> <span class=\"o\">=</span> <span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"p\">()</span>\n                <span class=\"n\">adHead</span> <span class=\"o\">=</span> <span class=\"n\">theIdentity</span>\n        <span class=\"k\">elif</span> <span class=\"n\">adHead</span> <span class=\"ow\">is</span> <span class=\"n\">aRight</span> <span class=\"ow\">and</span> <span class=\"n\">ad</span> <span class=\"ow\">is</span> <span class=\"n\">aRight</span><span class=\"p\">:</span>\n            <span class=\"n\">immHead</span> <span class=\"o\">+=</span> <span class=\"n\">imm</span>\n            <span class=\"k\">if</span> <span class=\"n\">immHead</span><span class=\"p\">:</span> <span class=\"n\">bfHead</span> <span class=\"o\">=</span> <span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">(</span><span class=\"n\">immHead</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">rv</span><span class=\"p\">:</span> <span class=\"n\">bfHead</span><span class=\"p\">,</span> <span class=\"n\">adHead</span><span class=\"p\">,</span> <span class=\"n\">immHead</span> <span class=\"o\">=</span> <span class=\"n\">rv</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">bfHead</span> <span class=\"o\">=</span> <span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"p\">()</span>\n                <span class=\"n\">adHead</span> <span class=\"o\">=</span> <span class=\"n\">theIdentity</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">rv</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">bfHead</span><span class=\"p\">,</span> <span class=\"n\">adHead</span><span class=\"p\">,</span> <span class=\"n\">immHead</span><span class=\"p\">))</span>\n            <span class=\"n\">bfHead</span><span class=\"p\">,</span> <span class=\"n\">adHead</span><span class=\"p\">,</span> <span class=\"n\">immHead</span> <span class=\"o\">=</span> <span class=\"n\">bf</span><span class=\"p\">,</span> <span class=\"n\">ad</span><span class=\"p\">,</span> <span class=\"n\">imm</span>\n    <span class=\"n\">rv</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">bfHead</span><span class=\"p\">,</span> <span class=\"n\">adHead</span><span class=\"p\">,</span> <span class=\"n\">immHead</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">rv</span>\n</pre></div>\n\n<p>If this were to get much longer, then <a href=\"https://pypy.org/posts/2024/10/jit-peephole-dsl.html\">implementing a\nDSL</a> would be worth it,\nbut this is a short-enough method to inline. The abstract interpretation is\nassumed by induction for the left-hand side of the join, save for the final\ninstruction, which is loaded into a rewrite register. Each instruction on the\nright-hand side is inspected exactly once. The logic for <code>anAdd</code> followed by\n<code>anAdd</code> is exactly the same as for <code>aRight</code> followed by <code>aRight</code> because they\nboth have underlying <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">Abelian\ngroups</a> given by the integers.\nThe rewrite register is carefully pushed onto and popped off from the\nleft-hand side in order to cancel out <code>theIdentity</code>, which itself is merely a\nunifier for <code>anAdd</code> or <code>aRight</code> of 0.</p>\n<p>Note that we generate a lot of garbage. For example, parsing a string of <em>n</em>\n'+' characters will cause the peephole optimizer to allocate <em>n</em> instances of\nthe underlying <code>domain.plus()</code> action, from <code>domain.plus(1)</code> up to\n<code>domain.plus(n)</code>. An older initial-encoded version of this interpreter used\n<a href=\"https://en.wikipedia.org/wiki/Hash_consing\">hash consing</a> to avoid ever\nbuilding an op more than once, even loops. It appears more efficient to\ngenerate lots of immutable garbage than to repeatedly hash inputs and search\nmutable hash tables, at least for optimizing Brainfuck incrementally during\nparsing.</p>\n<p>Finally, let's look at idiom recognition. RPython lists are initial-coded, so\nwe can dispatch based on the length of the list, and then inspect the abstract\ndomains of each action.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">isConstAdd</span><span class=\"p\">(</span><span class=\"n\">bf</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"n\">bf</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">anAdd</span> <span class=\"ow\">and</span> <span class=\"n\">bf</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">i</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">oppositeShifts</span><span class=\"p\">(</span><span class=\"n\">bf1</span><span class=\"p\">,</span> <span class=\"n\">bf2</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">bf1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">bf2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">aRight</span> <span class=\"ow\">and</span> <span class=\"n\">bf1</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"n\">bf2</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">oppositeShifts2</span><span class=\"p\">(</span><span class=\"n\">bf1</span><span class=\"p\">,</span> <span class=\"n\">bf2</span><span class=\"p\">,</span> <span class=\"n\">bf3</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">bf1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">bf2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">bf3</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">aRight</span> <span class=\"ow\">and</span>\n            <span class=\"n\">bf1</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">bf2</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">bf3</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">loop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">bfs</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"n\">bf</span><span class=\"p\">,</span> <span class=\"n\">ad</span><span class=\"p\">,</span> <span class=\"n\">imm</span> <span class=\"o\">=</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">ad</span> <span class=\"ow\">is</span> <span class=\"n\">anAdd</span> <span class=\"ow\">and</span> <span class=\"n\">imm</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"p\">[(</span><span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">zero</span><span class=\"p\">(),</span> <span class=\"n\">aZero</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isConstAdd</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">and</span>\n            <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">anAdd</span> <span class=\"ow\">and</span>\n            <span class=\"n\">oppositeShifts</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])):</span>\n            <span class=\"k\">return</span> <span class=\"p\">[(</span><span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">scalemove</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]),</span> <span class=\"n\">aLoop</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isConstAdd</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">and</span>\n            <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">anAdd</span> <span class=\"ow\">and</span>\n            <span class=\"n\">oppositeShifts</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])):</span>\n            <span class=\"k\">return</span> <span class=\"p\">[(</span><span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">scalemove</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]),</span> <span class=\"n\">aLoop</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">6</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isConstAdd</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">and</span>\n            <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">anAdd</span> <span class=\"ow\">and</span>\n            <span class=\"n\">oppositeShifts2</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">])):</span>\n            <span class=\"k\">return</span> <span class=\"p\">[(</span><span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">scalemove2</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">],</span>\n                                       <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">],</span>\n                                       <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]),</span> <span class=\"n\">aLoop</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isConstAdd</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">and</span>\n            <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">anAdd</span> <span class=\"ow\">and</span>\n            <span class=\"n\">oppositeShifts2</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">])):</span>\n            <span class=\"k\">return</span> <span class=\"p\">[(</span><span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">scalemove2</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">],</span>\n                                       <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">],</span>\n                                       <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]),</span> <span class=\"n\">aLoop</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span>\n    <span class=\"k\">return</span> <span class=\"p\">[(</span><span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"n\">stripDomain</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">)),</span> <span class=\"n\">aLoop</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span>\n</pre></div>\n\n<p>This ends the bonus question. How do we optimize an unknown semantic domain?\nWe must maintain an abstract context which describes elements of the domain.\nIn initial encoding, we ask an AST about itself. In final encoding, we already\nknow everything relevant about the AST.</p>\n<p>The careful reader will see that I didn't really answer that opening question\nin the JIT section. Because the JIT still ranges over the same operations as\nbefore, it can't really be slower; but why is it now faster? Because the\noptimizer is now slightly better in a few edge cases. It performs the same\noptimizations as before, but the rigor of abstract interpretation causes it to\nemit slightly better operations to the JIT backend.</p>\n<p>Concretely, improving the optimizer can shorten pretty-printed programs. The\n<a href=\"https://bbgauge.info/\">Busy Beaver Gauge</a> measures the length of programs\nwhich search for solutions to mathematical problems. After implementing and\ndebugging the final-encoded interpreter, I found that two of my entries on the\n<a href=\"https://bbgauge.info/brainfuck.html\">Busy Beaver Gauge for Brainfuck</a> had\nbecome shorter by about 2%. (Most other entries are already hand-optimized\naccording to the standard algebra and have no optimization opportunities.)</p>\n<h3 id=\"discussion\">Discussion</h3>\n<p>Given that initial and final encodings are equivalent, and noting that\nRPython's toolchain is written to prefer initial encodings, what did we\nactually gain? Did we gain anything?</p>\n<p>One obvious downside to final encoding in RPython is interpreter size. The\nexample interpreter shown here is a rewrite of an initial-encoded interpreter\nwhich can be seen\n<a href=\"https://github.com/rpypkgs/rpypkgs/blob/659c8a26d428a1e04fdff614b28e464a50d4647b/bf/bf.py\">here</a>\nfor comparison. Final encoding adds about 20% more code in this case.</p>\n<p>Final encoding is not necessarily more code than initial encoding, though. All\nAST encodings in interpreters are subject to the <a href=\"https://en.wikipedia.org/wiki/Expression_problem\">Expression\nProblem</a>, which states that\nthere is generally a quadratic amount of code required to implement multiple\nbehaviors for an AST with multiple types of nodes; specifically, <em>n</em> behaviors\nfor <em>m</em> types of nodes require <em>n</em> × <em>m</em> methods. Initial encodings improve the\ncost of adding new types of nodes; final encodings improve the cost of adding\nnew behaviors. Final encoding may tend to win in large codebases for mature\nlanguages, where the language does not change often but new behaviors are added\nfrequently and maintained for long periods.</p>\n<p>Optimizations in final encoding require a bit of planning. The\nabstract-interpretation approach is solid but relies upon the monoid and its\nalgebraic laws. In the worst case, an entire class hierarchy could be required\nto encode the abstraction.</p>\n<p>It is remarkable to find <strong>a 2% improvement in residual program size</strong> merely\nby reimplementing an optimizer as an abstract interpreter respecting the\nalgebraic laws. This could be the most important lesson for compiler\nengineers, if it happens to generalize.</p>\n<p>Final encoding was popularized via the tagless-final movement in OCaml and\nScala, including famously in a series of tutorials by <a href=\"https://okmij.org/ftp/tagless-final/\">Kiselyov et\nal</a>. A \"tag\", in this jargon, is a\nruntime identifier for an object's type or class; a tagless encoding\neffectively doesn't allow <code>isinstance()</code> at all. In the above presentation,\ntags could be hacked in, but were not materially relevant to most steps. Tags\nwere required for the final evaluation step, though, and the tagless-final\ninsight is that certain type systems can express type-safe evaluation without\nthose tags. We won't go further in this direction because tags also\ncommunicate valuable information to the JIT.</p>\n<h4 id=\"summarizing-table\">Summarizing Table</h4>\n<table>\n<thead>\n<tr>\n<th>Initial Encoding</th>\n<th>Final Encoding</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hierarchy of classes</td>\n<td>signature of interfaces</td>\n</tr>\n<tr>\n<td>class constructors</td>\n<td>method calls</td>\n</tr>\n<tr>\n<td>built on the heap</td>\n<td>built on the stack</td>\n</tr>\n<tr>\n<td>traversals allocate stack</td>\n<td>traversals allocate heap</td>\n</tr>\n<tr>\n<td>tags are available with <code>isinstance()</code></td>\n<td>tags are only available through hacks</td>\n</tr>\n<tr>\n<td>cost of adding a new AST node: one class</td>\n<td>cost of adding a new AST node: one method on every other class</td>\n</tr>\n<tr>\n<td>cost of adding a new behavior: one method on every other class</td>\n<td>cost of adding a new behavior: one class</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to folks in <code>#pypy</code> on Libera Chat: arigato for the idea, larstiq for\npushing me to write it up, and cfbolz and mattip for reviewing and finding\nmistakes. The original IRC discussion leading to this blog post is available\n<a href=\"https://gist.github.com/MostAwesomeDude/fd86ad2d2e38af7aa67b6e548aabe008\">here</a>.</p>\n<p>This interpreter is part of the <a href=\"https://github.com/rpypkgs/rpypkgs\">rpypkgs</a>\nsuite, a Nix flake for RPython interpreters. Readers with Nix installed can\nrun this interpreter directly from the flake:</p>\n<div class=\"code\"><pre class=\"code literal-block\">$<span class=\"w\"> </span>nix-prefetch-url<span class=\"w\"> </span>https://github.com/MG-K/pypy-tutorial-ko/raw/refs/heads/master/mandel.b\n$<span class=\"w\"> </span>nix<span class=\"w\"> </span>run<span class=\"w\"> </span>github:rpypkgs/rpypkgs#bf<span class=\"w\"> </span>--<span class=\"w\"> </span>/nix/store/ngnphbap9ncvz41d0fkvdh61n7j2bg21-mandel.b\n</pre></div>"
        }
      ],
      "description": "<h3 id=\"introduction\">Introduction</h3>\n<p>This post started as a quick note summarizing a recent experiment I carried\nout upon a small RPython interpreter by rewriting it in an uncommon style. It\nis written for folks who have already written some RPython and want to take a\ndeeper look at interpreter architecture.</p>\n<p>Some experiments are about finding solutions to problems. This experiment is\nabout taking a solution which is already well-understood and applying it in\nthe context of RPython to find a new approach. As we will see, there is no\nreal change in functionality or the number of clauses in the interpreter; it's\nmore like a comparison between endo- and exoskeletons, a different arrangement\nof equivalent bones and plates.</p>\n<h3 id=\"overview\">Overview</h3>\n<p>An RPython interpreter for a programming language generally does three or four\nthings, in order:</p>\n<ol>\n<li>Read and parse input programs</li>\n<li>Encode concrete syntax as abstract syntax</li>\n<li><em>Optionally</em>, optimize or reduce the abstract syntax</li>\n<li>Evaluate the abstract syntax: read input data, compute, print output data,\n   etc.</li>\n</ol>\n<p>Today we'll look at abstract syntax. Most programming languages admit a\n<a href=\"https://en.wikipedia.org/wiki/Parse_tree\">concrete parse tree</a> which is\nreadily abstracted to provide an <a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\">abstract syntax\ntree</a> (AST). The AST is\nusually encoded with the <em>initial</em> style of encoding. An initial encoding can\nbe transformed into any other encoding for the same AST, looks like a\nhierarchy of classes, and is implemented as a static structure on the heap.</p>\n<p>In contrast, there is also a <em>final</em> encoding. A final encoding can be\ntransformed into by any other encoding, looks like an interface for the\nactions of the interpreter, and is implemented as an unwinding structure on\nthe stack. From the RPython perspective, Python builtin modules like <code>os</code> or\n<code>sys</code> are final encodings for features of the operating system; the underlying\nimplementation is different when translated or untranslated, but the interface\nused to access those features does not change.</p>\n<p>In RPython, an initial encoding is built from a hierarchy of classes. Each\nclass represents a type of tree nodes, corresponding to a parser production in\nthe concrete parse tree. Each class instance therefore represents an\nindividual tree node. The fields of a class, particularly those filled during\n<code>.__init__()</code>, store pre-computed properties of each node; methods can be used\nto compute node properties on demand. This seems like an obvious and simple\napproach; what other approaches could there be? We need an example.</p>\n<h3 id=\"final-encoding-of-brainfuck\">Final Encoding of Brainfuck</h3>\n<p>We will consider <a href=\"https://esolangs.org/wiki/Brainfuck\">Brainfuck</a>, a simple\nTuring-complete programming language. An example Brainfuck program might be:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">[</span><span class=\"nb\">-</span><span class=\"k\">]</span>\n</pre></div>\n\n<p>This program is built from a loop and a decrement, and sets a cell to zero. In\nan initial encoding which follows the <a href=\"https://esolangs.org/wiki/Algebraic_Brainfuck\">algebraic semantics of\nBrainfuck</a>, the program could\nbe expressed by applying class constructors to build a structure on the heap:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">Loop</span><span class=\"p\">(</span><span class=\"n\">Plus</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n</pre></div>\n\n<p>A final encoding is similar, except that class constructors are replaced by\nmethods, the structure is built on the stack, and we are parameterized over\nthe choice of class:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">lambda</span> <span class=\"bp\">cls</span><span class=\"p\">:</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n</pre></div>\n\n<p>In ordinary Python, transforming between these would be trivial, and mostly is\na matter of passing around the appropriate class. Indeed, initial and final\nencodings are equivalent; we'll return to that fact later. However, in RPython,\nall of the types must line up, and classes must be determined before\ntranslation. We'll need to monomorphize our final encodings, using some\nRPython tricks later on. Before that, let's see what an actual Brainfuck\ninterface looks like, so that we can cover all of the difficulties with final\nencoding.</p>\n<p>Before we embark, please keep in mind that local code doesn't know what <code>cls</code>\nis. There's no type-safe way to inspect an arbitrary semantic domain. In the\ninitial-encoded version, we can ask <code>isinstance(bf, Loop)</code> to see whether an\nAST node is a loop, but there simply isn't an equivalent for final-encoded\nASTs. So, there is an implicit challenge to think about: how do we evaluate a\nprogram in an arbitrary semantic domain? For bonus points, how do we optimize\na program without inspecting the types of its AST nodes?</p>\n<p>What follows is a dissection of\n<a href=\"https://github.com/rpypkgs/rpypkgs/blob/d439d225b79ac82e009a5f1cd1c670f00356464c/bf/bf.py\">this</a>\nmodule at the given revision. Readers may find it satisfying to read the\nentire interpreter top to bottom first; it is less than 300 lines.</p>\n<h4 id=\"core-functionality\">Core Functionality</h4>\n<p>Final encoding is given as methods on an interface. These five methods\ncorrespond precisely to the summands of the algebra of Brainfuck.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">BF</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Other methods elided</span>\n    <span class=\"k\">def</span> <span class=\"nf\">plus</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n    <span class=\"k\">def</span> <span class=\"nf\">right</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n    <span class=\"k\">def</span> <span class=\"nf\">input</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n    <span class=\"k\">def</span> <span class=\"nf\">output</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n    <span class=\"k\">def</span> <span class=\"nf\">loop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">bfs</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n</pre></div>\n\n<p>Note that the <code>.loop()</code> method takes another program as an argument.\nInitial-encoded ASTs have other initial-encoded ASTs as fields on class\ninstances; final-encoded ASTs have other final-encoded ASTs as parameters\nto interface methods. RPython infers all of the types, so the reader has to\nknow that <code>i</code> is usually an integer while <code>bfs</code> is a sequence of Brainfuck\noperations.</p>\n<p>We're using a class to implement this functionality. Later, we'll treat it as\na mixin, rather than a superclass, to avoid typing problems.</p>\n<h4 id=\"monoid\">Monoid</h4>\n<p>In order to optimize input programs, we'll need to represent the underlying\n<a href=\"https://en.wikipedia.org/wiki/Monoid\">monoid</a> of Brainfuck programs. To do\nthis, we add the signature for a monoid:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">BF</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Other methods elided</span>\n    <span class=\"k\">def</span> <span class=\"nf\">unit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n    <span class=\"k\">def</span> <span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n</pre></div>\n\n<p>This is technically a <a href=\"https://en.wikipedia.org/wiki/Magma_(algebra)\">unital\nmagma</a>, since RPython doesn't\nsupport algebraic laws, but we will enforce the algebraic laws later on during\noptimization. We also want to make use of the folklore that <a href=\"https://en.wikipedia.org/wiki/Free_monoid\">free\nmonoids</a> are lists, allowing\ncallers to pass a list of actions which we'll reduce with recursion:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">BF</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Other methods elided</span>\n    <span class=\"k\">def</span> <span class=\"nf\">joinList</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">bfs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">bfs</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"p\">()</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">joinList</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[:</span><span class=\"n\">i</span><span class=\"p\">]),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">joinList</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:]))</span>\n</pre></div>\n\n<p><code>.joinList()</code> is a little bulky to implement, but Wirth's principle applies:\nthe interpreter is shorter with it than without it.</p>\n<h4 id=\"idioms\">Idioms</h4>\n<p>Finally, our interface includes a few high-level idioms, like the zero program\nshown earlier, which are defined in terms of low-level behaviors. In an\ninitial encoding, these could be defined as module-level functions; here, we\ndefine them on the mixin class <code>BF</code>.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">BF</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Other methods elided</span>\n    <span class=\"k\">def</span> <span class=\"nf\">zero</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"k\">def</span> <span class=\"nf\">move</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scalemove</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">move2</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scalemove2</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">scalemove</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">joinList</span><span class=\"p\">([</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"p\">)]))</span>\n    <span class=\"k\">def</span> <span class=\"nf\">scalemove2</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">joinList</span><span class=\"p\">([</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">),</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">j</span><span class=\"p\">)]))</span>\n</pre></div>\n\n<h3 id=\"interface-oriented-architecture\">Interface-oriented Architecture</h3>\n<h4 id=\"applying-interfaces\">Applying Interfaces</h4>\n<p>Now, we hack at RPython's object model until everything translates. First,\nconsider the task of pretty-printing. For Brainfuck, we'll simply regurgitate\nthe input program as a Python string:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">AsStr</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">import_from_mixin</span><span class=\"p\">(</span><span class=\"n\">BF</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">unit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"s2\">\"\"</span>\n    <span class=\"k\">def</span> <span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span>\n    <span class=\"k\">def</span> <span class=\"nf\">plus</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"s1\">'+'</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"s1\">'-'</span> <span class=\"o\">*</span> <span class=\"o\">-</span><span class=\"n\">i</span>\n    <span class=\"k\">def</span> <span class=\"nf\">right</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"s1\">'&gt;'</span> <span class=\"o\">*</span> <span class=\"n\">i</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"s1\">'&lt;'</span> <span class=\"o\">*</span> <span class=\"o\">-</span><span class=\"n\">i</span>\n    <span class=\"k\">def</span> <span class=\"nf\">loop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">bfs</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"s1\">'['</span> <span class=\"o\">+</span> <span class=\"n\">bfs</span> <span class=\"o\">+</span> <span class=\"s1\">']'</span>\n    <span class=\"k\">def</span> <span class=\"nf\">input</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"s1\">','</span>\n    <span class=\"k\">def</span> <span class=\"nf\">output</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"s1\">'.'</span>\n</pre></div>\n\n<p>Via <code>rlib.objectmodel.import_from_mixin</code>, no stressing with covariance of\nreturn types is required. Instead, we shift from a Java-esque view of classes\nand objects, to an OCaml-ish view of prebuilt classes and constructors.\n<code>AsStr</code> is monomorphic, and any caller of it will have to create their own\ncovariance somehow. For example, here are the first few lines of the parsing\nfunction:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"nd\">@specialize</span><span class=\"o\">.</span><span class=\"n\">argtype</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"p\">):</span>\n    <span class=\"n\">ops</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"p\">()]</span>\n    <span class=\"c1\"># Parser elided to preserve the reader's attention</span>\n</pre></div>\n\n<p>By invoking <code>rlib.objectmodel.specialize.argtype</code>, we make copies of the\nparsing function, up to one per call site, based on our choice of semantic\ndomain. <a href=\"https://okmij.org/ftp/tagless-final/\">Oleg</a> calls these \"symantics\"\nbut I prefer \"domain\" in code. Also, note how the parsing stack starts with\nthe unit of the monoid, which corresponds to the empty input string; the\nparser will repeatedly use the monoidal join to build up a parsed expression\nwithout inspecting it. Here's a small taste of that:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">while</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">'+'</span><span class=\"p\">:</span> <span class=\"n\">ops</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">ops</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"k\">elif</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s1\">'-'</span><span class=\"p\">:</span> <span class=\"n\">ops</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">ops</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"c1\"># and so on</span>\n</pre></div>\n\n<p>The reader may feel justifiably mystified; what breaks if we don't add these\nmagic annotations? Well, the translator will throw <code>UnionError</code> because the\nlow-level types don't match. RPython only wants to make one copy of functions\nlike <code>parse()</code> in its low-level representation, and each copy of <code>parse()</code>\nwill be compiled to monomorphic machine code. In this interpreter, in order to\nsupport parsing to an optimized string and also parsing to an evaluator, we\nneed two copies of <code>parse()</code>. <strong>It is okay to not fully understand this at\nfirst.</strong></p>\n<h4 id=\"composing-interfaces\">Composing Interfaces</h4>\n<p>Earlier, we noted that an interpreter can optionally optimize input programs\nafter parsing. To support this, we'll precompose a <a href=\"https://en.wikipedia.org/wiki/Peephole_optimization\">peephole\noptimizer</a> onto an\narbitrary domain. We could also postcompose with a parser instead, but that\nsounds more difficult. Here are the relevant parts:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">makePeephole</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n    <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">stripDomain</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">joinList</span><span class=\"p\">([</span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">bfs</span><span class=\"p\">])</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Peephole</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n        <span class=\"n\">import_from_mixin</span><span class=\"p\">(</span><span class=\"n\">BF</span><span class=\"p\">)</span>\n        <span class=\"k\">def</span> <span class=\"nf\">unit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"p\">[]</span>\n        <span class=\"k\">def</span> <span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span>\n        <span class=\"c1\"># Actual definition elided... for now...</span>\n    <span class=\"k\">return</span> <span class=\"n\">Peephole</span><span class=\"p\">,</span> <span class=\"n\">stripDomain</span>\n</pre></div>\n\n<p>Don't worry about the actual optimization yet. What's important here is the\npattern of initialization of semantic domains. <code>makePeephole</code> is an\n<a href=\"https://en.wikipedia.org/wiki/Standard_ML\">SML</a>-style functor on semantic\ndomains: given a final encoding of Brainfuck, it produces another final\nencoding of Brainfuck which incorporates optimizations. The helper\n<code>stripDomain</code> is a finalizer which performs the extraction from the\noptimizer's domain to the underlying <code>cls</code> that was passed in at translation\ntime. For example, let's optimize pretty-printing:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">AsStr</span><span class=\"p\">,</span> <span class=\"n\">finishStr</span> <span class=\"o\">=</span> <span class=\"n\">makePeephole</span><span class=\"p\">(</span><span class=\"n\">AsStr</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Now, it only takes one line to parse and print an optimized AST without ever\nbuilding it on the heap. To be pedantic, fragments of the output string will\nbe heap-allocated, but the AST's node structure will only ever be\nstack-allocated. Further, to be shallow, the parser is written to prevent\nmalicious input from causing a stack overflow, and this forces it to maintain\na heap-allocated RPython list of intermediate operations inside loops.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"nb\">print</span> <span class=\"n\">finishStr</span><span class=\"p\">(</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">AsStr</span><span class=\"p\">()))</span>\n</pre></div>\n\n<h3 id=\"performance\">Performance</h3>\n<p>But is it fast? Yes. It's faster than the prior version, which was\ninitial-encoded, and also faster than Andrew Brown's classic version (<a href=\"https://pypy.org/posts/2011/04/tutorial-writing-interpreter-with-pypy-3785910476193156295.html\">part\n1</a>,\n<a href=\"https://pypy.org/posts/2011/04/tutorial-part-2-adding-jit-8121732841568309472.html\">part\n2</a>).\nSince Brown's interpreter does not perform much optimization, we will focus on\nhow final encoding can outperform initial encoding.</p>\n<h4 id=\"jit\">JIT</h4>\n<p>First, why is it faster than the same interpreter with initial encoding? Well,\nit still has initial encoding from the JIT's perspective! There is an <code>Op</code>\nclass with a hierarchy of subclasses implementing individual behaviors. A\nsincere tagless-final student, or those who remember <a href=\"https://pyvideo.org/pycon-us-2012/stop-writing-classes.html\">Stop Writing Classes\n(2012, Pycon\nUS)</a>, will\nrecognize that the following classes could be plain functions, and should\nthink of the classes as a concession to RPython's lack of support for lambdas\nwith closures rather than an initial encoding. We aren't ever going to\ndirectly typecheck any <code>Op</code>, but the JIT will generate typechecking guards\nanyway, so we effectively get a fully-promoted AST inlined into each JIT\ntrace. First, some simple behaviors:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">Op</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span> <span class=\"n\">_immutable_</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">_Input</span><span class=\"p\">(</span><span class=\"n\">Op</span><span class=\"p\">):</span>\n    <span class=\"n\">_immutable_</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">def</span> <span class=\"nf\">runOn</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tape</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">):</span>\n        <span class=\"n\">tape</span><span class=\"p\">[</span><span class=\"n\">position</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">position</span>\n<span class=\"n\">Input</span> <span class=\"o\">=</span> <span class=\"n\">_Input</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">_Output</span><span class=\"p\">(</span><span class=\"n\">Op</span><span class=\"p\">):</span>\n    <span class=\"n\">_immutable_</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">def</span> <span class=\"nf\">runOn</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tape</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">):</span>\n        <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"n\">tape</span><span class=\"p\">[</span><span class=\"n\">position</span><span class=\"p\">]))</span>\n        <span class=\"k\">return</span> <span class=\"n\">position</span>\n<span class=\"n\">Output</span> <span class=\"o\">=</span> <span class=\"n\">_Output</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Add</span><span class=\"p\">(</span><span class=\"n\">Op</span><span class=\"p\">):</span>\n    <span class=\"n\">_immutable_</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">_immutable_fields_</span> <span class=\"o\">=</span> <span class=\"s2\">\"imm\"</span><span class=\"p\">,</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">imm</span><span class=\"p\">):</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">imm</span> <span class=\"o\">=</span> <span class=\"n\">imm</span>\n    <span class=\"k\">def</span> <span class=\"nf\">runOn</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tape</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">):</span>\n        <span class=\"n\">tape</span><span class=\"p\">[</span><span class=\"n\">position</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">imm</span>\n        <span class=\"k\">return</span> <span class=\"n\">position</span>\n</pre></div>\n\n<p>The JIT does technically have less information than before; it no longer knows\nthat a sequence of immutable operations is immutable enough to be worth\nunrolling, but a bit of <code>rlib.jit.unroll_safe</code> fixes that:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">Seq</span><span class=\"p\">(</span><span class=\"n\">Op</span><span class=\"p\">):</span>\n    <span class=\"n\">_immutable_</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">_immutable_fields_</span> <span class=\"o\">=</span> <span class=\"s2\">\"ops[*]\"</span><span class=\"p\">,</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">ops</span><span class=\"p\">):</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ops</span> <span class=\"o\">=</span> <span class=\"n\">ops</span>\n    <span class=\"nd\">@unroll_safe</span>\n    <span class=\"k\">def</span> <span class=\"nf\">runOn</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tape</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"p\">:</span> <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">runOn</span><span class=\"p\">(</span><span class=\"n\">tape</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">position</span>\n</pre></div>\n\n<p>Finally, the JIT entry point is at the head of each loop, just like with prior\ninterpreters. Since Brainfuck doesn't support mid-loop jumps, there's no\npenalty for only allowing merge points at the head of the loop.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">Loop</span><span class=\"p\">(</span><span class=\"n\">Op</span><span class=\"p\">):</span>\n    <span class=\"n\">_immutable_</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">_immutable_fields_</span> <span class=\"o\">=</span> <span class=\"s2\">\"op\"</span><span class=\"p\">,</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">):</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">op</span>\n    <span class=\"k\">def</span> <span class=\"nf\">runOn</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tape</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">):</span>\n        <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">op</span>\n        <span class=\"k\">while</span> <span class=\"n\">tape</span><span class=\"p\">[</span><span class=\"n\">position</span><span class=\"p\">]:</span>\n            <span class=\"n\">jitdriver</span><span class=\"o\">.</span><span class=\"n\">jit_merge_point</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">=</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">tape</span><span class=\"o\">=</span><span class=\"n\">tape</span><span class=\"p\">)</span>\n            <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">runOn</span><span class=\"p\">(</span><span class=\"n\">tape</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">position</span>\n</pre></div>\n\n<p>That's the end of the implicit challenge. There's no secret to it; just\nevaluate the AST. Here's part of the semantic domain for evaluation, as well\nas the \"functor\" to optimize it. In <code>AsOps.join()</code> are the <em>only</em>\n<code>isinstance()</code> calls in the entire interpreter! This is acceptable because\n<code>Seq</code> is effectively a type wrapper for an RPython list, so that a list of\noperations is also an operation; its list is initial-encoded and available for\ninspection.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">AsOps</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">import_from_mixin</span><span class=\"p\">(</span><span class=\"n\">BF</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">unit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"n\">Shift</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">Seq</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">Seq</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">Seq</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">ops</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">Seq</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"n\">Seq</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">ops</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">])</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">Seq</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"n\">Seq</span><span class=\"p\">([</span><span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">Seq</span><span class=\"p\">([</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">])</span>\n    <span class=\"c1\"># Other methods elided!</span>\n\n<span class=\"n\">AsOps</span><span class=\"p\">,</span> <span class=\"n\">finishOps</span> <span class=\"o\">=</span> <span class=\"n\">makePeephole</span><span class=\"p\">(</span><span class=\"n\">AsOps</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>And finally here is the actual top-level code to evaluate the input program.\nAs before, once everything is composed, the actual invocation only takes one\nline.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">tape</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\x00</span><span class=\"s2\">\"</span> <span class=\"o\">*</span> <span class=\"n\">cells</span><span class=\"p\">)</span>\n<span class=\"n\">finishOps</span><span class=\"p\">(</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">AsOps</span><span class=\"p\">()))</span><span class=\"o\">.</span><span class=\"n\">runOn</span><span class=\"p\">(</span><span class=\"n\">tape</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre></div>\n\n<h4 id=\"peephole-optimization\">Peephole Optimization</h4>\n<p>Our peephole optimizer is an <a href=\"https://en.wikipedia.org/wiki/Abstract_interpretation\">abstract\ninterpreter</a> with one\ninstruction of lookahead/rewrite buffer. It implements the aforementioned\nalgebraic laws of the Brainfuck monoid. It also implements idiom recognition\nfor loops. First, the abstract interpreter. The abstract domain has six\nelements:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">AbstractDomain</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n<span class=\"n\">meh</span><span class=\"p\">,</span> <span class=\"n\">aLoop</span><span class=\"p\">,</span> <span class=\"n\">aZero</span><span class=\"p\">,</span> <span class=\"n\">theIdentity</span><span class=\"p\">,</span> <span class=\"n\">anAdd</span><span class=\"p\">,</span> <span class=\"n\">aRight</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">AbstractDomain</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)]</span>\n</pre></div>\n\n<p>We'll also tag everything with an integer, so that <code>anAdd</code> or <code>aRight</code> can be\nexact annotations. <em>This</em> is the actual <code>Peephole.join()</code> method:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">l</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"n\">r</span>\n    <span class=\"n\">rv</span> <span class=\"o\">=</span> <span class=\"n\">l</span><span class=\"p\">[:]</span>\n    <span class=\"n\">bfHead</span><span class=\"p\">,</span> <span class=\"n\">adHead</span><span class=\"p\">,</span> <span class=\"n\">immHead</span> <span class=\"o\">=</span> <span class=\"n\">rv</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">bf</span><span class=\"p\">,</span> <span class=\"n\">ad</span><span class=\"p\">,</span> <span class=\"n\">imm</span> <span class=\"ow\">in</span> <span class=\"n\">r</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">ad</span> <span class=\"ow\">is</span> <span class=\"n\">theIdentity</span><span class=\"p\">:</span> <span class=\"k\">continue</span>\n        <span class=\"k\">elif</span> <span class=\"n\">adHead</span> <span class=\"ow\">is</span> <span class=\"n\">aLoop</span> <span class=\"ow\">and</span> <span class=\"n\">ad</span> <span class=\"ow\">is</span> <span class=\"n\">aLoop</span><span class=\"p\">:</span> <span class=\"k\">continue</span>\n        <span class=\"k\">elif</span> <span class=\"n\">adHead</span> <span class=\"ow\">is</span> <span class=\"n\">theIdentity</span><span class=\"p\">:</span>\n            <span class=\"n\">bfHead</span><span class=\"p\">,</span> <span class=\"n\">adHead</span><span class=\"p\">,</span> <span class=\"n\">immHead</span> <span class=\"o\">=</span> <span class=\"n\">bf</span><span class=\"p\">,</span> <span class=\"n\">ad</span><span class=\"p\">,</span> <span class=\"n\">imm</span>\n        <span class=\"k\">elif</span> <span class=\"n\">adHead</span> <span class=\"ow\">is</span> <span class=\"n\">anAdd</span> <span class=\"ow\">and</span> <span class=\"n\">ad</span> <span class=\"ow\">is</span> <span class=\"n\">aZero</span><span class=\"p\">:</span>\n            <span class=\"n\">bfHead</span><span class=\"p\">,</span> <span class=\"n\">adHead</span><span class=\"p\">,</span> <span class=\"n\">immHead</span> <span class=\"o\">=</span> <span class=\"n\">bf</span><span class=\"p\">,</span> <span class=\"n\">ad</span><span class=\"p\">,</span> <span class=\"n\">imm</span>\n        <span class=\"k\">elif</span> <span class=\"n\">adHead</span> <span class=\"ow\">is</span> <span class=\"n\">anAdd</span> <span class=\"ow\">and</span> <span class=\"n\">ad</span> <span class=\"ow\">is</span> <span class=\"n\">anAdd</span><span class=\"p\">:</span>\n            <span class=\"n\">immHead</span> <span class=\"o\">+=</span> <span class=\"n\">imm</span>\n            <span class=\"k\">if</span> <span class=\"n\">immHead</span><span class=\"p\">:</span> <span class=\"n\">bfHead</span> <span class=\"o\">=</span> <span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">plus</span><span class=\"p\">(</span><span class=\"n\">immHead</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">rv</span><span class=\"p\">:</span> <span class=\"n\">bfHead</span><span class=\"p\">,</span> <span class=\"n\">adHead</span><span class=\"p\">,</span> <span class=\"n\">immHead</span> <span class=\"o\">=</span> <span class=\"n\">rv</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">bfHead</span> <span class=\"o\">=</span> <span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"p\">()</span>\n                <span class=\"n\">adHead</span> <span class=\"o\">=</span> <span class=\"n\">theIdentity</span>\n        <span class=\"k\">elif</span> <span class=\"n\">adHead</span> <span class=\"ow\">is</span> <span class=\"n\">aRight</span> <span class=\"ow\">and</span> <span class=\"n\">ad</span> <span class=\"ow\">is</span> <span class=\"n\">aRight</span><span class=\"p\">:</span>\n            <span class=\"n\">immHead</span> <span class=\"o\">+=</span> <span class=\"n\">imm</span>\n            <span class=\"k\">if</span> <span class=\"n\">immHead</span><span class=\"p\">:</span> <span class=\"n\">bfHead</span> <span class=\"o\">=</span> <span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">(</span><span class=\"n\">immHead</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">rv</span><span class=\"p\">:</span> <span class=\"n\">bfHead</span><span class=\"p\">,</span> <span class=\"n\">adHead</span><span class=\"p\">,</span> <span class=\"n\">immHead</span> <span class=\"o\">=</span> <span class=\"n\">rv</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">bfHead</span> <span class=\"o\">=</span> <span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"p\">()</span>\n                <span class=\"n\">adHead</span> <span class=\"o\">=</span> <span class=\"n\">theIdentity</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">rv</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">bfHead</span><span class=\"p\">,</span> <span class=\"n\">adHead</span><span class=\"p\">,</span> <span class=\"n\">immHead</span><span class=\"p\">))</span>\n            <span class=\"n\">bfHead</span><span class=\"p\">,</span> <span class=\"n\">adHead</span><span class=\"p\">,</span> <span class=\"n\">immHead</span> <span class=\"o\">=</span> <span class=\"n\">bf</span><span class=\"p\">,</span> <span class=\"n\">ad</span><span class=\"p\">,</span> <span class=\"n\">imm</span>\n    <span class=\"n\">rv</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">bfHead</span><span class=\"p\">,</span> <span class=\"n\">adHead</span><span class=\"p\">,</span> <span class=\"n\">immHead</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">rv</span>\n</pre></div>\n\n<p>If this were to get much longer, then <a href=\"https://pypy.org/posts/2024/10/jit-peephole-dsl.html\">implementing a\nDSL</a> would be worth it,\nbut this is a short-enough method to inline. The abstract interpretation is\nassumed by induction for the left-hand side of the join, save for the final\ninstruction, which is loaded into a rewrite register. Each instruction on the\nright-hand side is inspected exactly once. The logic for <code>anAdd</code> followed by\n<code>anAdd</code> is exactly the same as for <code>aRight</code> followed by <code>aRight</code> because they\nboth have underlying <a href=\"https://en.wikipedia.org/wiki/Abelian_group\">Abelian\ngroups</a> given by the integers.\nThe rewrite register is carefully pushed onto and popped off from the\nleft-hand side in order to cancel out <code>theIdentity</code>, which itself is merely a\nunifier for <code>anAdd</code> or <code>aRight</code> of 0.</p>\n<p>Note that we generate a lot of garbage. For example, parsing a string of <em>n</em>\n'+' characters will cause the peephole optimizer to allocate <em>n</em> instances of\nthe underlying <code>domain.plus()</code> action, from <code>domain.plus(1)</code> up to\n<code>domain.plus(n)</code>. An older initial-encoded version of this interpreter used\n<a href=\"https://en.wikipedia.org/wiki/Hash_consing\">hash consing</a> to avoid ever\nbuilding an op more than once, even loops. It appears more efficient to\ngenerate lots of immutable garbage than to repeatedly hash inputs and search\nmutable hash tables, at least for optimizing Brainfuck incrementally during\nparsing.</p>\n<p>Finally, let's look at idiom recognition. RPython lists are initial-coded, so\nwe can dispatch based on the length of the list, and then inspect the abstract\ndomains of each action.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">isConstAdd</span><span class=\"p\">(</span><span class=\"n\">bf</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">):</span> <span class=\"k\">return</span> <span class=\"n\">bf</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">anAdd</span> <span class=\"ow\">and</span> <span class=\"n\">bf</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">i</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">oppositeShifts</span><span class=\"p\">(</span><span class=\"n\">bf1</span><span class=\"p\">,</span> <span class=\"n\">bf2</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">bf1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">bf2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">aRight</span> <span class=\"ow\">and</span> <span class=\"n\">bf1</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"n\">bf2</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">oppositeShifts2</span><span class=\"p\">(</span><span class=\"n\">bf1</span><span class=\"p\">,</span> <span class=\"n\">bf2</span><span class=\"p\">,</span> <span class=\"n\">bf3</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">bf1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">bf2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">bf3</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">aRight</span> <span class=\"ow\">and</span>\n            <span class=\"n\">bf1</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">bf2</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">bf3</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">loop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">bfs</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"n\">bf</span><span class=\"p\">,</span> <span class=\"n\">ad</span><span class=\"p\">,</span> <span class=\"n\">imm</span> <span class=\"o\">=</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">ad</span> <span class=\"ow\">is</span> <span class=\"n\">anAdd</span> <span class=\"ow\">and</span> <span class=\"n\">imm</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"p\">[(</span><span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">zero</span><span class=\"p\">(),</span> <span class=\"n\">aZero</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isConstAdd</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">and</span>\n            <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">anAdd</span> <span class=\"ow\">and</span>\n            <span class=\"n\">oppositeShifts</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])):</span>\n            <span class=\"k\">return</span> <span class=\"p\">[(</span><span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">scalemove</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]),</span> <span class=\"n\">aLoop</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isConstAdd</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">and</span>\n            <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">anAdd</span> <span class=\"ow\">and</span>\n            <span class=\"n\">oppositeShifts</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])):</span>\n            <span class=\"k\">return</span> <span class=\"p\">[(</span><span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">scalemove</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]),</span> <span class=\"n\">aLoop</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">6</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isConstAdd</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">and</span>\n            <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">anAdd</span> <span class=\"ow\">and</span>\n            <span class=\"n\">oppositeShifts2</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">])):</span>\n            <span class=\"k\">return</span> <span class=\"p\">[(</span><span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">scalemove2</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">],</span>\n                                       <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">],</span>\n                                       <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]),</span> <span class=\"n\">aLoop</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isConstAdd</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">and</span>\n            <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">anAdd</span> <span class=\"ow\">and</span>\n            <span class=\"n\">oppositeShifts2</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">])):</span>\n            <span class=\"k\">return</span> <span class=\"p\">[(</span><span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">scalemove2</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">],</span>\n                                       <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">],</span>\n                                       <span class=\"n\">bfs</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]),</span> <span class=\"n\">aLoop</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span>\n    <span class=\"k\">return</span> <span class=\"p\">[(</span><span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"n\">stripDomain</span><span class=\"p\">(</span><span class=\"n\">bfs</span><span class=\"p\">)),</span> <span class=\"n\">aLoop</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span>\n</pre></div>\n\n<p>This ends the bonus question. How do we optimize an unknown semantic domain?\nWe must maintain an abstract context which describes elements of the domain.\nIn initial encoding, we ask an AST about itself. In final encoding, we already\nknow everything relevant about the AST.</p>\n<p>The careful reader will see that I didn't really answer that opening question\nin the JIT section. Because the JIT still ranges over the same operations as\nbefore, it can't really be slower; but why is it now faster? Because the\noptimizer is now slightly better in a few edge cases. It performs the same\noptimizations as before, but the rigor of abstract interpretation causes it to\nemit slightly better operations to the JIT backend.</p>\n<p>Concretely, improving the optimizer can shorten pretty-printed programs. The\n<a href=\"https://bbgauge.info/\">Busy Beaver Gauge</a> measures the length of programs\nwhich search for solutions to mathematical problems. After implementing and\ndebugging the final-encoded interpreter, I found that two of my entries on the\n<a href=\"https://bbgauge.info/brainfuck.html\">Busy Beaver Gauge for Brainfuck</a> had\nbecome shorter by about 2%. (Most other entries are already hand-optimized\naccording to the standard algebra and have no optimization opportunities.)</p>\n<h3 id=\"discussion\">Discussion</h3>\n<p>Given that initial and final encodings are equivalent, and noting that\nRPython's toolchain is written to prefer initial encodings, what did we\nactually gain? Did we gain anything?</p>\n<p>One obvious downside to final encoding in RPython is interpreter size. The\nexample interpreter shown here is a rewrite of an initial-encoded interpreter\nwhich can be seen\n<a href=\"https://github.com/rpypkgs/rpypkgs/blob/659c8a26d428a1e04fdff614b28e464a50d4647b/bf/bf.py\">here</a>\nfor comparison. Final encoding adds about 20% more code in this case.</p>\n<p>Final encoding is not necessarily more code than initial encoding, though. All\nAST encodings in interpreters are subject to the <a href=\"https://en.wikipedia.org/wiki/Expression_problem\">Expression\nProblem</a>, which states that\nthere is generally a quadratic amount of code required to implement multiple\nbehaviors for an AST with multiple types of nodes; specifically, <em>n</em> behaviors\nfor <em>m</em> types of nodes require <em>n</em> × <em>m</em> methods. Initial encodings improve the\ncost of adding new types of nodes; final encodings improve the cost of adding\nnew behaviors. Final encoding may tend to win in large codebases for mature\nlanguages, where the language does not change often but new behaviors are added\nfrequently and maintained for long periods.</p>\n<p>Optimizations in final encoding require a bit of planning. The\nabstract-interpretation approach is solid but relies upon the monoid and its\nalgebraic laws. In the worst case, an entire class hierarchy could be required\nto encode the abstraction.</p>\n<p>It is remarkable to find <strong>a 2% improvement in residual program size</strong> merely\nby reimplementing an optimizer as an abstract interpreter respecting the\nalgebraic laws. This could be the most important lesson for compiler\nengineers, if it happens to generalize.</p>\n<p>Final encoding was popularized via the tagless-final movement in OCaml and\nScala, including famously in a series of tutorials by <a href=\"https://okmij.org/ftp/tagless-final/\">Kiselyov et\nal</a>. A \"tag\", in this jargon, is a\nruntime identifier for an object's type or class; a tagless encoding\neffectively doesn't allow <code>isinstance()</code> at all. In the above presentation,\ntags could be hacked in, but were not materially relevant to most steps. Tags\nwere required for the final evaluation step, though, and the tagless-final\ninsight is that certain type systems can express type-safe evaluation without\nthose tags. We won't go further in this direction because tags also\ncommunicate valuable information to the JIT.</p>\n<h4 id=\"summarizing-table\">Summarizing Table</h4>\n<table>\n<thead>\n<tr>\n<th>Initial Encoding</th>\n<th>Final Encoding</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hierarchy of classes</td>\n<td>signature of interfaces</td>\n</tr>\n<tr>\n<td>class constructors</td>\n<td>method calls</td>\n</tr>\n<tr>\n<td>built on the heap</td>\n<td>built on the stack</td>\n</tr>\n<tr>\n<td>traversals allocate stack</td>\n<td>traversals allocate heap</td>\n</tr>\n<tr>\n<td>tags are available with <code>isinstance()</code></td>\n<td>tags are only available through hacks</td>\n</tr>\n<tr>\n<td>cost of adding a new AST node: one class</td>\n<td>cost of adding a new AST node: one method on every other class</td>\n</tr>\n<tr>\n<td>cost of adding a new behavior: one method on every other class</td>\n<td>cost of adding a new behavior: one class</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to folks in <code>#pypy</code> on Libera Chat: arigato for the idea, larstiq for\npushing me to write it up, and cfbolz and mattip for reviewing and finding\nmistakes. The original IRC discussion leading to this blog post is available\n<a href=\"https://gist.github.com/MostAwesomeDude/fd86ad2d2e38af7aa67b6e548aabe008\">here</a>.</p>\n<p>This interpreter is part of the <a href=\"https://github.com/rpypkgs/rpypkgs\">rpypkgs</a>\nsuite, a Nix flake for RPython interpreters. Readers with Nix installed can\nrun this interpreter directly from the flake:</p>\n<div class=\"code\"><pre class=\"code literal-block\">$<span class=\"w\"> </span>nix-prefetch-url<span class=\"w\"> </span>https://github.com/MG-K/pypy-tutorial-ko/raw/refs/heads/master/mandel.b\n$<span class=\"w\"> </span>nix<span class=\"w\"> </span>run<span class=\"w\"> </span>github:rpypkgs/rpypkgs#bf<span class=\"w\"> </span>--<span class=\"w\"> </span>/nix/store/ngnphbap9ncvz41d0fkvdh61n7j2bg21-mandel.b\n</pre></div>",
      "id": "https://www.pypy.org/posts/2024/11/guest-post-final-encoding-in-rpython.html",
      "link": "https://www.pypy.org/posts/2024/11/guest-post-final-encoding-in-rpython.html",
      "links": [],
      "published": "2024-11-14T08:42:36+00:00",
      "tags": [
        {
          "label": null,
          "scheme": null,
          "term": "guestpost"
        }
      ],
      "title": "Guest Post: Final Encoding in RPython Interpreters"
    },
    {
      "author": "CF Bolz-Tereick",
      "content": [
        {
          "base": null,
          "language": null,
          "type": "text/html",
          "value": "<p>As is probably apparent from the sequence of blog posts about the topic in the\nlast year, I have been thinking about and working on integer optimizations in the JIT\ncompiler a lot. This work was mainly motivated by <a class=\"reference external\" href=\"https://docs.pydrofoil.org/en/latest/\">Pydrofoil</a>, where integer\noperations matter a lot more than for your typical Python program.</p>\n<p>In this post I'll describe my most recent change, which is a new small domain\nspecific language that I implemented to specify peephole optimizations on\ninteger operations in the JIT.\nIt uses pattern matching to specify how (sequences of) integer operations\nshould be simplified and optimized. The rules are then compiled to\nRPython code that then becomes part of the JIT's optimization passes.</p>\n<p>To make it less likely to introduce incorrect optimizations into the JIT, the\nrules are automatically proven correct with Z3 as part of the build process (for\na more hands-on intro to how that works you can look at the <a class=\"reference external\" href=\"https://pypy.org/posts/2024/08/toy-knownbits.html#proving-correctness-of-the-transfer-functions-with-z3\">knownbits</a> post).\nIn this blog post I want to motivate why I introduced the DSL and give an\nintroduction to how it works.</p>\n<section id=\"motivation\">\n<h2>Motivation</h2>\n<p>This summer, after I wrote my <a class=\"reference external\" href=\"https://www.pypy.org/posts/2024/07/mining-jit-traces-missing-optimizations-z3.html\">scripts to mine JIT traces for missed optimization</a>\nopportunities, I started implementing a few of the integer peephole rewrite that\nthe script identified. Unfortunately, doing so led to the problem that the way\nwe express these rewrites up to now is very imperative and verbose. Here's a\nsnippet of RPython code that shows some rewrites for integer multiplication\n(look at the comments to see what the different parts actually do). You don't\nneed to understand the code in detail, but basically it's in very imperative\nstyle and there's quite a lot of boilerplate.</p>\n<div class=\"code\"><pre class=\"code python\"><a id=\"rest_code_7d5885c533384778ba70ebd63601716c-1\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-1\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-1\"></a><span class=\"k\">def</span> <span class=\"nf\">optimize_INT_MUL</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">):</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-2\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-2\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-2\"></a>    <span class=\"n\">arg0</span> <span class=\"o\">=</span> <span class=\"n\">get_box_replacement</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-3\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-3\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-3\"></a>    <span class=\"n\">b0</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">getintbound</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">)</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-4\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-4\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-4\"></a>    <span class=\"n\">arg1</span> <span class=\"o\">=</span> <span class=\"n\">get_box_replacement</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-5\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-5\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-5\"></a>    <span class=\"n\">b1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">getintbound</span><span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"p\">)</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-6\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-6\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-6\"></a>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-7\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-7\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-7\"></a>    <span class=\"k\">if</span> <span class=\"n\">b0</span><span class=\"o\">.</span><span class=\"n\">known_eq_const</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-8\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-8\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-8\"></a>        <span class=\"c1\"># 1 * x == x</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-9\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-9\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-9\"></a>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">make_equal_to</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">)</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-10\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-10\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-10\"></a>    <span class=\"k\">elif</span> <span class=\"n\">b1</span><span class=\"o\">.</span><span class=\"n\">known_eq_const</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-11\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-11\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-11\"></a>        <span class=\"c1\"># x * 1 == x</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-12\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-12\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-12\"></a>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">make_equal_to</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">arg0</span><span class=\"p\">)</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-13\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-13\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-13\"></a>    <span class=\"k\">elif</span> <span class=\"n\">b0</span><span class=\"o\">.</span><span class=\"n\">known_eq_const</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">b1</span><span class=\"o\">.</span><span class=\"n\">known_eq_const</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-14\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-14\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-14\"></a>        <span class=\"c1\"># 0 * x == x * 0 == 0</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-15\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-15\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-15\"></a>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">make_constant_int</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-16\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-16\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-16\"></a>    <span class=\"k\">else</span><span class=\"p\">:</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-17\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-17\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-17\"></a>        <span class=\"k\">for</span> <span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"n\">rhs</span> <span class=\"ow\">in</span> <span class=\"p\">[(</span><span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg0</span><span class=\"p\">)]:</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-18\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-18\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-18\"></a>            <span class=\"n\">lh_info</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">getintbound</span><span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"p\">)</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-19\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-19\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-19\"></a>            <span class=\"k\">if</span> <span class=\"n\">lh_info</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">():</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-20\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-20\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-20\"></a>                <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">lh_info</span><span class=\"o\">.</span><span class=\"n\">get_constant_int</span><span class=\"p\">()</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-21\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-21\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-21\"></a>                <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-22\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-22\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-22\"></a>                    <span class=\"c1\"># x * (2 ** c) == x &lt;&lt; c</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-23\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-23\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-23\"></a>                    <span class=\"n\">new_rhs</span> <span class=\"o\">=</span> <span class=\"n\">ConstInt</span><span class=\"p\">(</span><span class=\"n\">highest_bit</span><span class=\"p\">(</span><span class=\"n\">lh_info</span><span class=\"o\">.</span><span class=\"n\">get_constant_int</span><span class=\"p\">()))</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-24\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-24\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-24\"></a>                    <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">replace_op_with</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">rop</span><span class=\"o\">.</span><span class=\"n\">INT_LSHIFT</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"n\">new_rhs</span><span class=\"p\">])</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-25\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-25\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-25\"></a>                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">optimizer</span><span class=\"o\">.</span><span class=\"n\">send_extra_operation</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">)</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-26\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-26\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-26\"></a>                    <span class=\"k\">return</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-27\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-27\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-27\"></a>                <span class=\"k\">elif</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-28\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-28\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-28\"></a>                    <span class=\"c1\"># x * -1 == -x</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-29\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-29\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-29\"></a>                    <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">replace_op_with</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">rop</span><span class=\"o\">.</span><span class=\"n\">INT_NEG</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">rhs</span><span class=\"p\">])</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-30\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-30\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-30\"></a>                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">optimizer</span><span class=\"o\">.</span><span class=\"n\">send_extra_operation</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">)</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-31\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-31\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-31\"></a>                    <span class=\"k\">return</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-32\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-32\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-32\"></a>            <span class=\"k\">else</span><span class=\"p\">:</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-33\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-33\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-33\"></a>                <span class=\"c1\"># x * (1 &lt;&lt; y) == x &lt;&lt; y</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-34\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-34\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-34\"></a>                <span class=\"n\">shiftop</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">optimizer</span><span class=\"o\">.</span><span class=\"n\">as_operation</span><span class=\"p\">(</span><span class=\"n\">get_box_replacement</span><span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"p\">),</span> <span class=\"n\">rop</span><span class=\"o\">.</span><span class=\"n\">INT_LSHIFT</span><span class=\"p\">)</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-35\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-35\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-35\"></a>                <span class=\"k\">if</span> <span class=\"n\">shiftop</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-36\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-36\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-36\"></a>                    <span class=\"k\">continue</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-37\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-37\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-37\"></a>                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">shiftop</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()</span> <span class=\"ow\">or</span> <span class=\"n\">shiftop</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">getint</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-38\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-38\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-38\"></a>                    <span class=\"k\">continue</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-39\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-39\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-39\"></a>                <span class=\"n\">shiftvar</span> <span class=\"o\">=</span> <span class=\"n\">get_box_replacement</span><span class=\"p\">(</span><span class=\"n\">shiftop</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-40\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-40\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-40\"></a>                <span class=\"n\">shiftbound</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">getintbound</span><span class=\"p\">(</span><span class=\"n\">shiftvar</span><span class=\"p\">)</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-41\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-41\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-41\"></a>                <span class=\"k\">if</span> <span class=\"n\">shiftbound</span><span class=\"o\">.</span><span class=\"n\">known_nonnegative</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"n\">shiftbound</span><span class=\"o\">.</span><span class=\"n\">known_lt_const</span><span class=\"p\">(</span><span class=\"n\">LONG_BIT</span><span class=\"p\">):</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-42\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-42\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-42\"></a>                    <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">replace_op_with</span><span class=\"p\">(</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-43\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-43\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-43\"></a>                            <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">rop</span><span class=\"o\">.</span><span class=\"n\">INT_LSHIFT</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"n\">shiftvar</span><span class=\"p\">])</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-44\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-44\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-44\"></a>                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">optimizer</span><span class=\"o\">.</span><span class=\"n\">send_extra_operation</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">)</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-45\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-45\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-45\"></a>                    <span class=\"k\">return</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-46\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-46\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-46\"></a>        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">)</span>\n</pre></div>\n<p>Adding more rules to these functions is very tedious and gets super confusing\nwhen the functions get bigger. In addition I am always worried about making\nmistakes when writing this kind of code, and there is no feedback at all about\nwhich of these rules are actually applied a lot in real programs.</p>\n<p>Therefore I decided to write a small domain specific language with the goal of\nexpressing these rules in a more declarative way. In the rest of the post I'll\ndescribe the DSL (most of that description is adapted from the <a class=\"reference external\" href=\"https://rpython.readthedocs.io/en/latest/jit/ruleopt.html\">documentation</a>\nabout it that I wrote).</p>\n</section>\n<section id=\"the-peephole-rule-dsl\">\n<h2>The Peephole Rule DSL</h2>\n<section id=\"simple-transformation-rules\">\n<h3>Simple transformation rules</h3>\n<p>The rules in the DSL specify how integer operation can be transformed into\ncheaper other integer operations. A rule always consists of a name, a pattern,\nand a target. Here's a simple rule:</p>\n<pre class=\"literal-block\">add_zero: int_add(x, 0)\n    =&gt; x</pre>\n<p>The name of the rule is <code class=\"docutils literal\">add_zero</code>. It matches operations in the trace of the\nform <code class=\"docutils literal\">int_add(x, 0)</code>, where <code class=\"docutils literal\">x</code> will match anything and <code class=\"docutils literal\">0</code> will match only the\nconstant zero. After the <code class=\"docutils literal\">=&gt;</code> arrow is the target of the rewrite, i.e. what the\noperation is rewritten to, in this case <code class=\"docutils literal\">x</code>.</p>\n<p>The rule language has a list of which of the operations are commutative, so <code class=\"docutils literal\">add_zero</code>\nwill also optimize <code class=\"docutils literal\">int_add(0, x)</code> to <code class=\"docutils literal\">x</code>.</p>\n<p>Variables in the pattern can repeat:</p>\n<pre class=\"literal-block\">sub_x_x: int_sub(x, x)\n    =&gt; 0</pre>\n<p>This rule matches against <code class=\"docutils literal\">int_sub</code> operations where the two arguments are the\nsame (either the same box, or the same constant).</p>\n<p>Here's a rule with a more complicated pattern:</p>\n<pre class=\"literal-block\">sub_add: int_sub(int_add(x, y), y)\n    =&gt; x</pre>\n<p>This pattern matches <code class=\"docutils literal\">int_sub</code> operations, where the first argument was\nproduced by an <code class=\"docutils literal\">int_add</code> operation. In addition, one of the arguments of the\naddition has to be the same as the second argument of the subtraction.</p>\n<p>The constants <code class=\"docutils literal\">MININT</code>, <code class=\"docutils literal\">MAXINT</code> and <code class=\"docutils literal\">LONG_BIT</code> (which is either 32 or 64,\ndepending on which platform the JIT is built for) can be used in rules, they\nbehave like writing numbers but allow bit-width-independent formulations:</p>\n<pre class=\"literal-block\">is_true_and_minint: int_is_true(int_and(x, MININT))\n    =&gt; int_lt(x, 0)</pre>\n<p>It is also possible to have a pattern where some arguments needs to be a\nconstant, without specifying which constant. Those patterns look like this:</p>\n<pre class=\"literal-block\">sub_add_consts: int_sub(int_add(x, C1), C2) # incomplete\n    # more goes here\n    =&gt; int_sub(x, C)</pre>\n<p>Variables in the pattern that start with a <code class=\"docutils literal\">C</code> match against constants only.\nHowever, in this current form the rule is incomplete, because the variable <code class=\"docutils literal\">C</code>\nthat is being used in the target operation is not defined anywhere. We will see\nhow to compute it in the next section.</p>\n</section>\n<section id=\"computing-constants-and-other-intermediate-results\">\n<h3>Computing constants and other intermediate results</h3>\n<p>Sometimes it is necessary to compute intermediate results that are used in the\ntarget operation. To do that, there can be extra assignments between the rule head\nand the rule target.:</p>\n<pre class=\"literal-block\">sub_add_consts: int_sub(int_add(x, C1), C2) # incomplete\n    C = C1 + C2\n    =&gt; int_sub(x, C)</pre>\n<p>The right hand side of such an assignment is a subset of Python syntax,\nsupporting arithmetic using <code class=\"docutils literal\">+</code>, <code class=\"docutils literal\">-</code>, <code class=\"docutils literal\">*</code>, and certain helper functions.\nHowever, the syntax allows you to be explicit about unsignedness for some\noperations. E.g. <code class=\"docutils literal\">&gt;&gt;u</code> exists for unsigned right shifts (and I plan to add\n<code class=\"docutils literal\">&gt;u</code>, <code class=\"docutils literal\">&gt;=u</code>, <code class=\"docutils literal\">&lt;u</code>, <code class=\"docutils literal\">&lt;=u</code> for comparisons).</p>\n<p>Here's an example of a rule that uses <code class=\"docutils literal\">&gt;&gt;u</code>:</p>\n<pre class=\"literal-block\">urshift_lshift_x_c_c: uint_rshift(int_lshift(x, C), C)\n    mask = (-1 &lt;&lt; C) &gt;&gt;u C\n    =&gt; int_and(x, mask)</pre>\n</section>\n<section id=\"checks\">\n<h3>Checks</h3>\n<p>Some rewrites are only true under certain conditions. For example,\n<code class=\"docutils literal\">int_eq(x, 1)</code> can be rewritten to <code class=\"docutils literal\">x</code>, if <code class=\"docutils literal\">x</code> is known to store a boolean value. This can\nbe expressed with <em>checks</em>:</p>\n<pre class=\"literal-block\">eq_one: int_eq(x, 1)\n    check x.is_bool()\n    =&gt; x</pre>\n<p>A check is followed by a boolean expression. The variables from the pattern can\nbe used as <code class=\"docutils literal\">IntBound</code> instances in checks (and also in assignments) to find out\nwhat the abstract interpretation of the JIT knows about the value of a trace variable\n(<code class=\"docutils literal\">IntBound</code> is the name of the abstract domain that the JIT uses for integers,\ndespite the fact that it also stores <a class=\"reference external\" href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html\">knownbits</a> information nowadays).</p>\n<p>Here's another example:</p>\n<pre class=\"literal-block\">mul_lshift: int_mul(x, int_lshift(1, y))\n    check y.known_ge_const(0) and y.known_le_const(LONG_BIT)\n    =&gt; int_lshift(x, y)</pre>\n<p>It expresses that <code class=\"docutils literal\">x * (1 &lt;&lt; y)</code> can be rewritten to <code class=\"docutils literal\">x &lt;&lt; y</code> but checks that\n<code class=\"docutils literal\">y</code> is known to be between <code class=\"docutils literal\">0</code> and <code class=\"docutils literal\">LONG_BIT</code>.</p>\n<p>Checks and assignments can be repeated and combined with each other:</p>\n<pre class=\"literal-block\">mul_pow2_const: int_mul(x, C)\n    check C &gt; 0 and C &amp; (C - 1) == 0\n    shift = highest_bit(C)\n    =&gt; int_lshift(x, shift)</pre>\n<p>In addition to calling methods on <code class=\"docutils literal\">IntBound</code> instances, it's also possible to\naccess their attributes, like in this rule:</p>\n<pre class=\"literal-block\">and_x_c_in_range: int_and(x, C)\n    check x.lower &gt;= 0 and x.upper &lt;= C &amp; ~(C + 1)\n    =&gt; x</pre>\n</section>\n<section id=\"rule-ordering-and-liveness\">\n<h3>Rule Ordering and Liveness</h3>\n<p>The generated optimizer code will give preference to applying rules that\nproduce a constant or a variable as a rewrite result. Only if none of those\nmatch do rules that produce new result operations get applied. For example, the\nrules <code class=\"docutils literal\">sub_x_x</code> and <code class=\"docutils literal\">sub_add</code> are tried before trying <code class=\"docutils literal\">sub_add_consts</code>,\nbecause the former two rules optimize to a constant and a variable\nrespectively, while the latter produces a new operation as the result.</p>\n<p>The rule <code class=\"docutils literal\">sub_add_consts</code> has a possible problem, which is that if the\nintermediate result of the <code class=\"docutils literal\">int_add</code> operation in the rule head is used by\nsome other operations, then the <code class=\"docutils literal\">sub_add_consts</code> rule does not actually\nreduce the number of operations (and might actually make things slightly worse\ndue to increased register pressure). However, currently it would be extremely\nhard to take that kind of information into account in the optimization pass of\nthe JIT, so we optimistically apply the rules anyway.</p>\n</section>\n<section id=\"checking-rule-coverage\">\n<h3>Checking rule coverage</h3>\n<p>Every rewrite rule should have at least one unit test where it triggers. To\nensure this, the <a class=\"reference external\" href=\"https://github.com/pypy/pypy/blob/d92d0bfd38318ede1cbaadadafd77da69d431fad/rpython/jit/metainterp/optimizeopt/test/test_optimizeintbound.py\">unit test file that mainly checks integer optimizations</a> in the\nJIT has an assert at the end of a test run, that every rule fired at least once.</p>\n</section>\n<section id=\"printing-rule-statistics\">\n<h3>Printing rule statistics</h3>\n<p>The JIT can print statistics about which rule fired how often in the\n<code class=\"docutils literal\"><span class=\"pre\">jit-intbounds-stats</span></code> logging category, using the <a class=\"reference external\" href=\"https://rpython.readthedocs.io/en/latest/logging.html\">PYPYLOG</a> mechanism. For\nexample, to print the category to stdout at the end of program execution, run\nPyPy like this:</p>\n<pre class=\"literal-block\">PYPYLOG=jit-intbounds-stats:- pypy ...</pre>\n<p>The output of that will look something like this:</p>\n<pre class=\"literal-block\">int_add\n    add_reassoc_consts 2514\n    add_zero 107008\nint_sub\n    sub_zero 31519\n    sub_from_zero 523\n    sub_x_x 3153\n    sub_add_consts 159\n    sub_add 55\n    sub_sub_x_c_c 1752\n    sub_sub_c_x_c 0\n    sub_xor_x_y_y 0\n    sub_or_x_y_y 0\nint_mul\n    mul_zero 0\n    mul_one 110\n    mul_minus_one 0\n    mul_pow2_const 1456\n    mul_lshift 0\n...</pre>\n</section>\n<section id=\"termination-and-confluence\">\n<h3>Termination and Confluence</h3>\n<p>Right now there are unfortunately no checks that the rules actually rewrite\noperations towards \"simpler\" forms. There is no cost model, and also nothing\nthat prevents you from writing a rule like this:</p>\n<pre class=\"literal-block\">neg_complication: int_neg(x) # leads to infinite rewrites\n    =&gt; int_mul(-1, x)</pre>\n<p>Doing this would lead to endless rewrites if there is also another rule that\nturns multiplication with -1 into negation.</p>\n<p>There is also no checking for <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Confluence_(abstract_rewriting)\">confluence</a> (yet?), i.e. the property that all\nrewrites starting from the same input trace always lead to the same output\ntrace, no matter in which order the rules are applied.</p>\n</section>\n<section id=\"proofs\">\n<h3>Proofs</h3>\n<p>It is very easy to write a peephole rule that is not correct in all corner\ncases. Therefore all the rules are proven correct with Z3 before compiled into\nactual JIT code, by default. When the proof fails, a (hopefully minimal)\ncounterexample is printed. The counterexample consists of values for all the\ninputs that fulfil the checks, values for the intermediate expressions, and\nthen two <em>different</em> values for the source and the target operations.</p>\n<p>E.g. if we try to add the incorrect rule:</p>\n<pre class=\"literal-block\">mul_is_add: int_mul(a, b)\n    =&gt; int_add(a, b)</pre>\n<p>We get the following counterexample as output:</p>\n<pre class=\"literal-block\">Could not prove correctness of rule 'mul_is_add'\nin line 1\ncounterexample given by Z3:\ncounterexample values:\na: 0\nb: 1\noperation int_mul(a, b) with Z3 formula a*b\nhas counterexample result vale: 0\nBUT\ntarget expression: int_add(a, b) with Z3 formula a + b\nhas counterexample value: 1</pre>\n<p>If we add conditions, they are taken into account and the counterexample will\nfulfil the conditions:</p>\n<pre class=\"literal-block\">mul_is_add: int_mul(a, b)\n    check a.known_gt_const(1) and b.known_gt_const(2)\n    =&gt; int_add(a, b)</pre>\n<p>This leads to the following counterexample:</p>\n<pre class=\"literal-block\">Could not prove correctness of rule 'mul_is_add'\nin line 46\ncounterexample given by Z3:\ncounterexample values:\na: 2\nb: 3\noperation int_mul(a, b) with Z3 formula a*b\nhas counterexample result vale: 6\nBUT\ntarget expression: int_add(a, b) with Z3 formula a + b\nhas counterexample value: 5</pre>\n<p>Some <code class=\"docutils literal\">IntBound</code> methods cannot be used in Z3 proofs because their <a class=\"reference external\" href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#cases-where-this-style-of-z3-proof-doesnt-work).\">control\nflow is too complex</a>. If that is the case, they can have Z3-equivalent\nformulations defined (in every case this is done, it's a potential proof hole if\nthe Z3 friendly reformulation and the real implementation differ from each\nother, therefore extra care is required to make very sure they are equivalent).</p>\n<p>It's possible to skip the proof of individual rules entirely by adding\n<code class=\"docutils literal\">SORRY_Z3</code> to its body (but we should try not to do that too often):</p>\n<pre class=\"literal-block\">eq_different_knownbits: int_eq(x, y)\n    SORRY_Z3\n    check x.known_ne(y)\n    =&gt; 0</pre>\n</section>\n<section id=\"checking-for-satisfiability\">\n<h3>Checking for satisfiability</h3>\n<p>In addition to checking whether the rule yields a correct optimization, we also\ncheck whether the rule can ever apply. This ensures that there are <em>some</em>\nruntime values that would fulfil all the checks in a rule. Here's an example of\na rule violating this:</p>\n<pre class=\"literal-block\">never_applies: int_is_true(x)\n    check x.known_lt_const(0) and x.known_gt_const(0) # impossible condition, always False\n    =&gt; x</pre>\n<p>Right now the error messages if this goes wrong are not completely easy to\nunderstand. I hope to be able to improve this later:</p>\n<pre class=\"literal-block\">Rule 'never_applies' cannot ever apply\nin line 1\nZ3 did not manage to find values for variables x such that the following condition becomes True:\nAnd(x &lt;= x_upper,\n    x_lower &lt;= x,\n    If(x_upper &lt; 0, x_lower &gt; 0, x_upper &lt; 0))</pre>\n</section>\n<section id=\"implementation-notes\">\n<h3>Implementation Notes</h3>\n<p>The implementation of the DSL is done in a relatively ad-hoc manner. It is\nparsed using <a class=\"reference external\" href=\"https://rply.readthedocs.io/\">rply</a>, there's a small type checker that tries to find common\nproblems in how the rules are written. Z3 is used via the Python API, like in\nthe previous blog posts that are using it. The\npattern matching RPython code is generated using an approach inspired by Luc\nMaranget's paper <a class=\"reference external\" href=\"http://moscova.inria.fr/~maranget/papers/ml05e-maranget.pdf\">Compiling Pattern Matching to Good Decision Trees</a>. See\n<a class=\"reference external\" href=\"https://compiler.club/compiling-pattern-matching/\">this blog post</a> for an approachable introduction.</p>\n</section>\n</section>\n<section id=\"conclusion\">\n<h2>Conclusion</h2>\n<p>Now that I've described the DSL, here are the rules that are equivalent to the\nimperative code in the motivation section:</p>\n<pre class=\"literal-block\">mul_zero: int_mul(x, 0)\n    =&gt; 0\n\nmul_one: int_mul(x, 1)\n    =&gt; x\n\nmul_minus_one: int_mul(x, -1)\n    =&gt; int_neg(x)\n\nmul_pow2_const: int_mul(x, C)\n    check C &gt; 0 and C &amp; (C - 1) == 0\n    shift = highest_bit(C)\n    =&gt; int_lshift(x, shift)\n\nmul_lshift: int_mul(x, int_lshift(1, y))\n    check y.known_ge_const(0) and y.known_le_const(LONG_BIT)\n    =&gt; int_lshift(x, y)</pre>\n<p>The current status of the DSL is that it got merged to PyPy's main branch. I\nrewrote a part of the integer rewrites <a class=\"reference external\" href=\"https://github.com/pypy/pypy/blob/d92d0bfd38318ede1cbaadadafd77da69d431fad/rpython/jit/metainterp/ruleopt/real.rules\">into the DSL</a>, but some are still in the\nold imperative style (mostly for complicated reasons, the easily ported ones are\nall done). Since I've only been porting optimizations that had existed prior to\nthe existence of the DSL, performance numbers of benchmarks didn't change.</p>\n<p>There are a number of features that are still missing and some possible\nextensions that I plan to work on in the future:</p>\n<ul class=\"simple\">\n<li><p>All the integer operations that the DSL handles so far are the variants that\ndo not check for overflow (or where overflow was proven to be impossible to\nhappen). In regular Python code the overflow-checking variants <cite>int_add_ovf</cite>\netc are much more common, but the DSL doesn't support them yet. I plan to fix\nthis, but don't completely understand how the correctness proofs for them\nshould be done correctly.</p></li>\n<li><p>A related problem is that I don't understand what it means for a rewrite to be\ncorrect if some of the operations are only defined for a subset of the input\nvalues. E.g. division isn't defined if the divisor is zero. In theory, a\ndivision operation in the trace should always be preceded by a check that the\ndivisor isn't zero. But sometimes other optimization move the check around and\nthe connection to the division gets lost or muddled. What optimizations can we\nstill safely perform on the division? There's lots of prior work on this\nquestion, but I still don't understand what the correct approach in our\ncontext would be.</p></li>\n<li><p>Ordering comparisons like <code class=\"docutils literal\">int_lt</code>, <code class=\"docutils literal\">int_le</code> and their unsigned variants are\nnot ported to the DSL yet. Comparisons are an area where the JIT is not super\ngood yet at optimizing away operations. This is a pretty big topic and I've\nstarted a project with Nico Rittinghaus to try to improve the situation a bit\nmore generally.</p></li>\n<li><p>A more advanced direction of work would be to implement a simplified form of\n<a class=\"reference external\" href=\"https://egraphs-good.github.io/\">e-graphs</a> (or <a class=\"reference external\" href=\"https://vimeo.com/843540328\">ae-graphs</a>). The JIT has like half of an e-graph data\nstructure already, and we probably can't afford a full one in terms of compile\ntime costs, but maybe we can have two thirds or something?</p></li>\n</ul>\n</section>\n<section id=\"acknowledgements\">\n<h2>Acknowledgements</h2>\n<p>Thank you to <a class=\"reference external\" href=\"https://bernsteinbear.com/\">Max Bernstein</a> and <a class=\"reference external\" href=\"https://martinfriedrichberger.net/\">Martin Berger</a> for super helpful feedback on\ndrafts of the post!</p>\n</section>"
        }
      ],
      "description": "<p>As is probably apparent from the sequence of blog posts about the topic in the\nlast year, I have been thinking about and working on integer optimizations in the JIT\ncompiler a lot. This work was mainly motivated by <a class=\"reference external\" href=\"https://docs.pydrofoil.org/en/latest/\">Pydrofoil</a>, where integer\noperations matter a lot more than for your typical Python program.</p>\n<p>In this post I'll describe my most recent change, which is a new small domain\nspecific language that I implemented to specify peephole optimizations on\ninteger operations in the JIT.\nIt uses pattern matching to specify how (sequences of) integer operations\nshould be simplified and optimized. The rules are then compiled to\nRPython code that then becomes part of the JIT's optimization passes.</p>\n<p>To make it less likely to introduce incorrect optimizations into the JIT, the\nrules are automatically proven correct with Z3 as part of the build process (for\na more hands-on intro to how that works you can look at the <a class=\"reference external\" href=\"https://pypy.org/posts/2024/08/toy-knownbits.html#proving-correctness-of-the-transfer-functions-with-z3\">knownbits</a> post).\nIn this blog post I want to motivate why I introduced the DSL and give an\nintroduction to how it works.</p>\n<section id=\"motivation\">\n<h2>Motivation</h2>\n<p>This summer, after I wrote my <a class=\"reference external\" href=\"https://www.pypy.org/posts/2024/07/mining-jit-traces-missing-optimizations-z3.html\">scripts to mine JIT traces for missed optimization</a>\nopportunities, I started implementing a few of the integer peephole rewrite that\nthe script identified. Unfortunately, doing so led to the problem that the way\nwe express these rewrites up to now is very imperative and verbose. Here's a\nsnippet of RPython code that shows some rewrites for integer multiplication\n(look at the comments to see what the different parts actually do). You don't\nneed to understand the code in detail, but basically it's in very imperative\nstyle and there's quite a lot of boilerplate.</p>\n<div class=\"code\"><pre class=\"code python\"><a id=\"rest_code_7d5885c533384778ba70ebd63601716c-1\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-1\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-1\"></a><span class=\"k\">def</span> <span class=\"nf\">optimize_INT_MUL</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">):</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-2\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-2\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-2\"></a>    <span class=\"n\">arg0</span> <span class=\"o\">=</span> <span class=\"n\">get_box_replacement</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-3\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-3\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-3\"></a>    <span class=\"n\">b0</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">getintbound</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">)</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-4\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-4\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-4\"></a>    <span class=\"n\">arg1</span> <span class=\"o\">=</span> <span class=\"n\">get_box_replacement</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-5\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-5\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-5\"></a>    <span class=\"n\">b1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">getintbound</span><span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"p\">)</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-6\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-6\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-6\"></a>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-7\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-7\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-7\"></a>    <span class=\"k\">if</span> <span class=\"n\">b0</span><span class=\"o\">.</span><span class=\"n\">known_eq_const</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-8\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-8\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-8\"></a>        <span class=\"c1\"># 1 * x == x</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-9\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-9\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-9\"></a>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">make_equal_to</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">)</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-10\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-10\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-10\"></a>    <span class=\"k\">elif</span> <span class=\"n\">b1</span><span class=\"o\">.</span><span class=\"n\">known_eq_const</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-11\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-11\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-11\"></a>        <span class=\"c1\"># x * 1 == x</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-12\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-12\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-12\"></a>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">make_equal_to</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">arg0</span><span class=\"p\">)</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-13\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-13\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-13\"></a>    <span class=\"k\">elif</span> <span class=\"n\">b0</span><span class=\"o\">.</span><span class=\"n\">known_eq_const</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">b1</span><span class=\"o\">.</span><span class=\"n\">known_eq_const</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-14\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-14\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-14\"></a>        <span class=\"c1\"># 0 * x == x * 0 == 0</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-15\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-15\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-15\"></a>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">make_constant_int</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-16\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-16\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-16\"></a>    <span class=\"k\">else</span><span class=\"p\">:</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-17\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-17\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-17\"></a>        <span class=\"k\">for</span> <span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"n\">rhs</span> <span class=\"ow\">in</span> <span class=\"p\">[(</span><span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg0</span><span class=\"p\">)]:</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-18\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-18\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-18\"></a>            <span class=\"n\">lh_info</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">getintbound</span><span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"p\">)</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-19\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-19\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-19\"></a>            <span class=\"k\">if</span> <span class=\"n\">lh_info</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">():</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-20\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-20\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-20\"></a>                <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">lh_info</span><span class=\"o\">.</span><span class=\"n\">get_constant_int</span><span class=\"p\">()</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-21\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-21\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-21\"></a>                <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-22\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-22\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-22\"></a>                    <span class=\"c1\"># x * (2 ** c) == x &lt;&lt; c</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-23\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-23\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-23\"></a>                    <span class=\"n\">new_rhs</span> <span class=\"o\">=</span> <span class=\"n\">ConstInt</span><span class=\"p\">(</span><span class=\"n\">highest_bit</span><span class=\"p\">(</span><span class=\"n\">lh_info</span><span class=\"o\">.</span><span class=\"n\">get_constant_int</span><span class=\"p\">()))</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-24\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-24\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-24\"></a>                    <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">replace_op_with</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">rop</span><span class=\"o\">.</span><span class=\"n\">INT_LSHIFT</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"n\">new_rhs</span><span class=\"p\">])</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-25\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-25\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-25\"></a>                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">optimizer</span><span class=\"o\">.</span><span class=\"n\">send_extra_operation</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">)</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-26\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-26\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-26\"></a>                    <span class=\"k\">return</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-27\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-27\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-27\"></a>                <span class=\"k\">elif</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-28\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-28\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-28\"></a>                    <span class=\"c1\"># x * -1 == -x</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-29\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-29\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-29\"></a>                    <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">replace_op_with</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">rop</span><span class=\"o\">.</span><span class=\"n\">INT_NEG</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">rhs</span><span class=\"p\">])</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-30\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-30\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-30\"></a>                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">optimizer</span><span class=\"o\">.</span><span class=\"n\">send_extra_operation</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">)</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-31\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-31\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-31\"></a>                    <span class=\"k\">return</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-32\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-32\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-32\"></a>            <span class=\"k\">else</span><span class=\"p\">:</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-33\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-33\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-33\"></a>                <span class=\"c1\"># x * (1 &lt;&lt; y) == x &lt;&lt; y</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-34\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-34\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-34\"></a>                <span class=\"n\">shiftop</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">optimizer</span><span class=\"o\">.</span><span class=\"n\">as_operation</span><span class=\"p\">(</span><span class=\"n\">get_box_replacement</span><span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"p\">),</span> <span class=\"n\">rop</span><span class=\"o\">.</span><span class=\"n\">INT_LSHIFT</span><span class=\"p\">)</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-35\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-35\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-35\"></a>                <span class=\"k\">if</span> <span class=\"n\">shiftop</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-36\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-36\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-36\"></a>                    <span class=\"k\">continue</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-37\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-37\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-37\"></a>                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">shiftop</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()</span> <span class=\"ow\">or</span> <span class=\"n\">shiftop</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">getint</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-38\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-38\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-38\"></a>                    <span class=\"k\">continue</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-39\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-39\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-39\"></a>                <span class=\"n\">shiftvar</span> <span class=\"o\">=</span> <span class=\"n\">get_box_replacement</span><span class=\"p\">(</span><span class=\"n\">shiftop</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-40\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-40\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-40\"></a>                <span class=\"n\">shiftbound</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">getintbound</span><span class=\"p\">(</span><span class=\"n\">shiftvar</span><span class=\"p\">)</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-41\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-41\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-41\"></a>                <span class=\"k\">if</span> <span class=\"n\">shiftbound</span><span class=\"o\">.</span><span class=\"n\">known_nonnegative</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"n\">shiftbound</span><span class=\"o\">.</span><span class=\"n\">known_lt_const</span><span class=\"p\">(</span><span class=\"n\">LONG_BIT</span><span class=\"p\">):</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-42\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-42\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-42\"></a>                    <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">replace_op_with</span><span class=\"p\">(</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-43\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-43\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-43\"></a>                            <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">rop</span><span class=\"o\">.</span><span class=\"n\">INT_LSHIFT</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"n\">shiftvar</span><span class=\"p\">])</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-44\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-44\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-44\"></a>                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">optimizer</span><span class=\"o\">.</span><span class=\"n\">send_extra_operation</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">)</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-45\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-45\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-45\"></a>                    <span class=\"k\">return</span>\n<a id=\"rest_code_7d5885c533384778ba70ebd63601716c-46\" name=\"rest_code_7d5885c533384778ba70ebd63601716c-46\" href=\"https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html#rest_code_7d5885c533384778ba70ebd63601716c-46\"></a>        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">)</span>\n</pre></div>\n<p>Adding more rules to these functions is very tedious and gets super confusing\nwhen the functions get bigger. In addition I am always worried about making\nmistakes when writing this kind of code, and there is no feedback at all about\nwhich of these rules are actually applied a lot in real programs.</p>\n<p>Therefore I decided to write a small domain specific language with the goal of\nexpressing these rules in a more declarative way. In the rest of the post I'll\ndescribe the DSL (most of that description is adapted from the <a class=\"reference external\" href=\"https://rpython.readthedocs.io/en/latest/jit/ruleopt.html\">documentation</a>\nabout it that I wrote).</p>\n</section>\n<section id=\"the-peephole-rule-dsl\">\n<h2>The Peephole Rule DSL</h2>\n<section id=\"simple-transformation-rules\">\n<h3>Simple transformation rules</h3>\n<p>The rules in the DSL specify how integer operation can be transformed into\ncheaper other integer operations. A rule always consists of a name, a pattern,\nand a target. Here's a simple rule:</p>\n<pre class=\"literal-block\">add_zero: int_add(x, 0)\n    =&gt; x</pre>\n<p>The name of the rule is <code class=\"docutils literal\">add_zero</code>. It matches operations in the trace of the\nform <code class=\"docutils literal\">int_add(x, 0)</code>, where <code class=\"docutils literal\">x</code> will match anything and <code class=\"docutils literal\">0</code> will match only the\nconstant zero. After the <code class=\"docutils literal\">=&gt;</code> arrow is the target of the rewrite, i.e. what the\noperation is rewritten to, in this case <code class=\"docutils literal\">x</code>.</p>\n<p>The rule language has a list of which of the operations are commutative, so <code class=\"docutils literal\">add_zero</code>\nwill also optimize <code class=\"docutils literal\">int_add(0, x)</code> to <code class=\"docutils literal\">x</code>.</p>\n<p>Variables in the pattern can repeat:</p>\n<pre class=\"literal-block\">sub_x_x: int_sub(x, x)\n    =&gt; 0</pre>\n<p>This rule matches against <code class=\"docutils literal\">int_sub</code> operations where the two arguments are the\nsame (either the same box, or the same constant).</p>\n<p>Here's a rule with a more complicated pattern:</p>\n<pre class=\"literal-block\">sub_add: int_sub(int_add(x, y), y)\n    =&gt; x</pre>\n<p>This pattern matches <code class=\"docutils literal\">int_sub</code> operations, where the first argument was\nproduced by an <code class=\"docutils literal\">int_add</code> operation. In addition, one of the arguments of the\naddition has to be the same as the second argument of the subtraction.</p>\n<p>The constants <code class=\"docutils literal\">MININT</code>, <code class=\"docutils literal\">MAXINT</code> and <code class=\"docutils literal\">LONG_BIT</code> (which is either 32 or 64,\ndepending on which platform the JIT is built for) can be used in rules, they\nbehave like writing numbers but allow bit-width-independent formulations:</p>\n<pre class=\"literal-block\">is_true_and_minint: int_is_true(int_and(x, MININT))\n    =&gt; int_lt(x, 0)</pre>\n<p>It is also possible to have a pattern where some arguments needs to be a\nconstant, without specifying which constant. Those patterns look like this:</p>\n<pre class=\"literal-block\">sub_add_consts: int_sub(int_add(x, C1), C2) # incomplete\n    # more goes here\n    =&gt; int_sub(x, C)</pre>\n<p>Variables in the pattern that start with a <code class=\"docutils literal\">C</code> match against constants only.\nHowever, in this current form the rule is incomplete, because the variable <code class=\"docutils literal\">C</code>\nthat is being used in the target operation is not defined anywhere. We will see\nhow to compute it in the next section.</p>\n</section>\n<section id=\"computing-constants-and-other-intermediate-results\">\n<h3>Computing constants and other intermediate results</h3>\n<p>Sometimes it is necessary to compute intermediate results that are used in the\ntarget operation. To do that, there can be extra assignments between the rule head\nand the rule target.:</p>\n<pre class=\"literal-block\">sub_add_consts: int_sub(int_add(x, C1), C2) # incomplete\n    C = C1 + C2\n    =&gt; int_sub(x, C)</pre>\n<p>The right hand side of such an assignment is a subset of Python syntax,\nsupporting arithmetic using <code class=\"docutils literal\">+</code>, <code class=\"docutils literal\">-</code>, <code class=\"docutils literal\">*</code>, and certain helper functions.\nHowever, the syntax allows you to be explicit about unsignedness for some\noperations. E.g. <code class=\"docutils literal\">&gt;&gt;u</code> exists for unsigned right shifts (and I plan to add\n<code class=\"docutils literal\">&gt;u</code>, <code class=\"docutils literal\">&gt;=u</code>, <code class=\"docutils literal\">&lt;u</code>, <code class=\"docutils literal\">&lt;=u</code> for comparisons).</p>\n<p>Here's an example of a rule that uses <code class=\"docutils literal\">&gt;&gt;u</code>:</p>\n<pre class=\"literal-block\">urshift_lshift_x_c_c: uint_rshift(int_lshift(x, C), C)\n    mask = (-1 &lt;&lt; C) &gt;&gt;u C\n    =&gt; int_and(x, mask)</pre>\n</section>\n<section id=\"checks\">\n<h3>Checks</h3>\n<p>Some rewrites are only true under certain conditions. For example,\n<code class=\"docutils literal\">int_eq(x, 1)</code> can be rewritten to <code class=\"docutils literal\">x</code>, if <code class=\"docutils literal\">x</code> is known to store a boolean value. This can\nbe expressed with <em>checks</em>:</p>\n<pre class=\"literal-block\">eq_one: int_eq(x, 1)\n    check x.is_bool()\n    =&gt; x</pre>\n<p>A check is followed by a boolean expression. The variables from the pattern can\nbe used as <code class=\"docutils literal\">IntBound</code> instances in checks (and also in assignments) to find out\nwhat the abstract interpretation of the JIT knows about the value of a trace variable\n(<code class=\"docutils literal\">IntBound</code> is the name of the abstract domain that the JIT uses for integers,\ndespite the fact that it also stores <a class=\"reference external\" href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html\">knownbits</a> information nowadays).</p>\n<p>Here's another example:</p>\n<pre class=\"literal-block\">mul_lshift: int_mul(x, int_lshift(1, y))\n    check y.known_ge_const(0) and y.known_le_const(LONG_BIT)\n    =&gt; int_lshift(x, y)</pre>\n<p>It expresses that <code class=\"docutils literal\">x * (1 &lt;&lt; y)</code> can be rewritten to <code class=\"docutils literal\">x &lt;&lt; y</code> but checks that\n<code class=\"docutils literal\">y</code> is known to be between <code class=\"docutils literal\">0</code> and <code class=\"docutils literal\">LONG_BIT</code>.</p>\n<p>Checks and assignments can be repeated and combined with each other:</p>\n<pre class=\"literal-block\">mul_pow2_const: int_mul(x, C)\n    check C &gt; 0 and C &amp; (C - 1) == 0\n    shift = highest_bit(C)\n    =&gt; int_lshift(x, shift)</pre>\n<p>In addition to calling methods on <code class=\"docutils literal\">IntBound</code> instances, it's also possible to\naccess their attributes, like in this rule:</p>\n<pre class=\"literal-block\">and_x_c_in_range: int_and(x, C)\n    check x.lower &gt;= 0 and x.upper &lt;= C &amp; ~(C + 1)\n    =&gt; x</pre>\n</section>\n<section id=\"rule-ordering-and-liveness\">\n<h3>Rule Ordering and Liveness</h3>\n<p>The generated optimizer code will give preference to applying rules that\nproduce a constant or a variable as a rewrite result. Only if none of those\nmatch do rules that produce new result operations get applied. For example, the\nrules <code class=\"docutils literal\">sub_x_x</code> and <code class=\"docutils literal\">sub_add</code> are tried before trying <code class=\"docutils literal\">sub_add_consts</code>,\nbecause the former two rules optimize to a constant and a variable\nrespectively, while the latter produces a new operation as the result.</p>\n<p>The rule <code class=\"docutils literal\">sub_add_consts</code> has a possible problem, which is that if the\nintermediate result of the <code class=\"docutils literal\">int_add</code> operation in the rule head is used by\nsome other operations, then the <code class=\"docutils literal\">sub_add_consts</code> rule does not actually\nreduce the number of operations (and might actually make things slightly worse\ndue to increased register pressure). However, currently it would be extremely\nhard to take that kind of information into account in the optimization pass of\nthe JIT, so we optimistically apply the rules anyway.</p>\n</section>\n<section id=\"checking-rule-coverage\">\n<h3>Checking rule coverage</h3>\n<p>Every rewrite rule should have at least one unit test where it triggers. To\nensure this, the <a class=\"reference external\" href=\"https://github.com/pypy/pypy/blob/d92d0bfd38318ede1cbaadadafd77da69d431fad/rpython/jit/metainterp/optimizeopt/test/test_optimizeintbound.py\">unit test file that mainly checks integer optimizations</a> in the\nJIT has an assert at the end of a test run, that every rule fired at least once.</p>\n</section>\n<section id=\"printing-rule-statistics\">\n<h3>Printing rule statistics</h3>\n<p>The JIT can print statistics about which rule fired how often in the\n<code class=\"docutils literal\"><span class=\"pre\">jit-intbounds-stats</span></code> logging category, using the <a class=\"reference external\" href=\"https://rpython.readthedocs.io/en/latest/logging.html\">PYPYLOG</a> mechanism. For\nexample, to print the category to stdout at the end of program execution, run\nPyPy like this:</p>\n<pre class=\"literal-block\">PYPYLOG=jit-intbounds-stats:- pypy ...</pre>\n<p>The output of that will look something like this:</p>\n<pre class=\"literal-block\">int_add\n    add_reassoc_consts 2514\n    add_zero 107008\nint_sub\n    sub_zero 31519\n    sub_from_zero 523\n    sub_x_x 3153\n    sub_add_consts 159\n    sub_add 55\n    sub_sub_x_c_c 1752\n    sub_sub_c_x_c 0\n    sub_xor_x_y_y 0\n    sub_or_x_y_y 0\nint_mul\n    mul_zero 0\n    mul_one 110\n    mul_minus_one 0\n    mul_pow2_const 1456\n    mul_lshift 0\n...</pre>\n</section>\n<section id=\"termination-and-confluence\">\n<h3>Termination and Confluence</h3>\n<p>Right now there are unfortunately no checks that the rules actually rewrite\noperations towards \"simpler\" forms. There is no cost model, and also nothing\nthat prevents you from writing a rule like this:</p>\n<pre class=\"literal-block\">neg_complication: int_neg(x) # leads to infinite rewrites\n    =&gt; int_mul(-1, x)</pre>\n<p>Doing this would lead to endless rewrites if there is also another rule that\nturns multiplication with -1 into negation.</p>\n<p>There is also no checking for <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Confluence_(abstract_rewriting)\">confluence</a> (yet?), i.e. the property that all\nrewrites starting from the same input trace always lead to the same output\ntrace, no matter in which order the rules are applied.</p>\n</section>\n<section id=\"proofs\">\n<h3>Proofs</h3>\n<p>It is very easy to write a peephole rule that is not correct in all corner\ncases. Therefore all the rules are proven correct with Z3 before compiled into\nactual JIT code, by default. When the proof fails, a (hopefully minimal)\ncounterexample is printed. The counterexample consists of values for all the\ninputs that fulfil the checks, values for the intermediate expressions, and\nthen two <em>different</em> values for the source and the target operations.</p>\n<p>E.g. if we try to add the incorrect rule:</p>\n<pre class=\"literal-block\">mul_is_add: int_mul(a, b)\n    =&gt; int_add(a, b)</pre>\n<p>We get the following counterexample as output:</p>\n<pre class=\"literal-block\">Could not prove correctness of rule 'mul_is_add'\nin line 1\ncounterexample given by Z3:\ncounterexample values:\na: 0\nb: 1\noperation int_mul(a, b) with Z3 formula a*b\nhas counterexample result vale: 0\nBUT\ntarget expression: int_add(a, b) with Z3 formula a + b\nhas counterexample value: 1</pre>\n<p>If we add conditions, they are taken into account and the counterexample will\nfulfil the conditions:</p>\n<pre class=\"literal-block\">mul_is_add: int_mul(a, b)\n    check a.known_gt_const(1) and b.known_gt_const(2)\n    =&gt; int_add(a, b)</pre>\n<p>This leads to the following counterexample:</p>\n<pre class=\"literal-block\">Could not prove correctness of rule 'mul_is_add'\nin line 46\ncounterexample given by Z3:\ncounterexample values:\na: 2\nb: 3\noperation int_mul(a, b) with Z3 formula a*b\nhas counterexample result vale: 6\nBUT\ntarget expression: int_add(a, b) with Z3 formula a + b\nhas counterexample value: 5</pre>\n<p>Some <code class=\"docutils literal\">IntBound</code> methods cannot be used in Z3 proofs because their <a class=\"reference external\" href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#cases-where-this-style-of-z3-proof-doesnt-work).\">control\nflow is too complex</a>. If that is the case, they can have Z3-equivalent\nformulations defined (in every case this is done, it's a potential proof hole if\nthe Z3 friendly reformulation and the real implementation differ from each\nother, therefore extra care is required to make very sure they are equivalent).</p>\n<p>It's possible to skip the proof of individual rules entirely by adding\n<code class=\"docutils literal\">SORRY_Z3</code> to its body (but we should try not to do that too often):</p>\n<pre class=\"literal-block\">eq_different_knownbits: int_eq(x, y)\n    SORRY_Z3\n    check x.known_ne(y)\n    =&gt; 0</pre>\n</section>\n<section id=\"checking-for-satisfiability\">\n<h3>Checking for satisfiability</h3>\n<p>In addition to checking whether the rule yields a correct optimization, we also\ncheck whether the rule can ever apply. This ensures that there are <em>some</em>\nruntime values that would fulfil all the checks in a rule. Here's an example of\na rule violating this:</p>\n<pre class=\"literal-block\">never_applies: int_is_true(x)\n    check x.known_lt_const(0) and x.known_gt_const(0) # impossible condition, always False\n    =&gt; x</pre>\n<p>Right now the error messages if this goes wrong are not completely easy to\nunderstand. I hope to be able to improve this later:</p>\n<pre class=\"literal-block\">Rule 'never_applies' cannot ever apply\nin line 1\nZ3 did not manage to find values for variables x such that the following condition becomes True:\nAnd(x &lt;= x_upper,\n    x_lower &lt;= x,\n    If(x_upper &lt; 0, x_lower &gt; 0, x_upper &lt; 0))</pre>\n</section>\n<section id=\"implementation-notes\">\n<h3>Implementation Notes</h3>\n<p>The implementation of the DSL is done in a relatively ad-hoc manner. It is\nparsed using <a class=\"reference external\" href=\"https://rply.readthedocs.io/\">rply</a>, there's a small type checker that tries to find common\nproblems in how the rules are written. Z3 is used via the Python API, like in\nthe previous blog posts that are using it. The\npattern matching RPython code is generated using an approach inspired by Luc\nMaranget's paper <a class=\"reference external\" href=\"http://moscova.inria.fr/~maranget/papers/ml05e-maranget.pdf\">Compiling Pattern Matching to Good Decision Trees</a>. See\n<a class=\"reference external\" href=\"https://compiler.club/compiling-pattern-matching/\">this blog post</a> for an approachable introduction.</p>\n</section>\n</section>\n<section id=\"conclusion\">\n<h2>Conclusion</h2>\n<p>Now that I've described the DSL, here are the rules that are equivalent to the\nimperative code in the motivation section:</p>\n<pre class=\"literal-block\">mul_zero: int_mul(x, 0)\n    =&gt; 0\n\nmul_one: int_mul(x, 1)\n    =&gt; x\n\nmul_minus_one: int_mul(x, -1)\n    =&gt; int_neg(x)\n\nmul_pow2_const: int_mul(x, C)\n    check C &gt; 0 and C &amp; (C - 1) == 0\n    shift = highest_bit(C)\n    =&gt; int_lshift(x, shift)\n\nmul_lshift: int_mul(x, int_lshift(1, y))\n    check y.known_ge_const(0) and y.known_le_const(LONG_BIT)\n    =&gt; int_lshift(x, y)</pre>\n<p>The current status of the DSL is that it got merged to PyPy's main branch. I\nrewrote a part of the integer rewrites <a class=\"reference external\" href=\"https://github.com/pypy/pypy/blob/d92d0bfd38318ede1cbaadadafd77da69d431fad/rpython/jit/metainterp/ruleopt/real.rules\">into the DSL</a>, but some are still in the\nold imperative style (mostly for complicated reasons, the easily ported ones are\nall done). Since I've only been porting optimizations that had existed prior to\nthe existence of the DSL, performance numbers of benchmarks didn't change.</p>\n<p>There are a number of features that are still missing and some possible\nextensions that I plan to work on in the future:</p>\n<ul class=\"simple\">\n<li><p>All the integer operations that the DSL handles so far are the variants that\ndo not check for overflow (or where overflow was proven to be impossible to\nhappen). In regular Python code the overflow-checking variants <cite>int_add_ovf</cite>\netc are much more common, but the DSL doesn't support them yet. I plan to fix\nthis, but don't completely understand how the correctness proofs for them\nshould be done correctly.</p></li>\n<li><p>A related problem is that I don't understand what it means for a rewrite to be\ncorrect if some of the operations are only defined for a subset of the input\nvalues. E.g. division isn't defined if the divisor is zero. In theory, a\ndivision operation in the trace should always be preceded by a check that the\ndivisor isn't zero. But sometimes other optimization move the check around and\nthe connection to the division gets lost or muddled. What optimizations can we\nstill safely perform on the division? There's lots of prior work on this\nquestion, but I still don't understand what the correct approach in our\ncontext would be.</p></li>\n<li><p>Ordering comparisons like <code class=\"docutils literal\">int_lt</code>, <code class=\"docutils literal\">int_le</code> and their unsigned variants are\nnot ported to the DSL yet. Comparisons are an area where the JIT is not super\ngood yet at optimizing away operations. This is a pretty big topic and I've\nstarted a project with Nico Rittinghaus to try to improve the situation a bit\nmore generally.</p></li>\n<li><p>A more advanced direction of work would be to implement a simplified form of\n<a class=\"reference external\" href=\"https://egraphs-good.github.io/\">e-graphs</a> (or <a class=\"reference external\" href=\"https://vimeo.com/843540328\">ae-graphs</a>). The JIT has like half of an e-graph data\nstructure already, and we probably can't afford a full one in terms of compile\ntime costs, but maybe we can have two thirds or something?</p></li>\n</ul>\n</section>\n<section id=\"acknowledgements\">\n<h2>Acknowledgements</h2>\n<p>Thank you to <a class=\"reference external\" href=\"https://bernsteinbear.com/\">Max Bernstein</a> and <a class=\"reference external\" href=\"https://martinfriedrichberger.net/\">Martin Berger</a> for super helpful feedback on\ndrafts of the post!</p>\n</section>",
      "id": "https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html",
      "link": "https://www.pypy.org/posts/2024/10/jit-peephole-dsl.html",
      "links": [],
      "published": "2024-10-23T15:00:00+00:00",
      "tags": [
        {
          "label": null,
          "scheme": null,
          "term": "jit"
        },
        {
          "label": null,
          "scheme": null,
          "term": "z3"
        }
      ],
      "title": "A DSL for Peephole Transformation Rules of Integer Operations in the PyPy JIT"
    },
    {
      "author": "The PyPy Team",
      "content": [
        {
          "base": null,
          "language": null,
          "type": "text/html",
          "value": "<p>The PyPy project is always happy to hear about industrial use  and deployments\nof PyPy. For the <a href=\"https://www.pypy.org/posts/2024/03/fixing-bug-incremental-gc.html\">GC bug\nfinding</a>\ntask earlier this year, we collaborated with PortaOne and we're super happy\nthat Serhii Titov, head of the QA department at PortaOne, was up to writing\nthis guest post to describe their use and experience with the project.</p>\n<hr>\n<h3 id=\"what-does-portaone-do\">What does PortaOne do?</h3>\n<p>We at <a href=\"https://www.portaone.com/\">PortaOne Inc.</a> allow telecom operators to\nlaunch new services (or provide existing services more efficiently) using our\nVoIP platform (PortaSIP) and our real-time charging system (PortaBilling),\nwhich provides additional features for cloud PBX, such as call transfer,\nqueues, interactive voice response (IVR) and more. At this moment our support\nteam manages several thousand servers with our software installed in 100\ncountries, through which over 500 telecommunication service providers connect\nmillions of end users every day. The unique thing about PortaOne is that we\nsupply the source code of our product to our customers - something unheard of\nin the telecom world! Thus we attract \"telco innovators\", who use our APIs to\nbuild around the system and the source code to create unique tweaks of\nfunctionality, which produces amazing products.</p>\n<p>At the core of PortaSIP is the middle-ware component (the proper name for it is\n\"B2BUA\", but that probably does not say much to anyone outside of experts in\nVoIP), which implements the actual handling of SIP calls, messages, etc. and\nall added features (for instance, trying to send a call via telco operators\nthrough which the cost per minute is lower). It has to be fast (since even a\nsmall delay in establishing a call is noticed by a customer), reliable\n(everyone hates when a call drops or cannot be completed) and yet easily\nexpandable with new functionality. This is why we decided to use Python as\nopposed to C/C++ or similar programming languages, which are often used in\ntelecom equipment.</p>\n<p>The B2BUA component is a batch of similar Python processes that are looped\ninside a\n<a href=\"https://docs.python.org/3.10/library/asyncore.html\"><code>asyncore.dispatcher</code></a>\nwrapper. The load balancing between these Python processes is done by our\nstateless SIP proxy server written in C++. All our sockets are served by this\nB2BUA. We have our custom client-wrappers around <code>pymysql</code>, <code>redis</code>,\n<code>cassandra-driver</code> and <code>requests</code> to communicate with external services. Some\nof the Python processes use <a href=\"https://cffi.readthedocs.io/en/stable/\"><code>cffi</code></a>\nwrappers around C-code to improve their performance (examples: an Oracle DB\ndriver, a client to a radius server, a custom C logger).</p>\n<p>The I/O operations that block the main thread of the Python processes are\nprocessed in sub-threads. We have custom wrappers  around <code>threading.Thread</code>\nand also <code>asyncore.dispatcher</code>. The results of such operations are returned to\nthe main thread.</p>\n<h3 id=\"improving-our-performance-with-pypy\">Improving our performance with PyPy</h3>\n<p>We started with CPython and then in 2014 switched to PyPy because it was\nfaster. Here's an exact quote from our first testing notes: \"PyPy gives\nsignificant performance boost, ~50%\". Nowadays, after years of changes in all\nthe software involved, PyPy still gives us +50% boost compared to CPython.</p>\n<p>Taking care of real time traffic for so many people around the globe is\nsomething we're really proud of. I hope the PyPy team can be proud of it as\nwell, as the PyPy product is a part of this solution.</p>\n<h3 id=\"finding-a-garbage-collector-bug-stage-1-the-gc-hooks\">Finding a garbage collector bug: stage 1, the GC hooks</h3>\n<p>However our path with PyPy wasn't perfectly smooth. There were very rare cases\nof crashes on PyPy that we weren't able to catch. That's because to make\ncoredump useful we needed to switch to PyPy with debug, but we cannot let it\nrun in that mode on a production system for an extended period of time, and we\ndid not have any STR (steps-to-reproduce) to make PyPy crash again in our lab.\nThat's why we kept (and still keep) both interpreters installed just in case,\nand we would switch to CPython if we noticed it happening.</p>\n<p>At the time of updating PyPy from 3.5 to 3.6 our QA started noticing those\ncrashes more often, but we still had no luck with STR or collecting proper\ncoredumps with debug symbols. Then it became even worse after our development\nplayed with the <a href=\"https://doc.pypy.org/en/latest/gc_info.html\">Garbage Collector's\noptions</a> to increase performance\nof our middleware component. The crashes started to affect our regular\nperformance testing (controlled by QA manager Yevhenii Bovda). At that point it\nwas decided that we can no longer live like that and so we started an intense\ninvestigation.</p>\n<p>During the first stage of our investigation (following the best practice of\ntroubleshooting) we narrowed down the issue as much as we could. So, it was not\nour code, it was definitely somewhere in PyPy. Eventually our SIP software\nengineer <a href=\"https://github.com/Yevhenii-Yatchenko\">Yevhenii Yatchenko</a> found out\nthat this bug is connected with the use of our <a href=\"https://doc.pypy.org/en/latest/gc_info.html#gc-hooks\">custom hooks in the\nGC</a>. Yevhenii created\nticket <a href=\"https://github.com/pypy/pypy/issues/4899\">#4899</a> and within 2-3 days we\ngot a fix from a <a href=\"https://github.com/cfbolz\">member of the PyPy team</a>, in true open-source fashion.</p>\n<h3 id=\"finding-a-garbage-collector-bug-stage-2-the-real-bug\">Finding a garbage collector bug: stage 2, the real bug</h3>\n<p>Then came stage 2. In parallel with the previous ticket, Yevhenii created\n<a href=\"https://github.com/pypy/pypy/issues/4900\">#4900</a> that we still see failing\nwith coredumps quite often, and they are not connected to GC custom hooks. In a\nnutshell, it took us dozens of back and forward emails, three Zoom sessions and\nfour versions of a patch to solve the issue. During the last iteration we got a\nnew set of options to try and a new version of the patch. Surprisingly, that\nhelped! What a relief! So, the next logical step was to remove all debug\noptions and run PyPy only with the patch. Unfortunately, it started to fail\nagain and we came to the obvious conclusion that what will help us is not a\npatch, but one of options we were testing out. At that point we found out that\n<a href=\"https://doc.pypy.org/en/latest/gc_info.html#environment-variables\"><code>PYPY_GC_MAX_PINNED=0</code></a>\nis a necessary and sufficient condition to solve our issue. This points to\nanother bug in the garbage collector, somehow related to object pinning.</p>\n<p>Here's our current state: we have to add <code>PYPY_GC_MAX_PINNED=0</code>, but we do not\nface the crashes anymore.</p>\n<h3 id=\"conclusion-and-next-steps\">Conclusion and next steps</h3>\n<p>Gratitude is extended to Carl for his invaluable assistance in resolving the\nnasty bugss, because it seems we're the only ones who suffered from the last\none and we really did not want to fall back to CPython due to its performance\ndisadvantage.</p>\n<p>Serhii Titov, head of the QA department at PortaOne Inc.</p>\n<p>P.S. If you are a perfectionist and at this point you have mixed feelings and\nyou are still bothered by the question \"But there might still be a bug in the\nGC, what about that?\" - Carl has some ideas about it and he will sort it out\n(we will help with the testing/verification part).</p>"
        }
      ],
      "description": "<p>The PyPy project is always happy to hear about industrial use  and deployments\nof PyPy. For the <a href=\"https://www.pypy.org/posts/2024/03/fixing-bug-incremental-gc.html\">GC bug\nfinding</a>\ntask earlier this year, we collaborated with PortaOne and we're super happy\nthat Serhii Titov, head of the QA department at PortaOne, was up to writing\nthis guest post to describe their use and experience with the project.</p>\n<hr>\n<h3 id=\"what-does-portaone-do\">What does PortaOne do?</h3>\n<p>We at <a href=\"https://www.portaone.com/\">PortaOne Inc.</a> allow telecom operators to\nlaunch new services (or provide existing services more efficiently) using our\nVoIP platform (PortaSIP) and our real-time charging system (PortaBilling),\nwhich provides additional features for cloud PBX, such as call transfer,\nqueues, interactive voice response (IVR) and more. At this moment our support\nteam manages several thousand servers with our software installed in 100\ncountries, through which over 500 telecommunication service providers connect\nmillions of end users every day. The unique thing about PortaOne is that we\nsupply the source code of our product to our customers - something unheard of\nin the telecom world! Thus we attract \"telco innovators\", who use our APIs to\nbuild around the system and the source code to create unique tweaks of\nfunctionality, which produces amazing products.</p>\n<p>At the core of PortaSIP is the middle-ware component (the proper name for it is\n\"B2BUA\", but that probably does not say much to anyone outside of experts in\nVoIP), which implements the actual handling of SIP calls, messages, etc. and\nall added features (for instance, trying to send a call via telco operators\nthrough which the cost per minute is lower). It has to be fast (since even a\nsmall delay in establishing a call is noticed by a customer), reliable\n(everyone hates when a call drops or cannot be completed) and yet easily\nexpandable with new functionality. This is why we decided to use Python as\nopposed to C/C++ or similar programming languages, which are often used in\ntelecom equipment.</p>\n<p>The B2BUA component is a batch of similar Python processes that are looped\ninside a\n<a href=\"https://docs.python.org/3.10/library/asyncore.html\"><code>asyncore.dispatcher</code></a>\nwrapper. The load balancing between these Python processes is done by our\nstateless SIP proxy server written in C++. All our sockets are served by this\nB2BUA. We have our custom client-wrappers around <code>pymysql</code>, <code>redis</code>,\n<code>cassandra-driver</code> and <code>requests</code> to communicate with external services. Some\nof the Python processes use <a href=\"https://cffi.readthedocs.io/en/stable/\"><code>cffi</code></a>\nwrappers around C-code to improve their performance (examples: an Oracle DB\ndriver, a client to a radius server, a custom C logger).</p>\n<p>The I/O operations that block the main thread of the Python processes are\nprocessed in sub-threads. We have custom wrappers  around <code>threading.Thread</code>\nand also <code>asyncore.dispatcher</code>. The results of such operations are returned to\nthe main thread.</p>\n<h3 id=\"improving-our-performance-with-pypy\">Improving our performance with PyPy</h3>\n<p>We started with CPython and then in 2014 switched to PyPy because it was\nfaster. Here's an exact quote from our first testing notes: \"PyPy gives\nsignificant performance boost, ~50%\". Nowadays, after years of changes in all\nthe software involved, PyPy still gives us +50% boost compared to CPython.</p>\n<p>Taking care of real time traffic for so many people around the globe is\nsomething we're really proud of. I hope the PyPy team can be proud of it as\nwell, as the PyPy product is a part of this solution.</p>\n<h3 id=\"finding-a-garbage-collector-bug-stage-1-the-gc-hooks\">Finding a garbage collector bug: stage 1, the GC hooks</h3>\n<p>However our path with PyPy wasn't perfectly smooth. There were very rare cases\nof crashes on PyPy that we weren't able to catch. That's because to make\ncoredump useful we needed to switch to PyPy with debug, but we cannot let it\nrun in that mode on a production system for an extended period of time, and we\ndid not have any STR (steps-to-reproduce) to make PyPy crash again in our lab.\nThat's why we kept (and still keep) both interpreters installed just in case,\nand we would switch to CPython if we noticed it happening.</p>\n<p>At the time of updating PyPy from 3.5 to 3.6 our QA started noticing those\ncrashes more often, but we still had no luck with STR or collecting proper\ncoredumps with debug symbols. Then it became even worse after our development\nplayed with the <a href=\"https://doc.pypy.org/en/latest/gc_info.html\">Garbage Collector's\noptions</a> to increase performance\nof our middleware component. The crashes started to affect our regular\nperformance testing (controlled by QA manager Yevhenii Bovda). At that point it\nwas decided that we can no longer live like that and so we started an intense\ninvestigation.</p>\n<p>During the first stage of our investigation (following the best practice of\ntroubleshooting) we narrowed down the issue as much as we could. So, it was not\nour code, it was definitely somewhere in PyPy. Eventually our SIP software\nengineer <a href=\"https://github.com/Yevhenii-Yatchenko\">Yevhenii Yatchenko</a> found out\nthat this bug is connected with the use of our <a href=\"https://doc.pypy.org/en/latest/gc_info.html#gc-hooks\">custom hooks in the\nGC</a>. Yevhenii created\nticket <a href=\"https://github.com/pypy/pypy/issues/4899\">#4899</a> and within 2-3 days we\ngot a fix from a <a href=\"https://github.com/cfbolz\">member of the PyPy team</a>, in true open-source fashion.</p>\n<h3 id=\"finding-a-garbage-collector-bug-stage-2-the-real-bug\">Finding a garbage collector bug: stage 2, the real bug</h3>\n<p>Then came stage 2. In parallel with the previous ticket, Yevhenii created\n<a href=\"https://github.com/pypy/pypy/issues/4900\">#4900</a> that we still see failing\nwith coredumps quite often, and they are not connected to GC custom hooks. In a\nnutshell, it took us dozens of back and forward emails, three Zoom sessions and\nfour versions of a patch to solve the issue. During the last iteration we got a\nnew set of options to try and a new version of the patch. Surprisingly, that\nhelped! What a relief! So, the next logical step was to remove all debug\noptions and run PyPy only with the patch. Unfortunately, it started to fail\nagain and we came to the obvious conclusion that what will help us is not a\npatch, but one of options we were testing out. At that point we found out that\n<a href=\"https://doc.pypy.org/en/latest/gc_info.html#environment-variables\"><code>PYPY_GC_MAX_PINNED=0</code></a>\nis a necessary and sufficient condition to solve our issue. This points to\nanother bug in the garbage collector, somehow related to object pinning.</p>\n<p>Here's our current state: we have to add <code>PYPY_GC_MAX_PINNED=0</code>, but we do not\nface the crashes anymore.</p>\n<h3 id=\"conclusion-and-next-steps\">Conclusion and next steps</h3>\n<p>Gratitude is extended to Carl for his invaluable assistance in resolving the\nnasty bugss, because it seems we're the only ones who suffered from the last\none and we really did not want to fall back to CPython due to its performance\ndisadvantage.</p>\n<p>Serhii Titov, head of the QA department at PortaOne Inc.</p>\n<p>P.S. If you are a perfectionist and at this point you have mixed feelings and\nyou are still bothered by the question \"But there might still be a bug in the\nGC, what about that?\" - Carl has some ideas about it and he will sort it out\n(we will help with the testing/verification part).</p>",
      "id": "https://www.pypy.org/posts/2024/08/portaone.html",
      "link": "https://www.pypy.org/posts/2024/08/portaone.html",
      "links": [],
      "published": "2024-08-29T09:00:00+00:00",
      "tags": [
        {
          "label": null,
          "scheme": null,
          "term": "casestudy"
        },
        {
          "label": null,
          "scheme": null,
          "term": "guestpost"
        }
      ],
      "title": "Guest Post: How PortaOne uses PyPy for high-performance processing, connecting over 1B of phone calls every month"
    },
    {
      "author": "mattip",
      "content": [
        {
          "base": null,
          "language": null,
          "type": "text/html",
          "value": "<section id=\"pypy-v7-3-17-release-of-python-2-7-and-3-10\">\n<h2>PyPy v7.3.17: release of python 2.7 and 3.10</h2>\n<p>The PyPy team is proud to release version 7.3.17 of PyPy.</p>\n<p>This release includes a new <a class=\"reference internal\" href=\"https://www.pypy.org/posts/2024/08/pypy-v7317-release.html#risc-v-jit-backend\">RISC-V JIT backend</a>, an <a class=\"reference internal\" href=\"https://www.pypy.org/posts/2024/08/pypy-v7317-release.html#improved-repl\">improved REPL</a> based on\nwork by the CPython team, and <a class=\"reference internal\" href=\"https://www.pypy.org/posts/2024/08/pypy-v7317-release.html#better-jit-optimizations\">better JIT optimizations</a> of integer\noperations. Special shout-outs to <a class=\"reference external\" href=\"https://github.com/loganchien\">Logan Chien</a> for the <a class=\"reference external\" href=\"https://github.com/pypy/pypy/pull/5002\">RISC-V backend\nwork</a>, to <a class=\"reference external\" href=\"https://github.com/nirit100\">Nico Rittinghaus</a> for better integer optimization in the JIT, and\nthe CPython team that has worked on the repl.</p>\n<p>The release includes two different interpreters:</p>\n<ul class=\"simple\">\n<li><p>PyPy2.7, which is an interpreter supporting the syntax and the features of\nPython 2.7 including the stdlib for CPython 2.7.18+ (the <code class=\"docutils literal\">+</code> is for\nbackported security updates)</p></li>\n<li><p>PyPy3.10, which is an interpreter supporting the syntax and the features of\nPython 3.10, including the stdlib for CPython 3.10.14.</p></li>\n</ul>\n<p>The interpreters are based on much the same codebase, thus the dual\nrelease. This is a micro release, all APIs are compatible with the other 7.3\nreleases. It follows after 7.3.16 release on April 23, 2024.</p>\n<p>We recommend updating. You can find links to download the releases here:</p>\n<blockquote>\n<p><a class=\"reference external\" href=\"https://pypy.org/download.html\">https://pypy.org/download.html</a></p>\n</blockquote>\n<p>We would like to thank our donors for the continued support of the PyPy\nproject. If PyPy is not quite good enough for your needs, we are available for\n<a class=\"reference external\" href=\"https://www.pypy.org/pypy-sponsors.html\">direct consulting</a> work. If PyPy is helping you out, we would love to hear\nabout it and encourage submissions to our <a class=\"reference external\" href=\"https://pypy.org/blog\">blog</a> via a pull request\nto <a class=\"reference external\" href=\"https://github.com/pypy/pypy.org\">https://github.com/pypy/pypy.org</a></p>\n<p>We would also like to thank our contributors and encourage new people to join\nthe project. PyPy has many layers and we need help with all of them: bug fixes,\n<a class=\"reference external\" href=\"https://www.pypy.org/posts/2024/08/index.html\">PyPy</a> and <a class=\"reference external\" href=\"https://rpython.readthedocs.org\">RPython</a> documentation improvements, or general <a class=\"reference external\" href=\"https://www.pypy.org/posts/2024/08/project-ideas.html\">help</a> with\nmaking RPython's JIT even better.</p>\n<p>If you are a python library maintainer and use C-extensions, please consider\nmaking a <a class=\"reference external\" href=\"https://hpyproject.org/\">HPy</a> / <a class=\"reference external\" href=\"https://cffi.readthedocs.io\">CFFI</a> / <a class=\"reference external\" href=\"https://cppyy.readthedocs.io\">cppyy</a> version of your library that would be performant\non PyPy. In any case, both <a class=\"reference external\" href=\"https://github.com/joerick/cibuildwheel\">cibuildwheel</a> and the <a class=\"reference external\" href=\"https://github.com/matthew-brett/multibuild\">multibuild system</a> support\nbuilding wheels for PyPy.</p>\n<section id=\"risc-v-backend-for-the-jit\">\n<span id=\"risc-v-jit-backend\"></span><h3>RISC-V backend for the JIT</h3>\n<p>PyPy's JIT has added support for generating 64-bit RISC-V machine code at\nruntime (RV64-IMAD, specifically). So far we are not releasing binaries for any\nRISC-V platforms, but there are <a class=\"reference external\" href=\"https://rpython.readthedocs.io/en/latest/riscv.html\">instructions</a> on how to cross-compile binaries.</p>\n</section>\n<section id=\"repl-improvements\">\n<span id=\"improved-repl\"></span><h3>REPL Improvements</h3>\n<p>The biggest user-visible change of the release is new features in the repl of\nPyPy3.10. CPython 3.13 has adopted and extended PyPy's pure-Python repl, adding\na number of features and fixing a number or bugs in the process. We have\nbackported and added the following features:</p>\n<ul class=\"simple\">\n<li><p>Prompts and tracebacks use terminal colors, as well as <a class=\"reference external\" href=\"https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda\">terminal hyperlinks</a>\nfor file names.</p></li>\n<li><p><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Bracketed-paste\">Bracketed paste</a> enable pasting several lines of input into the terminal\nwithout auto-indentation getting in the way.</p></li>\n<li><p>A special interactive help browser (F1), history browser (F2), explicit paste\nmode (F3).</p></li>\n<li><p>Support for Ctrl-&lt;left/right&gt; to jump over whole words at a time.</p></li>\n</ul>\n<p>See the <a class=\"reference external\" href=\"https://docs.python.org/3.13/whatsnew/3.13.html#a-better-interactive-interpreter\">CPython documentation for further details</a>. Thanks to Łukasz Langa,\nPablo Galindo Salgado and the other CPython devs involved in this work.</p>\n</section>\n<section id=\"better-jit-optimizations-of-integer-operations\">\n<span id=\"better-jit-optimizations\"></span><h3>Better JIT optimizations of integer operations</h3>\n<p>The optimizers of PyPy's JIT have become much better at reasoning about and\noptimizing integer operations. This is done with a new <a class=\"reference external\" href=\"https://pypy.org/posts/2024/08/toy-knownbits.html\">\"knownbits\" abstract\ndomain</a>. In many programs that do bit-manipulation of integers, some of the\nbits of the integer variables of the program can be statically known. Here's a\nsimple example:</p>\n<div class=\"code\"><pre class=\"code python\"><a id=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-1\" name=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-1\" href=\"https://www.pypy.org/posts/2024/08/pypy-v7317-release.html#rest_code_fdd24c5078e54549bf7486e2ecbcad3e-1\"></a><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">|</span> <span class=\"mi\">1</span>\n<a id=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-2\" name=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-2\" href=\"https://www.pypy.org/posts/2024/08/pypy-v7317-release.html#rest_code_fdd24c5078e54549bf7486e2ecbcad3e-2\"></a><span class=\"o\">...</span>\n<a id=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-3\" name=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-3\" href=\"https://www.pypy.org/posts/2024/08/pypy-v7317-release.html#rest_code_fdd24c5078e54549bf7486e2ecbcad3e-3\"></a><span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n<a id=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-4\" name=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-4\" href=\"https://www.pypy.org/posts/2024/08/pypy-v7317-release.html#rest_code_fdd24c5078e54549bf7486e2ecbcad3e-4\"></a>    <span class=\"o\">...</span>\n<a id=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-5\" name=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-5\" href=\"https://www.pypy.org/posts/2024/08/pypy-v7317-release.html#rest_code_fdd24c5078e54549bf7486e2ecbcad3e-5\"></a><span class=\"k\">else</span><span class=\"p\">:</span>\n<a id=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-6\" name=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-6\" href=\"https://www.pypy.org/posts/2024/08/pypy-v7317-release.html#rest_code_fdd24c5078e54549bf7486e2ecbcad3e-6\"></a>    <span class=\"o\">...</span>\n</pre></div>\n<p>With the new abstract domain, the JIT can optimize the <code class=\"docutils literal\">if</code>-condition to\n<code class=\"docutils literal\">True</code>, because it already knows that the lowest bit of <code class=\"docutils literal\">x</code> must be set.\nThis optimization applies to all Python-integers that fit into a machine word\n(PyPy optimistically picks between two different representations for <code class=\"docutils literal\">int</code>,\ndepending on the size of the value). Unfortunately there is very little impact\nof this change on almost all Python code, because intensive bit-manipulation is\nrare in Python. However, the change leads to significant performance\nimprovements in <a class=\"reference external\" href=\"https://docs.pydrofoil.org/en/latest/\">Pydrofoil</a> (the RPython-based RISC-V/ARM emulators that are\nautomatically generated from high-level <a class=\"reference external\" href=\"https://github.com/rems-project/sail/\">Sail</a> specifications of the respective\nISAs, and that use the RPython JIT to improve performance).</p>\n</section>\n<section id=\"pypy-versions-and-speed-pypy-org\">\n<h3>PyPy versions and speed.pypy.org</h3>\n<p>The keen-eyed will have noticed no mention of Python version 3.9 in the\nreleases above. Typically we will maintain only one version of Python3, but due\nto PyPy3.9 support on conda-forge we maintained multiple versions from the\nfirst release of PyPy3.10 in PyPy v7.3.12 (Dec 2022). Conda-forge is\n<a class=\"reference external\" href=\"https://pypy.org/posts/2024/08/conda-forge-proposes-dropping-support-for-pypy.html\">sunsetting its PyPy support</a>, which means we can drop PyPy3.9. Since that was\nthe major driver of benchmarks at <a class=\"reference external\" href=\"https://speed.pypy.org\">https://speed.pypy.org</a>, we revamped the site\nto showcase PyPy3.9, PyPy3.10, and various versions of cpython on the home\npage. For historical reasons, the \"baseline\" for comparison is still cpython\n3.7.19.</p>\n<p>We will keep the buildbots building PyPY3.9 until the end of August, these\nbuilds will still be available on the <a class=\"reference external\" href=\"https://buildbot.pypy.org/nightly/\">nightly builds</a> tab of the buildbot.</p>\n</section>\n<section id=\"what-is-pypy\">\n<h3>What is PyPy?</h3>\n<p>PyPy is a Python interpreter, a drop-in replacement for CPython\nIt's fast (<a class=\"reference external\" href=\"https://speed.pypy.org\">PyPy and CPython</a> performance\ncomparison) due to its integrated tracing JIT compiler.</p>\n<p>We also welcome developers of other <a class=\"reference external\" href=\"https://rpython.readthedocs.io/en/latest/examples.html\">dynamic languages</a> to see what RPython\ncan do for them.</p>\n<p>We provide binary builds for:</p>\n<ul class=\"simple\">\n<li><p><strong>x86</strong> machines on most common operating systems\n(Linux 32/64 bits, Mac OS 64 bits, Windows 64 bits)</p></li>\n<li><p>64-bit <strong>ARM</strong> machines running Linux (<code class=\"docutils literal\">aarch64</code>) and macos (<code class=\"docutils literal\">macos_arm64</code>).</p></li>\n</ul>\n<p>PyPy supports Windows 32-bit, Linux PPC64 big- and little-endian, Linux ARM\n32 bit, RISC-V RV64IMAFD Linux, and s390x Linux but does not release binaries.\nPlease reach out to us if you wish to sponsor binary releases for those\nplatforms. Downstream packagers provide binary builds for debian, Fedora,\nconda, OpenBSD, FreeBSD, Gentoo, and more.</p>\n</section>\n<section id=\"what-else-is-new\">\n<h3>What else is new?</h3>\n<p>For more information about the 7.3.17 release, see the <a class=\"reference external\" href=\"https://doc.pypy.org/en/latest/release-v7.3.17.html#changelog\">full changelog</a>.</p>\n<p>Please update, and continue to help us make pypy better.</p>\n<p>Cheers,\nThe PyPy Team</p>\n</section>\n</section>"
        }
      ],
      "description": "<section id=\"pypy-v7-3-17-release-of-python-2-7-and-3-10\">\n<h2>PyPy v7.3.17: release of python 2.7 and 3.10</h2>\n<p>The PyPy team is proud to release version 7.3.17 of PyPy.</p>\n<p>This release includes a new <a class=\"reference internal\" href=\"https://www.pypy.org/posts/2024/08/pypy-v7317-release.html#risc-v-jit-backend\">RISC-V JIT backend</a>, an <a class=\"reference internal\" href=\"https://www.pypy.org/posts/2024/08/pypy-v7317-release.html#improved-repl\">improved REPL</a> based on\nwork by the CPython team, and <a class=\"reference internal\" href=\"https://www.pypy.org/posts/2024/08/pypy-v7317-release.html#better-jit-optimizations\">better JIT optimizations</a> of integer\noperations. Special shout-outs to <a class=\"reference external\" href=\"https://github.com/loganchien\">Logan Chien</a> for the <a class=\"reference external\" href=\"https://github.com/pypy/pypy/pull/5002\">RISC-V backend\nwork</a>, to <a class=\"reference external\" href=\"https://github.com/nirit100\">Nico Rittinghaus</a> for better integer optimization in the JIT, and\nthe CPython team that has worked on the repl.</p>\n<p>The release includes two different interpreters:</p>\n<ul class=\"simple\">\n<li><p>PyPy2.7, which is an interpreter supporting the syntax and the features of\nPython 2.7 including the stdlib for CPython 2.7.18+ (the <code class=\"docutils literal\">+</code> is for\nbackported security updates)</p></li>\n<li><p>PyPy3.10, which is an interpreter supporting the syntax and the features of\nPython 3.10, including the stdlib for CPython 3.10.14.</p></li>\n</ul>\n<p>The interpreters are based on much the same codebase, thus the dual\nrelease. This is a micro release, all APIs are compatible with the other 7.3\nreleases. It follows after 7.3.16 release on April 23, 2024.</p>\n<p>We recommend updating. You can find links to download the releases here:</p>\n<blockquote>\n<p><a class=\"reference external\" href=\"https://pypy.org/download.html\">https://pypy.org/download.html</a></p>\n</blockquote>\n<p>We would like to thank our donors for the continued support of the PyPy\nproject. If PyPy is not quite good enough for your needs, we are available for\n<a class=\"reference external\" href=\"https://www.pypy.org/pypy-sponsors.html\">direct consulting</a> work. If PyPy is helping you out, we would love to hear\nabout it and encourage submissions to our <a class=\"reference external\" href=\"https://pypy.org/blog\">blog</a> via a pull request\nto <a class=\"reference external\" href=\"https://github.com/pypy/pypy.org\">https://github.com/pypy/pypy.org</a></p>\n<p>We would also like to thank our contributors and encourage new people to join\nthe project. PyPy has many layers and we need help with all of them: bug fixes,\n<a class=\"reference external\" href=\"https://www.pypy.org/posts/2024/08/index.html\">PyPy</a> and <a class=\"reference external\" href=\"https://rpython.readthedocs.org\">RPython</a> documentation improvements, or general <a class=\"reference external\" href=\"https://www.pypy.org/posts/2024/08/project-ideas.html\">help</a> with\nmaking RPython's JIT even better.</p>\n<p>If you are a python library maintainer and use C-extensions, please consider\nmaking a <a class=\"reference external\" href=\"https://hpyproject.org/\">HPy</a> / <a class=\"reference external\" href=\"https://cffi.readthedocs.io\">CFFI</a> / <a class=\"reference external\" href=\"https://cppyy.readthedocs.io\">cppyy</a> version of your library that would be performant\non PyPy. In any case, both <a class=\"reference external\" href=\"https://github.com/joerick/cibuildwheel\">cibuildwheel</a> and the <a class=\"reference external\" href=\"https://github.com/matthew-brett/multibuild\">multibuild system</a> support\nbuilding wheels for PyPy.</p>\n<section id=\"risc-v-backend-for-the-jit\">\n<span id=\"risc-v-jit-backend\"></span><h3>RISC-V backend for the JIT</h3>\n<p>PyPy's JIT has added support for generating 64-bit RISC-V machine code at\nruntime (RV64-IMAD, specifically). So far we are not releasing binaries for any\nRISC-V platforms, but there are <a class=\"reference external\" href=\"https://rpython.readthedocs.io/en/latest/riscv.html\">instructions</a> on how to cross-compile binaries.</p>\n</section>\n<section id=\"repl-improvements\">\n<span id=\"improved-repl\"></span><h3>REPL Improvements</h3>\n<p>The biggest user-visible change of the release is new features in the repl of\nPyPy3.10. CPython 3.13 has adopted and extended PyPy's pure-Python repl, adding\na number of features and fixing a number or bugs in the process. We have\nbackported and added the following features:</p>\n<ul class=\"simple\">\n<li><p>Prompts and tracebacks use terminal colors, as well as <a class=\"reference external\" href=\"https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda\">terminal hyperlinks</a>\nfor file names.</p></li>\n<li><p><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Bracketed-paste\">Bracketed paste</a> enable pasting several lines of input into the terminal\nwithout auto-indentation getting in the way.</p></li>\n<li><p>A special interactive help browser (F1), history browser (F2), explicit paste\nmode (F3).</p></li>\n<li><p>Support for Ctrl-&lt;left/right&gt; to jump over whole words at a time.</p></li>\n</ul>\n<p>See the <a class=\"reference external\" href=\"https://docs.python.org/3.13/whatsnew/3.13.html#a-better-interactive-interpreter\">CPython documentation for further details</a>. Thanks to Łukasz Langa,\nPablo Galindo Salgado and the other CPython devs involved in this work.</p>\n</section>\n<section id=\"better-jit-optimizations-of-integer-operations\">\n<span id=\"better-jit-optimizations\"></span><h3>Better JIT optimizations of integer operations</h3>\n<p>The optimizers of PyPy's JIT have become much better at reasoning about and\noptimizing integer operations. This is done with a new <a class=\"reference external\" href=\"https://pypy.org/posts/2024/08/toy-knownbits.html\">\"knownbits\" abstract\ndomain</a>. In many programs that do bit-manipulation of integers, some of the\nbits of the integer variables of the program can be statically known. Here's a\nsimple example:</p>\n<div class=\"code\"><pre class=\"code python\"><a id=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-1\" name=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-1\" href=\"https://www.pypy.org/posts/2024/08/pypy-v7317-release.html#rest_code_fdd24c5078e54549bf7486e2ecbcad3e-1\"></a><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">|</span> <span class=\"mi\">1</span>\n<a id=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-2\" name=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-2\" href=\"https://www.pypy.org/posts/2024/08/pypy-v7317-release.html#rest_code_fdd24c5078e54549bf7486e2ecbcad3e-2\"></a><span class=\"o\">...</span>\n<a id=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-3\" name=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-3\" href=\"https://www.pypy.org/posts/2024/08/pypy-v7317-release.html#rest_code_fdd24c5078e54549bf7486e2ecbcad3e-3\"></a><span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n<a id=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-4\" name=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-4\" href=\"https://www.pypy.org/posts/2024/08/pypy-v7317-release.html#rest_code_fdd24c5078e54549bf7486e2ecbcad3e-4\"></a>    <span class=\"o\">...</span>\n<a id=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-5\" name=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-5\" href=\"https://www.pypy.org/posts/2024/08/pypy-v7317-release.html#rest_code_fdd24c5078e54549bf7486e2ecbcad3e-5\"></a><span class=\"k\">else</span><span class=\"p\">:</span>\n<a id=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-6\" name=\"rest_code_fdd24c5078e54549bf7486e2ecbcad3e-6\" href=\"https://www.pypy.org/posts/2024/08/pypy-v7317-release.html#rest_code_fdd24c5078e54549bf7486e2ecbcad3e-6\"></a>    <span class=\"o\">...</span>\n</pre></div>\n<p>With the new abstract domain, the JIT can optimize the <code class=\"docutils literal\">if</code>-condition to\n<code class=\"docutils literal\">True</code>, because it already knows that the lowest bit of <code class=\"docutils literal\">x</code> must be set.\nThis optimization applies to all Python-integers that fit into a machine word\n(PyPy optimistically picks between two different representations for <code class=\"docutils literal\">int</code>,\ndepending on the size of the value). Unfortunately there is very little impact\nof this change on almost all Python code, because intensive bit-manipulation is\nrare in Python. However, the change leads to significant performance\nimprovements in <a class=\"reference external\" href=\"https://docs.pydrofoil.org/en/latest/\">Pydrofoil</a> (the RPython-based RISC-V/ARM emulators that are\nautomatically generated from high-level <a class=\"reference external\" href=\"https://github.com/rems-project/sail/\">Sail</a> specifications of the respective\nISAs, and that use the RPython JIT to improve performance).</p>\n</section>\n<section id=\"pypy-versions-and-speed-pypy-org\">\n<h3>PyPy versions and speed.pypy.org</h3>\n<p>The keen-eyed will have noticed no mention of Python version 3.9 in the\nreleases above. Typically we will maintain only one version of Python3, but due\nto PyPy3.9 support on conda-forge we maintained multiple versions from the\nfirst release of PyPy3.10 in PyPy v7.3.12 (Dec 2022). Conda-forge is\n<a class=\"reference external\" href=\"https://pypy.org/posts/2024/08/conda-forge-proposes-dropping-support-for-pypy.html\">sunsetting its PyPy support</a>, which means we can drop PyPy3.9. Since that was\nthe major driver of benchmarks at <a class=\"reference external\" href=\"https://speed.pypy.org\">https://speed.pypy.org</a>, we revamped the site\nto showcase PyPy3.9, PyPy3.10, and various versions of cpython on the home\npage. For historical reasons, the \"baseline\" for comparison is still cpython\n3.7.19.</p>\n<p>We will keep the buildbots building PyPY3.9 until the end of August, these\nbuilds will still be available on the <a class=\"reference external\" href=\"https://buildbot.pypy.org/nightly/\">nightly builds</a> tab of the buildbot.</p>\n</section>\n<section id=\"what-is-pypy\">\n<h3>What is PyPy?</h3>\n<p>PyPy is a Python interpreter, a drop-in replacement for CPython\nIt's fast (<a class=\"reference external\" href=\"https://speed.pypy.org\">PyPy and CPython</a> performance\ncomparison) due to its integrated tracing JIT compiler.</p>\n<p>We also welcome developers of other <a class=\"reference external\" href=\"https://rpython.readthedocs.io/en/latest/examples.html\">dynamic languages</a> to see what RPython\ncan do for them.</p>\n<p>We provide binary builds for:</p>\n<ul class=\"simple\">\n<li><p><strong>x86</strong> machines on most common operating systems\n(Linux 32/64 bits, Mac OS 64 bits, Windows 64 bits)</p></li>\n<li><p>64-bit <strong>ARM</strong> machines running Linux (<code class=\"docutils literal\">aarch64</code>) and macos (<code class=\"docutils literal\">macos_arm64</code>).</p></li>\n</ul>\n<p>PyPy supports Windows 32-bit, Linux PPC64 big- and little-endian, Linux ARM\n32 bit, RISC-V RV64IMAFD Linux, and s390x Linux but does not release binaries.\nPlease reach out to us if you wish to sponsor binary releases for those\nplatforms. Downstream packagers provide binary builds for debian, Fedora,\nconda, OpenBSD, FreeBSD, Gentoo, and more.</p>\n</section>\n<section id=\"what-else-is-new\">\n<h3>What else is new?</h3>\n<p>For more information about the 7.3.17 release, see the <a class=\"reference external\" href=\"https://doc.pypy.org/en/latest/release-v7.3.17.html#changelog\">full changelog</a>.</p>\n<p>Please update, and continue to help us make pypy better.</p>\n<p>Cheers,\nThe PyPy Team</p>\n</section>\n</section>",
      "id": "https://www.pypy.org/posts/2024/08/pypy-v7317-release.html",
      "link": "https://www.pypy.org/posts/2024/08/pypy-v7317-release.html",
      "links": [],
      "published": "2024-08-28T12:22:08+00:00",
      "tags": [
        {
          "label": null,
          "scheme": null,
          "term": "release"
        }
      ],
      "title": "PyPy v7.3.17 release"
    },
    {
      "author": "mattip",
      "content": [
        {
          "base": null,
          "language": null,
          "type": "text/html",
          "value": "<p>Conda-forge has kindly been providing support for PyPy since 2019. The\nconda-forge team has been very patient and generous with resources, but it\nseems the uptake of PyPy has not justified the effort. Major packages still\nare not <a href=\"https://conda-forge.org/status/migration/?name=pypy38\">available on PyPy</a>,\nothers find it hard to <a href=\"https://github.com/conda-forge/numpy-feedstock/pull/310\">update\nversions</a>. We don't\nget much feedback at all about people using PyPy, and even less about PyPy on\nconda-forge. The conda-forge team has proposed <a href=\"https://github.com/conda-forge/conda-forge.github.io/pull/2259\">sunsetting\nPyPy</a> going\nforward, which means current packages would remain but no new packages would be\nbuilt. If you have an opinion, you can comment on that PR, or on this blog post.</p>\n<p>Since conda-forge supports PyPy3.9 but not PyPy3.10, we have continued\nreleasing PyPy3.9 even though we typically support only one version of PyPy3.\nWith the sunsetting proposal, we will not release any more updates to PyPy3.9.\nI opened a <a href=\"https://github.com/orgs/pypy/discussions/4998\">poll</a> about the\nintention to drop PyPy3.9. If you have an opinion, please chime in.</p>"
        }
      ],
      "description": "<p>Conda-forge has kindly been providing support for PyPy since 2019. The\nconda-forge team has been very patient and generous with resources, but it\nseems the uptake of PyPy has not justified the effort. Major packages still\nare not <a href=\"https://conda-forge.org/status/migration/?name=pypy38\">available on PyPy</a>,\nothers find it hard to <a href=\"https://github.com/conda-forge/numpy-feedstock/pull/310\">update\nversions</a>. We don't\nget much feedback at all about people using PyPy, and even less about PyPy on\nconda-forge. The conda-forge team has proposed <a href=\"https://github.com/conda-forge/conda-forge.github.io/pull/2259\">sunsetting\nPyPy</a> going\nforward, which means current packages would remain but no new packages would be\nbuilt. If you have an opinion, you can comment on that PR, or on this blog post.</p>\n<p>Since conda-forge supports PyPy3.9 but not PyPy3.10, we have continued\nreleasing PyPy3.9 even though we typically support only one version of PyPy3.\nWith the sunsetting proposal, we will not release any more updates to PyPy3.9.\nI opened a <a href=\"https://github.com/orgs/pypy/discussions/4998\">poll</a> about the\nintention to drop PyPy3.9. If you have an opinion, please chime in.</p>",
      "id": "https://www.pypy.org/posts/2024/08/conda-forge-proposes-dropping-support-for-pypy.html",
      "link": "https://www.pypy.org/posts/2024/08/conda-forge-proposes-dropping-support-for-pypy.html",
      "links": [],
      "published": "2024-08-09T06:27:41+00:00",
      "tags": [
        {
          "label": null,
          "scheme": null,
          "term": "conda-forge"
        }
      ],
      "title": "Conda-forge proposes sunsetting support for PyPy"
    },
    {
      "author": "CF Bolz-Tereick",
      "content": [
        {
          "base": null,
          "language": null,
          "type": "text/html",
          "value": "<p>After <a href=\"https://bernsteinbear.com/blog/toy-abstract-interpretation/\">Max' introduction to abstract interpretation for the toy optimizer</a> in the\nlast post, I want to present a more complicated abstract domain in this post.\nThis abstract domain reasons about the individual bits of a variable in a trace.\nEvery bit can be either \"known zero\", \"known one\" or \"unknown\". The abstract\ndomain is useful for optimizing integer operations, particularly the bitwise operations.\nThe abstract domain follows quite closely the <a href=\"https://github.com/torvalds/linux/blob/master/kernel/bpf/tnum.c\">tristate abstract domain of the\neBPF verifier in the Linux\nKernel</a>, as\ndescribed by the paper\n<a href=\"https://arxiv.org/abs/2105.05398\">Sound, Precise, and Fast Abstract Interpretation with Tristate\nNumbers</a> by Harishankar Vishwanathan, Matan\nShachnai, Srinivas Narayana, and Santosh Nagarakatte.</p>\n<p>The presentation in this post will still be in the context of the\n<a href=\"https://www.pypy.org/categories/toy-optimizer\">toy optimizer</a>. We'll spend a significant part of\nthe post convincing ourselves that the abstract domain transfer functions that\nwe're writing are really correct, using both property-based testing and\nautomated proofs (again using Z3).</p>\n<p>PyPy has implemented and merged a more complicated version of the same abstract\ndomain for the \"real\" PyPy JIT. A more thorough explanation of that real world\nimplementation will follow.</p>\n<p>I'd like to thank Max Bernstein and Armin Rigo for lots of great feedback on\ndrafts of this post. The PyPy implementation was mainly done by Nico\nRittinghaus and me.</p>\n<p><strong>Contents:</strong></p>\n<div class=\"toc\">\n<ul>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#motivation\">Motivation</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#the-knownbits-abstract-domain\">The Knownbits Abstract Domain</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#transfer-functions\">Transfer Functions</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#property-based-tests-with-hypothesis\">Property-based Tests with Hypothesis</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#when-are-transfer-functions-correct-how-do-we-test-them\">When are Transfer Functions Correct? How do we test them?</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#implementing-binary-transfer-functions\">Implementing Binary Transfer Functions</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#addition-and-subtraction\">Addition and Subtraction</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#proving-correctness-of-the-transfer-functions-with-z3\">Proving correctness of the transfer functions with Z3</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#cases-where-this-style-of-z3-proof-doesnt-work\">Cases where this style of Z3 proof doesn't work</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#making-statements-about-precision\">Making Statements about Precision</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#using-the-abstract-domain-in-the-toy-optimizer-for-generalized-constant-folding\">Using the Abstract Domain in the Toy Optimizer for Generalized Constant Folding</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#using-the-knownbits-domain-for-conditional-peephole-rewrites\">Using the KnownBits Domain for Conditional Peephole Rewrites</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#conclusion\">Conclusion</a></li>\n</ul>\n</div>\n<h3 id=\"motivation\">Motivation</h3>\n<p>In many programs that do bit-manipulation of integers, some of the bits of the\ninteger variables of the program can be statically known. Here's a simple\nexample:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n...\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mi\">1</span>:\n<span class=\"w\">    </span>...\n<span class=\"k\">else</span>:\n<span class=\"w\">    </span>...\n</pre></div>\n\n<p>After the assignment <code>x = a | 1</code>, we know that the lowest bit of <code>x</code> must be <code>1</code>\n(the other bits are unknown) and an optimizer could remove the condition <code>x &amp; 1</code> by\nconstant-folding it to <code>1</code>.</p>\n<p>Another (more complicated) example is:</p>\n<div class=\"code\"><pre class=\"code literal-block\">assert i &amp; 0b111 == 0 # check that i is a multiple of 8\nj = i + 16\nassert j &amp; 0b111 == 0\n</pre></div>\n\n<p>This kind of code could e.g. happen in a <a href=\"https://docs.pydrofoil.org/en/latest/\">CPU\nemulator</a>, where <code>i</code> and <code>j</code> are\nintegers that represent emulated pointers, and the <code>assert</code>s are alignment\nchecks. The first assert implies that the lowest three bits of i must be <code>0</code>.\nAdding 16 to such a number produces a result where the lowest three bits are\nagain all <code>0</code>, therefore the second assert is always true. So we would like a\ncompiler to remove the second assert.</p>\n<p>Both of these will optimizations are doable with the help of the knownbits\nabstract domain that we'll discuss in the rest of the post.</p>\n<h3 id=\"the-knownbits-abstract-domain\">The Knownbits Abstract Domain</h3>\n<p>An abstract value of the knownbits domain needs to be able to store, for every\nbit of an integer variable in a program, whether it is known 0, known 1, or\nunknown. To represent\nthree different states, we need 2 bits, which we will call <code>one</code> and <code>unknown</code>.\nHere's the encoding:</p>\n<table>\n<thead>\n<tr>\n<th>one</th>\n<th>unknown</th>\n<th align=\"right\">knownbit</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td align=\"right\">0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td align=\"right\">1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td align=\"right\">?</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td align=\"right\">illegal</td>\n</tr>\n</tbody>\n</table>\n<p>The <code>unknown</code> bit is set if we don't know the value of the bit (\"?\"), the <code>one</code>\nbit is set if the bit is known to be a <code>1</code>. Since two bits are enough to encode\nfour different states, but we only need three, the combination of a set <code>one</code>\nbit and a set <code>unknown</code> is not allowed.</p>\n<p>We don't just want to encode a single bit, however. Instead, we want to do this\nfor all the bits of an integer variable. Therefore the instances of the abstract\ndomain get two integer fields <code>ones</code> and <code>unknowns</code>, where each pair of\ncorresponding bits encodes the knowledge about the corresponding bit of the\ninteger variable in the program.</p>\n<p>We can start implementing a Python class that works like this:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n\n<span class=\"nd\">@dataclass</span><span class=\"p\">(</span><span class=\"n\">eq</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">KnownBits</span><span class=\"p\">:</span>\n    <span class=\"n\">ones</span> <span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">unknowns</span> <span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__post_init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_well_formed</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_well_formed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># a bit cannot be both 1 and unknown</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"o\">&amp;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unknowns</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_constant</span><span class=\"p\">(</span><span class=\"n\">const</span> <span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\" Construct a KnownBits corresponding to a constant, where all bits</span>\n<span class=\"sd\">        are known.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_constant</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\" Check if the KnownBits instance represents a constant. \"\"\"</span>\n        <span class=\"c1\"># it's a constant if there are no unknowns</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unknowns</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n</pre></div>\n\n<p>We can also add some convenience properties. Sometimes it is easier to work\nwith an integer where all the <em>known</em> bits are set, or one where the positions\nof all the known zeros have a set bit:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">KnownBits</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">knowns</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\" return an integer where the known bits are set. \"\"\"</span>\n        <span class=\"c1\"># the knowns are just the unknowns, inverted</span>\n        <span class=\"k\">return</span> <span class=\"o\">~</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unknowns</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">zeros</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\" return an integer where the places that are known zeros have a bit</span>\n<span class=\"sd\">        set. \"\"\"</span>\n        <span class=\"c1\"># it's a 0 if it is known, but not 1</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">knowns</span> <span class=\"o\">&amp;</span> <span class=\"o\">~</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span>\n</pre></div>\n\n<p>Also, for debugging and for writing tests we want a way to print the known bits\nin a human-readable form, and also to have a way to construct a <code>KnownBits</code>\ninstance from a string. It's not important to understand the details of\n<code>__str__</code> or <code>from_str</code> for the rest of the post, so I'm putting them into a fold:</p>\n<details>\n<summary><code>KnownBits</code> from and to string conversions</summary>\n\n\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">KnownBits</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"KnownBits.from_constant(</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"si\">}</span><span class=\"s2\">)\"</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"KnownBits(</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"si\">}</span><span class=\"s2\">, </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unknowns</span><span class=\"si\">}</span><span class=\"s2\">)\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"n\">unknowns</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unknowns</span>\n        <span class=\"c1\"># construct the string representation right to left</span>\n        <span class=\"k\">while</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ones</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">unknowns</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span> <span class=\"c1\"># we leave off the leading known 0s</span>\n            <span class=\"k\">if</span> <span class=\"n\">ones</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">unknowns</span><span class=\"p\">:</span>\n                <span class=\"c1\"># -1 has all bits set in two's complement, so the leading</span>\n                <span class=\"c1\"># bits are all 1</span>\n                <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">)</span>\n                <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">\"...\"</span><span class=\"p\">)</span>\n                <span class=\"k\">break</span>\n            <span class=\"k\">if</span> <span class=\"n\">unknowns</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"c1\"># -1 has all bits set in two's complement, so the leading bits</span>\n                <span class=\"c1\"># are all ?</span>\n                <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">ones</span>\n                <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">\"?\"</span><span class=\"p\">)</span>\n                <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">\"...\"</span><span class=\"p\">)</span>\n                <span class=\"k\">break</span>\n            <span class=\"k\">if</span> <span class=\"n\">unknowns</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'?'</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">ones</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'0'</span><span class=\"p\">)</span>\n            <span class=\"n\">ones</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">unknowns</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">res</span><span class=\"p\">:</span>\n            <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'0'</span><span class=\"p\">)</span>\n        <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\" Construct a KnownBits instance that from a string. String can start</span>\n<span class=\"sd\">        with ...1 to mean that all higher bits are 1, or ...? to mean that all</span>\n<span class=\"sd\">        higher bits are unknown. Otherwise it is assumed that the higher bits</span>\n<span class=\"sd\">        are all 0. \"\"\"</span>\n        <span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"n\">unknowns</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\n        <span class=\"n\">startindex</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">\"...?\"</span><span class=\"p\">):</span>\n            <span class=\"n\">unknowns</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n            <span class=\"n\">startindex</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n        <span class=\"k\">elif</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">\"...1\"</span><span class=\"p\">):</span>\n            <span class=\"n\">ones</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n            <span class=\"n\">startindex</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n        <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">startindex</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)):</span>\n            <span class=\"n\">ones</span> <span class=\"o\">&lt;&lt;=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">unknowns</span> <span class=\"o\">&lt;&lt;=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"s1\">'1'</span><span class=\"p\">:</span>\n                <span class=\"n\">ones</span> <span class=\"o\">|=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">elif</span> <span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"s1\">'?'</span><span class=\"p\">:</span>\n                <span class=\"n\">unknowns</span> <span class=\"o\">|=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"n\">unknowns</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">all_unknown</span><span class=\"p\">():</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\" convenience constructor for the \"all bits unknown\" abstract value</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s2\">\"...?\"</span><span class=\"p\">)</span>\n</pre></div>\n\n\n\n</details>\n\n<p>And here's a <a href=\"https://pytest.org\">pytest</a>-style unit test for <code>str</code>:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">test_str</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_constant</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"s1\">'0'</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_constant</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"s1\">'101'</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mb\">0b10</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"s1\">'1?1'</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"mb\">0b1111</span><span class=\"p\">,</span> <span class=\"mb\">0b10</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"s1\">'...100?0'</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"mb\">0b1</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"s1\">'...?1'</span>\n</pre></div>\n\n<p>An instance of <code>KnownBits</code> represents a set of integers, namely those that match\nthe known bits stored in the instance. We can write a method <code>contains</code> that\ntakes a concrete <code>int</code> value and returns <code>True</code> if the value matches the\npattern of the known bits:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">KnownBits</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">contains</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\" Check whether the KnownBits instance contains the concrete integer</span>\n<span class=\"sd\">        `value`. \"\"\"</span>\n        <span class=\"c1\"># check whether value matches the bit pattern. in the places where we</span>\n        <span class=\"c1\"># know the bits, the value must agree with ones.</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span> <span class=\"o\">&amp;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">knowns</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span>\n</pre></div>\n\n<p>and a test:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">test_contains</span><span class=\"p\">():</span>\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'1?1'</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"mb\">0b111</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"mb\">0b101</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"mb\">0b110</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"mb\">0b011</span><span class=\"p\">)</span>\n\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'...?1'</span><span class=\"p\">)</span> <span class=\"c1\"># all odd numbers</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n\n<h3 id=\"transfer-functions\">Transfer Functions</h3>\n<p>Now that we have implemented the basics of the <code>KnownBits</code> class, we need to\nstart implementing the transfer functions. They are for computing what we know\nabout the <em>results</em> of an operation, given the knowledge we have about the bits\nof the arguments.</p>\n<p>We'll start with a simple unary operation, <code>invert(x)</code> (which is <code>~x</code> in Python\nand C syntax), which flips all the bits of at integer. If we know some bits of\nthe arguments, we can compute the corresponding bits of the result. The unknown\nbits remain unknown.</p>\n<p>Here's the code:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">KnownBits</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">abstract_invert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># self.zeros has bits set where the known 0s are in self</span>\n        <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unknowns</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>And a unit-test:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">test_invert</span><span class=\"p\">():</span>\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'01?01?01?'</span><span class=\"p\">)</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_invert</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'...10?10?10?'</span>\n\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'...?'</span><span class=\"p\">)</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_invert</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'...?'</span>\n</pre></div>\n\n<p>Before we continue with further transfer functions, we'll think about\ncorrectness of the transfer functions and build up some test infrastructure. To\ntest transfer functions, it's quite important to move being simple example-style\nunit tests. The state-space for more complicated binary transfer functions is\nextremely large and it's too easy to do something wrong in a corner case.\nTherefore we'll look at property-based-test for <code>KnownBits</code> next.</p>\n<h3 id=\"property-based-tests-with-hypothesis\">Property-based Tests with Hypothesis</h3>\n<p>We want to do property-based tests of <code>KnownBits</code>, to try\nmake it less likely that we'll get a corner-case in the implementation wrong.\nWe'll use <a href=\"https://hypothesis.readthedocs.io/en/latest/\">Hypothesis</a> for that.</p>\n<p>I can't give a decent introduction to Hypothesis here, but want to give a few\nhints about the API. Hypothesis is a way to run unit tests with randomly\ngenerated input. It provides <em>strategies</em> to describe the data that the test\nfunctions expects. Hypothesis provides primitive strategies (for things like\nintegers, strings, floats, etc) and ways to build composite strategies out of\nthe primitive ones.</p>\n<p>To be able to write the tests, we need to generate random <code>KnownBits</code> instances,\nand we also want an <code>int</code> instance that is a member of the <code>KnownBits</code> instance.\nWe generate tuples of <code>(KnownBits, int)</code> together, to ensure this property.\nWe'll ask Hypothesis to generate us a random concrete <code>int</code> as the concrete\nvalue, and then we'll also generate a second random <code>int</code> to use as the\n<code>unknown</code> masks (i.e. which bits of the concrete int we don't know in the\n<code>KnownBits</code> instance). Here's a function that takes two such ints and builds the\ntuple:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">build_knownbits_and_contained_number</span><span class=\"p\">(</span><span class=\"n\">concrete_value</span> <span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">unknowns</span> <span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n    <span class=\"c1\"># to construct a valid KnownBits instance, we need to mask off the unknown</span>\n    <span class=\"c1\"># bits</span>\n    <span class=\"n\">ones</span> <span class=\"o\">=</span> <span class=\"n\">concrete_value</span> <span class=\"o\">&amp;</span> <span class=\"o\">~</span><span class=\"n\">unknowns</span>\n    <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"n\">unknowns</span><span class=\"p\">),</span> <span class=\"n\">concrete_value</span>\n</pre></div>\n\n<p>We can turn this function into a hypothesis strategy to generate input data\nusing the <code>strategies.builds</code> function:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"kn\">from</span> <span class=\"nn\">hypothesis</span> <span class=\"kn\">import</span> <span class=\"n\">strategies</span><span class=\"p\">,</span> <span class=\"n\">given</span><span class=\"p\">,</span> <span class=\"n\">settings</span>\n\n<span class=\"n\">ints</span> <span class=\"o\">=</span> <span class=\"n\">strategies</span><span class=\"o\">.</span><span class=\"n\">integers</span><span class=\"p\">()</span>\n\n<span class=\"n\">random_knownbits_and_contained_number</span> <span class=\"o\">=</span> <span class=\"n\">strategies</span><span class=\"o\">.</span><span class=\"n\">builds</span><span class=\"p\">(</span>\n    <span class=\"n\">build_knownbits_and_contained_number</span><span class=\"p\">,</span>\n    <span class=\"n\">ints</span><span class=\"p\">,</span> <span class=\"n\">ints</span>\n<span class=\"p\">)</span>\n</pre></div>\n\n<p>One important special case of <code>KnownBits</code> are the constants, which contain only\na single concrete value. We'll also generate some of those specifically, and\nthen combine the <code>random_knownbits_and_contained_number</code> strategy with it:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">constant_knownbits</span> <span class=\"o\">=</span> <span class=\"n\">strategies</span><span class=\"o\">.</span><span class=\"n\">builds</span><span class=\"p\">(</span>\n    <span class=\"k\">lambda</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_constant</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">),</span> <span class=\"n\">value</span><span class=\"p\">),</span>\n    <span class=\"n\">ints</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">knownbits_and_contained_number</span> <span class=\"o\">=</span> <span class=\"n\">constant_knownbits</span> <span class=\"o\">|</span> <span class=\"n\">random_knownbits_and_contained_number</span>\n</pre></div>\n\n<p>Now we can write the first property-based tests, for the <code>KnownBits.contains</code>\nmethod:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_contains</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">):</span>\n    <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">t</span>\n    <span class=\"k\">assert</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>The <code>@given</code> decorator is used to tell Hypothesis which strategy to use to\ngenerate random data for the test function. Hypothesis will run the test with a\nnumber of random examples (100 by default). If it finds an error, it will try to\nminimize the example needed that demonstrates the problem, to try to make it\neasier to understand what is going wrong. It also saves all failing cases into\nan example database and tries them again on subsequent runs.</p>\n<p>This test is as much a check for whether we got the strategies right as it is\nfor the logic in <code>KnownBits.contains</code>. Here's an example output of random\nconcrete and abstract values that we are getting here:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"mf\">110000011001101</span><span class=\"w\"> </span><span class=\"mf\">...</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">???</span><span class=\"mf\">1</span>\n<span class=\"mf\">...1011011</span><span class=\"w\"> </span><span class=\"mf\">...1011011</span>\n<span class=\"mf\">...1001101110101000010010011111011</span><span class=\"w\"> </span><span class=\"mf\">...1001101110101000010010011111011</span>\n<span class=\"mf\">...1001101110101000010010011111011</span><span class=\"w\"> </span><span class=\"mf\">...100110111010100001</span><span class=\"err\">?</span><span class=\"mf\">010</span><span class=\"err\">?</span><span class=\"mf\">1</span><span class=\"err\">??</span><span class=\"mf\">1</span><span class=\"err\">??</span><span class=\"mf\">11</span>\n<span class=\"mf\">1000001101111101001011010011111101000011000111011001011111101</span><span class=\"w\"> </span><span class=\"mf\">1000001101111101001011010011111101000011000111011001011111101</span>\n<span class=\"mf\">1000001101111101001011010011111101000011000111011001011111101</span><span class=\"w\"> </span><span class=\"mf\">1000001101111101001011010011111101000011000111</span><span class=\"err\">????</span><span class=\"mf\">01</span><span class=\"err\">?</span><span class=\"mf\">11</span><span class=\"err\">?????</span><span class=\"mf\">1</span>\n<span class=\"mf\">1111100000010</span><span class=\"w\"> </span><span class=\"mf\">1111100000010</span>\n<span class=\"mf\">1111100000010</span><span class=\"w\"> </span><span class=\"mf\">...</span><span class=\"err\">?</span><span class=\"mf\">11111</span><span class=\"err\">?</span><span class=\"mf\">00000</span><span class=\"err\">??</span>\n<span class=\"mf\">110110</span><span class=\"w\"> </span><span class=\"mf\">110110</span>\n<span class=\"mf\">110110</span><span class=\"w\"> </span><span class=\"mf\">...</span><span class=\"err\">?</span><span class=\"mf\">00</span><span class=\"err\">?</span><span class=\"mf\">00</span><span class=\"err\">????</span><span class=\"mf\">11</span><span class=\"err\">??</span><span class=\"mf\">10</span>\n<span class=\"mf\">110110</span><span class=\"w\"> </span><span class=\"err\">??</span><span class=\"mf\">0</span><span class=\"err\">??</span><span class=\"mf\">0</span>\n<span class=\"mf\">...100010111011111</span><span class=\"w\"> </span><span class=\"mf\">...</span><span class=\"err\">?</span><span class=\"mf\">100</span><span class=\"err\">?</span><span class=\"mf\">10111</span><span class=\"err\">??</span><span class=\"mf\">111</span><span class=\"err\">?</span>\n<span class=\"mf\">...1000100000110001</span><span class=\"w\"> </span><span class=\"mf\">...</span><span class=\"err\">?</span><span class=\"mf\">000</span><span class=\"err\">?</span><span class=\"mf\">00000</span><span class=\"err\">??</span><span class=\"mf\">000</span><span class=\"err\">?</span>\n<span class=\"mf\">110000001110</span><span class=\"w\"> </span><span class=\"mf\">...</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">??</span><span class=\"mf\">000</span><span class=\"err\">?</span><span class=\"mf\">00</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">?</span><span class=\"mf\">0000000</span><span class=\"err\">?</span><span class=\"mf\">00</span><span class=\"err\">???</span><span class=\"mf\">0000</span><span class=\"err\">?????</span><span class=\"mf\">00</span><span class=\"err\">???</span><span class=\"mf\">000</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">?</span><span class=\"mf\">00</span><span class=\"err\">?</span><span class=\"mf\">01</span><span class=\"err\">?</span><span class=\"mf\">000</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">??</span><span class=\"mf\">1</span><span class=\"err\">??</span>\n<span class=\"mf\">110000001110</span><span class=\"w\"> </span><span class=\"err\">??</span><span class=\"mf\">000000</span><span class=\"err\">???</span><span class=\"mf\">0</span>\n<span class=\"mf\">1011011010000001110101001111000010001001011101010010010001000000010101010010001101110101111111010101010010101100110000011110000</span><span class=\"w\"> </span><span class=\"mf\">1011011010000001110101001111000010001001011101010010010001000000010101010010001101110101111111010101010010101100110000011110000</span>\n<span class=\"mf\">...1011010010010100</span><span class=\"w\"> </span><span class=\"mf\">...1011010010010100</span>\n<span class=\"mf\">...1011111110110011</span><span class=\"w\"> </span><span class=\"mf\">...1011111110110011</span>\n<span class=\"mf\">101000011110110</span><span class=\"w\"> </span><span class=\"mf\">101000011</span><span class=\"err\">?</span><span class=\"mf\">10</span><span class=\"err\">?</span><span class=\"mf\">1</span><span class=\"err\">?</span>\n<span class=\"mf\">100101</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"mf\">00</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">?</span>\n</pre></div>\n\n<p>That looks suitably random, but we might want to bias our random numbers a\nlittle bit towards common error values like small constants, powers of two, etc.\nLike this:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">INTEGER_WIDTH</span> <span class=\"o\">=</span> <span class=\"mi\">64</span>\n<span class=\"c1\"># some small integers</span>\n<span class=\"n\">ints_special</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">))</span>\n<span class=\"c1\"># powers of two</span>\n<span class=\"n\">ints_special</span> <span class=\"o\">=</span> <span class=\"n\">ints_special</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">INTEGER_WIDTH</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"c1\"># powers of two - 1</span>\n<span class=\"n\">ints_special</span> <span class=\"o\">=</span> <span class=\"n\">ints_special</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">((</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">INTEGER_WIDTH</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"c1\"># negative versions of what we have so far</span>\n<span class=\"n\">ints_special</span> <span class=\"o\">=</span> <span class=\"n\">ints_special</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">ints_special</span><span class=\"p\">)</span>\n<span class=\"c1\"># bit-flipped versions of what we have so far</span>\n<span class=\"n\">ints_special</span> <span class=\"o\">=</span> <span class=\"n\">ints_special</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">ints_special</span><span class=\"p\">)</span>\n<span class=\"n\">ints_special</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ints_special</span><span class=\"p\">)</span>\n<span class=\"c1\"># sort them (because hypothesis simplifies towards earlier elements in the list)</span>\n<span class=\"n\">ints_special</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">element</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">),</span> <span class=\"n\">element</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n\n<span class=\"n\">ints</span> <span class=\"o\">=</span> <span class=\"n\">strategies</span><span class=\"o\">.</span><span class=\"n\">sampled_from</span><span class=\"p\">(</span><span class=\"n\">ints_special</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">strategies</span><span class=\"o\">.</span><span class=\"n\">integers</span><span class=\"p\">()</span>\n</pre></div>\n\n<p>Now we get data like this:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"mf\">1110</span><span class=\"w\"> </span><span class=\"mf\">1110</span>\n<span class=\"mf\">...10000000000000000001</span><span class=\"w\"> </span><span class=\"mf\">...10000</span><span class=\"err\">??</span><span class=\"mf\">0</span><span class=\"err\">??</span><span class=\"mf\">0000</span><span class=\"err\">??</span><span class=\"mf\">00</span><span class=\"err\">?</span><span class=\"mf\">1</span>\n<span class=\"mf\">1</span><span class=\"w\"> </span><span class=\"err\">??</span><span class=\"mf\">0</span><span class=\"err\">??</span><span class=\"mf\">0000</span><span class=\"err\">??</span><span class=\"mf\">00</span><span class=\"err\">?</span><span class=\"mf\">1</span>\n<span class=\"mf\">1</span><span class=\"w\"> </span><span class=\"err\">?</span>\n<span class=\"mf\">...10101100</span><span class=\"w\"> </span><span class=\"mf\">...10101100</span>\n<span class=\"mf\">110000000011001010111011111111111111011110010001001100110001011</span><span class=\"w\"> </span><span class=\"mf\">...</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">?</span><span class=\"mf\">101</span><span class=\"err\">?</span>\n<span class=\"mf\">110000000011001010111011111111111111011110010001001100110001011</span><span class=\"w\"> </span><span class=\"err\">??</span><span class=\"mf\">00000000</span><span class=\"err\">??</span><span class=\"mf\">00</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">???</span><span class=\"mf\">0</span><span class=\"err\">??????????????</span><span class=\"mf\">0</span><span class=\"err\">????</span><span class=\"mf\">00</span><span class=\"err\">?</span><span class=\"mf\">000</span><span class=\"err\">?</span><span class=\"mf\">00</span><span class=\"err\">??</span><span class=\"mf\">00</span><span class=\"err\">??</span><span class=\"mf\">000</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">??</span>\n<span class=\"mf\">...1011111111111111111111111111</span><span class=\"w\"> </span><span class=\"mf\">...</span><span class=\"err\">?</span><span class=\"mf\">11</span><span class=\"err\">?</span><span class=\"mf\">11</span><span class=\"err\">??</span>\n<span class=\"mf\">...1011111111111111111111111111</span><span class=\"w\"> </span><span class=\"mf\">...</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">??????????????????????????</span>\n<span class=\"mf\">0</span><span class=\"w\"> </span><span class=\"mf\">...</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">??????????????????????????</span>\n<span class=\"mf\">101101</span><span class=\"w\"> </span><span class=\"mf\">101101</span>\n<span class=\"mf\">111111111111111111111111111111111111111111111</span><span class=\"w\"> </span><span class=\"mf\">111111111111111111111111111111111111111111111</span>\n<span class=\"mf\">10111</span><span class=\"w\"> </span><span class=\"mf\">10111</span>\n<span class=\"mf\">...101100</span><span class=\"w\"> </span><span class=\"mf\">...1</span><span class=\"err\">?</span><span class=\"mf\">111011</span><span class=\"err\">?</span><span class=\"mf\">0</span>\n<span class=\"mf\">101000</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"mf\">001010</span><span class=\"err\">?</span><span class=\"mf\">0</span>\n<span class=\"mf\">101000</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">?</span><span class=\"mf\">000</span>\n<span class=\"mf\">110010</span><span class=\"w\"> </span><span class=\"mf\">110010</span>\n<span class=\"mf\">...100111</span><span class=\"w\"> </span><span class=\"mf\">...100111</span>\n<span class=\"mf\">1111011010010</span><span class=\"w\"> </span><span class=\"mf\">1111011010010</span>\n<span class=\"mf\">...1000000000000000000000000000000000000</span><span class=\"w\"> </span><span class=\"mf\">...1000000000000000000000000000000000000</span>\n</pre></div>\n\n<p>We can also write a test that checks that the somewhat tricky logic in\n<code>__str__</code> and <code>from_str</code> is correct, by making sure that the two functions\nround-trip (ie converting a <code>KnownBits</code> to a string and then back to a\n<code>KnownBits</code> instance produces the same abstract value).</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_hypothesis_str_roundtrips</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">):</span>\n    <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span> <span class=\"o\">=</span> <span class=\"n\">t1</span>\n    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"p\">)</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"o\">==</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">ones</span>\n    <span class=\"k\">assert</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">unknowns</span> <span class=\"o\">==</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">unknowns</span>\n</pre></div>\n\n<p>Now let's actually apply this infrastructure to test <code>abstract_invert</code>.</p>\n<h3 id=\"when-are-transfer-functions-correct-how-do-we-test-them\">When are Transfer Functions Correct? How do we test them?</h3>\n<p>Abstract values, i.e. instances of <code>KnownBits</code> represent <em>sets</em> of concrete\nvalues. We want the transfer functions to compute <em>overapproximations</em> of the\nconcrete values. So if we have an arbitrary abstract value <code>k</code>, with a concrete\nnumber <code>n</code> that is a member of the abstract values (i.e.\n<code>k.contains(n) == True</code>) then the result of the concrete operation <code>op(n)</code>\n<strong>must</strong> be a member of the result of the abstract operation <code>k.abstract_op()</code>\n(i.e. <code>k.abstract_op().contains(op(n)) == True</code>).</p>\n<p>Checking the correctness/overapproximation property is a good match for\nhypothesis. Here's what the test for <code>abstract_invert</code> looks like:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_hypothesis_invert</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">):</span>\n    <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span> <span class=\"o\">=</span> <span class=\"n\">t1</span>\n    <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"o\">~</span><span class=\"n\">n1</span> <span class=\"c1\"># compute the real result</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_invert</span><span class=\"p\">()</span> <span class=\"c1\"># compute the abstract result</span>\n    <span class=\"k\">assert</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n2</span><span class=\"p\">)</span> <span class=\"c1\"># the abstract result must contain the real result</span>\n</pre></div>\n\n<p>This is the <em>only</em> condition needed for <code>abstract_invert</code> to be correct. If\n<code>abstract_invert</code> fulfils this property for every combination of abstract and\nconcrete value then <code>abstract_invert</code> is correct. Note however, that this test\ndoes not actually check whether <code>abstract_invert</code> gives us precise results. A\ncorrect (but imprecise) implementation of <code>abstract_invert</code> would simply return\na completely unknown result, regardless of what is known about the input\n<code>KnownBits</code>.</p>\n<p>The \"proper\" CS term for this notion of correctness is called <em>soundness</em>. The\ncorrectness condition on the transfer functions is called a <em>Galois\nconnection</em>. I won't go into any mathematical/technical details here, but\nwanted to at least mention the terms. I found <a href=\"https://web.njit.edu/~mjk76/\">Martin\nKellogg</a>'s\n<a href=\"https://web.njit.edu/~mjk76/teaching/cs684-sp24/assets/lecture-12.pdf#34\">slides</a>\nto be quite an approachable introduction to the Galois connection and how to\nshow soundness.</p>\n<h3 id=\"implementing-binary-transfer-functions\">Implementing Binary Transfer Functions</h3>\n<p>Now we have infrastructure in place for testing transfer functions with random\ninputs. With that we can start thinking about the more complicated case, that of\nbinary operations. Let's start with the simpler ones, <code>and</code> and <code>or</code>. For <code>and</code>,\nwe can know a <code>0</code> bit in the result if either of the input bits are known <code>0</code>;\nor we can know a <code>1</code> bit in the result if both input bits are known <code>1</code>.\nOtherwise the resulting bit is unknown. Let's look at all the combinations:</p>\n<div class=\"code\"><pre class=\"code literal-block\">and\ninput1: 000111???\ninput2: 01?01?01?\nresult: 00001?0??\n</pre></div>\n\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">KnownBits</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">abstract_and</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"n\">ones</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"o\">&amp;</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"c1\"># known ones</span>\n        <span class=\"n\">knowns</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">zeros</span> <span class=\"o\">|</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">zeros</span> <span class=\"o\">|</span> <span class=\"n\">ones</span>\n        <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">knowns</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Here's an example unit-test and a property-based test for <code>and</code>:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">test_and</span><span class=\"p\">():</span>\n    <span class=\"c1\"># test all combinations of 0, 1, ? in one example</span>\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'01?01?01?'</span><span class=\"p\">)</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'000111???'</span><span class=\"p\">)</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_and</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>     <span class=\"c1\"># should be: 0...00001?0??</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span> <span class=\"o\">==</span>   <span class=\"s2\">\"1?0??\"</span>\n\n<span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">,</span> <span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_hypothesis_and</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">t2</span><span class=\"p\">):</span>\n    <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span> <span class=\"o\">=</span> <span class=\"n\">t1</span>\n    <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">t2</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_and</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">n3</span> <span class=\"o\">=</span> <span class=\"n\">n1</span> <span class=\"o\">&amp;</span> <span class=\"n\">n2</span>\n    <span class=\"k\">assert</span> <span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n3</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>To implement <code>or</code> is pretty similar. The result is known <code>1</code> where either of the\ninputs is <code>1</code>. The result is known <code>0</code> where both inputs are known <code>0</code>, and <code>?</code>\notherwise.</p>\n<div class=\"code\"><pre class=\"code literal-block\">or\ninput1: 000111???\ninput2: 01?01?01?\nresult: 01?111?1?\n</pre></div>\n\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">KnownBits</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">abstract_or</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"n\">ones</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"o\">|</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">ones</span>\n        <span class=\"n\">zeros</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">zeros</span> <span class=\"o\">&amp;</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">zeros</span>\n        <span class=\"n\">knowns</span> <span class=\"o\">=</span> <span class=\"n\">ones</span> <span class=\"o\">|</span> <span class=\"n\">zeros</span>\n        <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">knowns</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Here's an example unit-test and a property-based test for <code>or</code>:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">test_or</span><span class=\"p\">():</span>\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'01?01?01?'</span><span class=\"p\">)</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'000111???'</span><span class=\"p\">)</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_or</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>     <span class=\"c1\"># should be:  0...01?111?1?</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span> <span class=\"o\">==</span>   <span class=\"s2\">\"1?111?1?\"</span>\n\n<span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">,</span> <span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_hypothesis_or</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">t2</span><span class=\"p\">):</span>\n    <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span> <span class=\"o\">=</span> <span class=\"n\">t1</span>\n    <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">t2</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_or</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">n3</span> <span class=\"o\">=</span> <span class=\"n\">n1</span> <span class=\"o\">|</span> <span class=\"n\">n2</span>\n    <span class=\"k\">assert</span> <span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n3</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Implementing support for <code>abstract_xor</code> is relatively simple, and left as an\nexercise :-).</p>\n<h3 id=\"addition-and-subtraction\">Addition and Subtraction</h3>\n<p><code>invert</code>, <code>and</code>, and <code>or</code> are relatively simple transfer functions to write,\nbecause they compose over the individual bits of the integers. The arithmetic\nfunctions <code>add</code> and <code>sub</code> are significantly harder, because of carries and\nborrows. Coming up with the formulas for them and gaining an intuitive\nunderstanding is quite tricky and involves carefully going through a few\nexamples with pen and paper. When implementing this in PyPy, Nico and I didn't\ncome up with the implementation ourselves, but instead took them from the\n<a href=\"https://arxiv.org/abs/2105.05398\">Tristate Numbers</a> paper. Here's the code,\nwith example tests and hypothesis tests:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">KnownBits</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">abstract_add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"n\">sum_ones</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"o\">+</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">ones</span>\n        <span class=\"n\">sum_unknowns</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unknowns</span> <span class=\"o\">+</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">unknowns</span>\n        <span class=\"n\">all_carries</span> <span class=\"o\">=</span> <span class=\"n\">sum_ones</span> <span class=\"o\">+</span> <span class=\"n\">sum_unknowns</span>\n        <span class=\"n\">ones_carries</span> <span class=\"o\">=</span> <span class=\"n\">all_carries</span> <span class=\"o\">^</span> <span class=\"n\">sum_ones</span>\n        <span class=\"n\">unknowns</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unknowns</span> <span class=\"o\">|</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">unknowns</span> <span class=\"o\">|</span> <span class=\"n\">ones_carries</span>\n        <span class=\"n\">ones</span> <span class=\"o\">=</span> <span class=\"n\">sum_ones</span> <span class=\"o\">&amp;</span> <span class=\"o\">~</span><span class=\"n\">unknowns</span>\n        <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"n\">unknowns</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">abstract_sub</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"n\">diff_ones</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"o\">-</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">ones</span>\n        <span class=\"n\">val_borrows</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">diff_ones</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unknowns</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"p\">(</span><span class=\"n\">diff_ones</span> <span class=\"o\">-</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">unknowns</span><span class=\"p\">)</span>\n        <span class=\"n\">unknowns</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unknowns</span> <span class=\"o\">|</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">unknowns</span> <span class=\"o\">|</span> <span class=\"n\">val_borrows</span>\n        <span class=\"n\">ones</span> <span class=\"o\">=</span> <span class=\"n\">diff_ones</span> <span class=\"o\">&amp;</span> <span class=\"o\">~</span><span class=\"n\">unknowns</span>\n        <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"n\">unknowns</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_add</span><span class=\"p\">():</span>\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'0?10?10?10'</span><span class=\"p\">)</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'0???111000'</span><span class=\"p\">)</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_add</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span> <span class=\"o\">==</span>   <span class=\"s2\">\"?????01?10\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_sub</span><span class=\"p\">():</span>\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'0?10?10?10'</span><span class=\"p\">)</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'0???111000'</span><span class=\"p\">)</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_sub</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span> <span class=\"o\">==</span>   <span class=\"s2\">\"...?11?10\"</span>\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span>    <span class=\"s1\">'...1?10?10?10'</span><span class=\"p\">)</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'...10000???111000'</span><span class=\"p\">)</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_sub</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span> <span class=\"o\">==</span>   <span class=\"s2\">\"111?????11?10\"</span>\n\n<span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">,</span> <span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_hypothesis_add</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">t2</span><span class=\"p\">):</span>\n    <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span> <span class=\"o\">=</span> <span class=\"n\">t1</span>\n    <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">t2</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_add</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">n3</span> <span class=\"o\">=</span> <span class=\"n\">n1</span> <span class=\"o\">+</span> <span class=\"n\">n2</span>\n    <span class=\"k\">assert</span> <span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n3</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">,</span> <span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_hypothesis_sub</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">t2</span><span class=\"p\">):</span>\n    <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span> <span class=\"o\">=</span> <span class=\"n\">t1</span>\n    <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">t2</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_sub</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">n3</span> <span class=\"o\">=</span> <span class=\"n\">n1</span> <span class=\"o\">-</span> <span class=\"n\">n2</span>\n    <span class=\"k\">assert</span> <span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n3</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Now we are in a pretty good situation, and have implemented abstract versions\nfor a bunch of important arithmetic and binary functions. What's also surprising\nis that the implementation of all of the transfer functions is quite efficient.\nWe didn't have to write loops over the individual bits at all, instead we found\nclosed form expressions using primitive operations on the underlying integers\n<code>ones</code> and <code>unknowns</code>. This means that computing the results of abstract\noperations is quite efficient, which is important when using the abstract domain\nin the context of a JIT compiler.</p>\n<h3 id=\"proving-correctness-of-the-transfer-functions-with-z3\">Proving correctness of the transfer functions with Z3</h3>\n<p>As one can probably tell from my recent posts, I've been thinking about\ncompiler correctness a lot. Getting the transfer functions absolutely\ncorrect is really crucial, because a bug in them would lead to miscompilation of\nPython code when the abstract domain is added to the JIT. While the randomized\ntests are great, it's still entirely possible for them to miss bugs. The state\nspace for the arguments of a binary transfer function is <code>3**64 * 3**64</code>, and if\nonly a small part of that contains wrong behaviour it would be really unlikely\nfor us to find it with random tests by chance. Therefore I was reluctant to\nmerge the PyPy branch that contained the new abstract domain for a long time.</p>\n<p>To increase our confidence in the correctness of the transfer functions further,\nwe can use Z3 to <em>prove</em> their correctness, which gives us much stronger\nguarantees (not 100%, obviously). In this subsection I will show how to do that.</p>\n<p>Here's an attempt to do this manually in the Python repl:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">z3</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">solver</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Solver</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># like last blog post, proof by failing to find counterexamples</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">prove</span><span class=\"p\">(</span><span class=\"n\">cond</span><span class=\"p\">):</span><span class=\"w\"> </span><span class=\"k\">assert</span><span class=\"w\"> </span><span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Not</span><span class=\"p\">(</span><span class=\"n\">cond</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">unsat</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># let's set up a z3 bitvector variable for an arbitrary concrete value</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">n1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s1\">'concrete_value'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">n1</span>\n<span class=\"n\">concrete_value</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># due to operator overloading we can manipulate z3 formulas</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">n2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"n\">n1</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">n2</span>\n<span class=\"o\">~</span><span class=\"n\">concrete_value</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># now z3 bitvector variables for the ones and zeros fields</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">ones</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s1\">'abstract_ones'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">unknowns</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s1\">'abstract_unknowns'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># we construct a KnownBits instance with the z3 variables</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">k1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">ones</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">unknowns</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># due to operator overloading we can call the methods on k1:</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">k2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_invert</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">ones</span>\n<span class=\"o\">~</span><span class=\"n\">abstract_unknowns</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"n\">abstract_ones</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">unknowns</span>\n<span class=\"n\">abstract_unknowns</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># here's the correctness condition that we want to prove:</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n2</span><span class=\"p\">)</span>\n<span class=\"o\">~</span><span class=\"n\">concrete_value</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"n\">abstract_unknowns</span><span class=\"w\"> </span><span class=\"o\">==</span>\n<span class=\"o\">~</span><span class=\"n\">abstract_unknowns</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"n\">abstract_ones</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># let's try</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n2</span><span class=\"p\">))</span>\n<span class=\"n\">Traceback</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">most</span><span class=\"w\"> </span><span class=\"n\">recent</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"w\">  </span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ow\">in</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n<span class=\"w\">  </span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ow\">in</span><span class=\"w\"> </span><span class=\"n\">prove</span>\n<span class=\"n\">AssertionError</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># it doesn't work! let's look at the counterexample to see why:</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"n\">abstract_unknowns</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\"> </span><span class=\"n\">abstract_ones</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\"> </span><span class=\"n\">concrete_value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># we can build a KnownBits instance with the values in the</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># counterexample:</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"c1\"># concrete result</span>\n<span class=\"o\">-</span><span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">counter_example_k1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">counter_example_k1</span>\n<span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_constant</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">counter_example_k2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">counter_example_k1</span><span class=\"o\">.</span><span class=\"n\">abstract_invert</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">counter_example_k2</span>\n<span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_constant</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># let's check the failing condition</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">counter_example_k2</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n</pre></div>\n\n<p>What is the problem here? We didn't tell Z3 that <code>n1</code> was supposed to be a\nmember of <code>k1</code>. We can add this as a precondition to the solver, and then the\nprove works:</p>\n<div class=\"code\"><pre class=\"code literal-block\">&gt;&gt;&gt;&gt; solver.add(k1.contains(n1))\n&gt;&gt;&gt;&gt; prove(k2.contains(n2)) # works!\n</pre></div>\n\n<p>This is super cool! It's really a proof about the actual implementation, because\nwe call the implementation methods directly, and due to the operator overloading\nthat Z3 does we can be sure that we are actually checking a formula that\ncorresponds to the Python code. This eliminates one source of errors in formal\nmethods.</p>\n<p>Doing the proof manually on the Python REPL is kind of annoying though, and we\nalso would like to make sure that the proofs are re-done when we change the\ncode. What we would really like to do is writing the proofs as a unit-test that\nwe can run while developing and in CI. Doing this is possible, and the unit\ntests that really perform proofs look pleasingly similar to the\nHypothesis-based ones.</p>\n<p>First we need to set up a bit of infrastructure:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">INTEGER_WIDTH</span> <span class=\"o\">=</span> <span class=\"mi\">64</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">BitVec</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">BitVecVal</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVecVal</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">z3_setup_variables</span><span class=\"p\">():</span>\n    <span class=\"c1\"># instantiate a solver</span>\n    <span class=\"n\">solver</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Solver</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># a Z3 variable for the first concrete value</span>\n    <span class=\"n\">n1</span> <span class=\"o\">=</span> <span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s2\">\"n1\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># a KnownBits instances that uses Z3 variables as its ones and unknowns,</span>\n    <span class=\"c1\"># representing the first abstract value</span>\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s2\">\"n1_ones\"</span><span class=\"p\">),</span> <span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s2\">\"n1_unkowns\"</span><span class=\"p\">))</span>\n    <span class=\"c1\"># add the precondition to the solver that the concrete value n1 must be a</span>\n    <span class=\"c1\"># member of the abstract value k1</span>\n    <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># a Z3 variable for the second concrete value</span>\n    <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s2\">\"n2\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># a KnownBits instances for the second abstract value</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s2\">\"n2_ones\"</span><span class=\"p\">),</span> <span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s2\">\"n2_unkowns\"</span><span class=\"p\">))</span>\n    <span class=\"c1\"># add the precondition linking n2 and k2 to the solver</span>\n    <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n2</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">prove</span><span class=\"p\">(</span><span class=\"n\">cond</span><span class=\"p\">,</span> <span class=\"n\">solver</span><span class=\"p\">):</span>\n    <span class=\"n\">z3res</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Not</span><span class=\"p\">(</span><span class=\"n\">cond</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"n\">z3res</span> <span class=\"o\">!=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">unsat</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">z3res</span> <span class=\"o\">==</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">sat</span> <span class=\"c1\"># can't be timeout, we set no timeout</span>\n        <span class=\"c1\"># make the model with the counterexample global, to make inspecting the</span>\n        <span class=\"c1\"># bug easier when running pytest --pdb</span>\n        <span class=\"k\">global</span> <span class=\"n\">model</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"n1=</span><span class=\"si\">{</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">, n2=</span><span class=\"si\">{</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">n2</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">counter_example_k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_signed_long</span><span class=\"p\">(),</span>\n                                       <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">unknowns</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_signed_long</span><span class=\"p\">())</span>\n        <span class=\"n\">counter_example_k2</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_signed_long</span><span class=\"p\">(),</span>\n                                       <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">unknowns</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_signed_long</span><span class=\"p\">())</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"k1=</span><span class=\"si\">{</span><span class=\"n\">counter_example_k1</span><span class=\"si\">}</span><span class=\"s2\">, k2=</span><span class=\"si\">{</span><span class=\"n\">counter_example_k2</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"but </span><span class=\"si\">{</span><span class=\"n\">cond</span><span class=\"si\">=}</span><span class=\"s2\"> evaluates to </span><span class=\"si\">{</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">cond</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">())</span>\n</pre></div>\n\n<p>And then we can write proof-unit-tests like this:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">test_z3_abstract_invert</span><span class=\"p\">():</span>\n    <span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">z3_setup_variables</span><span class=\"p\">()</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_invert</span><span class=\"p\">()</span>\n    <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"o\">~</span><span class=\"n\">n1</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n2</span><span class=\"p\">),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_z3_abstract_and</span><span class=\"p\">():</span>\n    <span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">z3_setup_variables</span><span class=\"p\">()</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_and</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">n3</span> <span class=\"o\">=</span> <span class=\"n\">n1</span> <span class=\"o\">&amp;</span> <span class=\"n\">n2</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n3</span><span class=\"p\">),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_z3_abstract_or</span><span class=\"p\">():</span>\n    <span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">z3_setup_variables</span><span class=\"p\">()</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_or</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">n3</span> <span class=\"o\">=</span> <span class=\"n\">n1</span> <span class=\"o\">|</span> <span class=\"n\">n2</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n3</span><span class=\"p\">),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_z3_abstract_add</span><span class=\"p\">():</span>\n    <span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">z3_setup_variables</span><span class=\"p\">()</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_add</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">n3</span> <span class=\"o\">=</span> <span class=\"n\">n1</span> <span class=\"o\">+</span> <span class=\"n\">n2</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n3</span><span class=\"p\">),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_z3_abstract_sub</span><span class=\"p\">():</span>\n    <span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">z3_setup_variables</span><span class=\"p\">()</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_sub</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">n3</span> <span class=\"o\">=</span> <span class=\"n\">n1</span> <span class=\"o\">-</span> <span class=\"n\">n2</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n3</span><span class=\"p\">),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>It's possible to write a bit more Python-metaprogramming-magic and unify the\nHypothesis and Z3 tests into the same test definition.<sup id=\"fnref:proof_bitwidths\"><a class=\"footnote-ref\" href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#fn:proof_bitwidths\">1</a></sup></p>\n<h3 id=\"cases-where-this-style-of-z3-proof-doesnt-work\">Cases where this style of Z3 proof doesn't work</h3>\n<p>Unfortunately the approach described in the previous section only works for a\nvery small number of cases. It breaks down as soon as the <code>KnownBits</code> methods\nthat we're calling contain any <code>if</code> conditions (including hidden ones like\nthe short-circuiting <code>and</code> and <code>or</code> in Python). Let's look at an example and\nimplement <code>abstract_eq</code>. <code>eq</code> is supposed to be an operation that compares two\nintegers and returns <code>0</code> or <code>1</code> if they are different or equal, respectively.\nImplementing this in knownbits looks like this (with example and hypothesis\ntests):</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">KnownBits</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">abstract_eq</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"c1\"># the result is a 0, 1, or ?</span>\n\n        <span class=\"c1\"># if they are both the same constant, they must be equal</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_constant</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"c1\"># check whether we have known disagreeing bits, then we know the result</span>\n        <span class=\"c1\"># is 0</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_disagrees</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_constant</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># an unknown boolean</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_disagrees</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"c1\"># check whether the bits disagree in any place where both are known</span>\n        <span class=\"n\">both_known</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">knowns</span> <span class=\"o\">&amp;</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">knowns</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"o\">&amp;</span> <span class=\"n\">both_known</span> <span class=\"o\">!=</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"o\">&amp;</span> <span class=\"n\">both_known</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_eq</span><span class=\"p\">():</span>\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'...?'</span><span class=\"p\">)</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'...?'</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_eq</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"s1\">'?'</span>\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_constant</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_eq</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"s1\">'1'</span>\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_constant</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_constant</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_eq</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"s1\">'0'</span>\n\n<span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">,</span> <span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_hypothesis_eq</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">t2</span><span class=\"p\">):</span>\n    <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span> <span class=\"o\">=</span> <span class=\"n\">t1</span>\n    <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">t2</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_eq</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">n1</span> <span class=\"o\">==</span> <span class=\"n\">n2</span><span class=\"p\">))</span>\n</pre></div>\n\n<p>Trying to do the proof in the same style as before breaks:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"o\">&gt;&gt;&gt;&gt;</span> <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_eq</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"knownbits.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">246</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">abstract_eq</span>\n    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_disagrees</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"venv/site-packages/z3/z3.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">381</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__bool__</span>\n    <span class=\"k\">raise</span> <span class=\"n\">Z3Exception</span><span class=\"p\">(</span><span class=\"s2\">\"Symbolic expressions cannot be cast to concrete Boolean values.\"</span><span class=\"p\">)</span>\n<span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">z3types</span><span class=\"o\">.</span><span class=\"n\">Z3Exception</span><span class=\"p\">:</span> <span class=\"n\">Symbolic</span> <span class=\"n\">expressions</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">cast</span> <span class=\"n\">to</span> <span class=\"n\">concrete</span> <span class=\"n\">Boolean</span> <span class=\"n\">values</span><span class=\"o\">.</span>\n</pre></div>\n\n<p>We cannot call <code>abstract_eq</code> on a <code>KnownBits</code> with Z3 variables as fields,\nbecause once we hit an <code>if</code> statement, the whole approach of relying on the\noperator overloading breaks down. Z3 doesn't actually parse the Python code or\nanything advanced like that, we rather build an expression only by running the\ncode and letting the Z3 formulas build up.</p>\n<p>To still prove the correctness of <code>abstract_eq</code> we need to manually transform\nthe control flow logic of the function into a Z3 formula that uses the <code>z3.If</code>\nexpression, using a small helper function:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">z3_cond</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">trueval</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">falseval</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">If</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">BitVecVal</span><span class=\"p\">(</span><span class=\"n\">trueval</span><span class=\"p\">),</span> <span class=\"n\">BitVecVal</span><span class=\"p\">(</span><span class=\"n\">falseval</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">z3_abstract_eq</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">):</span>\n    <span class=\"c1\"># follow the *logic* of abstract_eq, we can't call it due to the ifs in it</span>\n    <span class=\"n\">case1cond</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">(),</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">(),</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"o\">==</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">)</span>\n    <span class=\"n\">case2cond</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">_disagrees</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># ones is 1 in the first case, 0 otherwise</span>\n    <span class=\"n\">ones</span> <span class=\"o\">=</span> <span class=\"n\">z3_cond</span><span class=\"p\">(</span><span class=\"n\">case1cond</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># in the first two cases, unknowns is 0, 1 otherwise</span>\n    <span class=\"n\">unknowns</span> <span class=\"o\">=</span> <span class=\"n\">z3_cond</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Or</span><span class=\"p\">(</span><span class=\"n\">case1cond</span><span class=\"p\">,</span> <span class=\"n\">case2cond</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"n\">unknowns</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_z3_abstract_eq_logic</span><span class=\"p\">():</span>\n    <span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">z3_setup_variables</span><span class=\"p\">()</span>\n    <span class=\"n\">n3</span> <span class=\"o\">=</span> <span class=\"n\">z3_cond</span><span class=\"p\">(</span><span class=\"n\">n1</span> <span class=\"o\">==</span> <span class=\"n\">n2</span><span class=\"p\">)</span> <span class=\"c1\"># concrete result</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">z3_abstract_eq</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n3</span><span class=\"p\">),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>This proof works. It is a lot less satisfying than the previous ones though,\nbecause we could have done an error in the manual transcription from Python code\nto Z3 formulas (there are possibly more heavy-handed approaches where we do\nthis transformation more automatically using e.g. the <code>ast</code> module to analyze\nthe source code, but that's a much more complicated researchy project). To\nlessen this problem somewhat we can factor out the parts of the logic that don't\nhave any conditions into small helper methods (like <code>_disagrees</code> in this\nexample) and use them in the manual conversion of the code to Z3 formulas.<sup id=\"fnref:tests_vs_proofs\"><a class=\"footnote-ref\" href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#fn:tests_vs_proofs\">2</a></sup></p>\n<p>The final condition that Z3 checks, btw, is this one:</p>\n<div class=\"code\"><pre class=\"code literal-block\">If(n1 == n2, 1, 0) &amp;\n~If(Or(And(n1_unkowns == 0,\n           n2_unkowns == 0,\n           n1_ones == n2_ones),\n       n1_ones &amp; ~n1_unkowns &amp; ~n2_unkowns !=\n       n2_ones &amp; ~n1_unkowns &amp; ~n2_unkowns),\n    0, 1) ==\nIf(And(n1_unkowns == 0, n2_unkowns == 0, n1_ones == n2_ones),\n   1, 0)\n</pre></div>\n\n<h3 id=\"making-statements-about-precision\">Making Statements about Precision</h3>\n<p>So far we have only used Z3 to prove statements about correctness, i.e. that\nour abstract operations overapproximate what can happen with concrete values.\nWhile proving this property is essential if we want to avoid miscompilation,\ncorrectness alone is not a very strong constraint on the implementation of our\nabstract transfer functions. We could simply return <code>Knownbits.unknowns()</code> for\nevery <code>abstract_*</code> method and the resulting overapproximation would be correct,\nbut useless in practice.</p>\n<p>It's much harder to make statements about whether the transfer functions are\nmaximally precise. There are two aspects of precision I want to discuss in this\nsection, however.</p>\n<p>The first aspect is that we would really like it if the transfer functions\ncompute the maximally precise results for singleton sets. If all abstract\narguments of an operations are constants, i.e. contain only a single concrete\nelement, then we know that the resulting set also has only a single element. We\ncan prove that all our transfer functions have this property:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">test_z3_prove_constant_folding</span><span class=\"p\">():</span>\n    <span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">z3_setup_variables</span><span class=\"p\">()</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_invert</span><span class=\"p\">()</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Implies</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">(),</span>\n                     <span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_and</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Implies</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">(),</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()),</span>\n                     <span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_or</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Implies</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">(),</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()),</span>\n                     <span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_sub</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Implies</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">(),</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()),</span>\n                     <span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">z3_abstract_eq</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Implies</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">(),</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()),</span>\n                     <span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Proving with Z3 that the transfer functions are maximally precise for\nnon-constant arguments seems to be relatively hard. I tried a few completely\nrigorous approaches and failed. The paper <a href=\"https://arxiv.org/pdf/2105.05398\">Sound, Precise, and Fast Abstract\nInterpretation with Tristate Numbers</a>\ncontains an optimality proof for the transfer functions of addition and\nsubtraction, so we can be certain that they are as precise as is\npossible.</p>\n<p>I still want to show an approach for trying to find concrete examples of\nabstract values that are less precise than they could be, using a combination\nof Hypothesis and Z3. The idea is to use hypothesis to pick random abstract\nvalues. Then we compute the abstract result using our transfer function.\nAfterwards we can ask Z3 to find us an abstract result that is better than the\none our transfer function produced. If Z3 finds a better abstract result, we\nhave a concrete example of imprecision for our transfer function. Those tests\naren't strict proofs, because they rely on generating random abstract values,\nbut they can still be valuable (not for the transfer functions in this blog\npost, which are all optimal).</p>\n<p>Here is what the code looks like (this is a little bit bonus content, I'll not\nexplain the details and can only hope that the comments are somewhat helpful):</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"n\">random_knownbits_and_contained_number</span><span class=\"p\">,</span> <span class=\"n\">random_knownbits_and_contained_number</span><span class=\"p\">)</span>\n<span class=\"nd\">@settings</span><span class=\"p\">(</span><span class=\"n\">deadline</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_check_precision</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">t2</span><span class=\"p\">):</span>\n    <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span> <span class=\"o\">=</span> <span class=\"n\">t1</span>\n    <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">t2</span>\n    <span class=\"c1\"># apply transfer function</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_add</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">example_res</span> <span class=\"o\">=</span> <span class=\"n\">n1</span> <span class=\"o\">+</span> <span class=\"n\">n2</span>\n\n    <span class=\"c1\"># try to find a better version of k3 with Z3</span>\n    <span class=\"n\">solver</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Solver</span><span class=\"p\">()</span>\n    <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">\"timeout\"</span><span class=\"p\">,</span> <span class=\"mi\">8000</span><span class=\"p\">)</span>\n\n    <span class=\"n\">var1</span> <span class=\"o\">=</span> <span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s1\">'v1'</span><span class=\"p\">)</span>\n    <span class=\"n\">var2</span> <span class=\"o\">=</span> <span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s1\">'v2'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">ones</span> <span class=\"o\">=</span> <span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s1\">'ones'</span><span class=\"p\">)</span>\n    <span class=\"n\">unknowns</span> <span class=\"o\">=</span> <span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s1\">'unknowns'</span><span class=\"p\">)</span>\n    <span class=\"n\">better_k3</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"n\">unknowns</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">k3</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># we're trying to find an example for a better k3, so we use check, without</span>\n    <span class=\"c1\"># negation:</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span>\n        <span class=\"c1\"># better_k3 should be a valid knownbits instance</span>\n        <span class=\"n\">better_k3</span><span class=\"o\">.</span><span class=\"n\">is_well_formed</span><span class=\"p\">(),</span>\n        <span class=\"c1\"># it should be better than k3, ie there are known bits in better_k3</span>\n        <span class=\"c1\"># that we don't have in k3</span>\n        <span class=\"n\">better_k3</span><span class=\"o\">.</span><span class=\"n\">knowns</span> <span class=\"o\">&amp;</span> <span class=\"o\">~</span><span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">knowns</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"c1\"># now encode the correctness condition for better_k3 with a ForAll:</span>\n        <span class=\"c1\"># for all concrete values var1 and var2, it must hold that if</span>\n        <span class=\"c1\"># var1 is in k1 and var2 is in k2 it follows that var1 + var2 is in</span>\n        <span class=\"c1\"># better_k3</span>\n        <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">ForAll</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"n\">var1</span><span class=\"p\">,</span> <span class=\"n\">var2</span><span class=\"p\">],</span>\n        <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Implies</span><span class=\"p\">(</span>\n            <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">var1</span><span class=\"p\">),</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">var2</span><span class=\"p\">)),</span>\n            <span class=\"n\">better_k3</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">var1</span> <span class=\"o\">+</span> <span class=\"n\">var2</span><span class=\"p\">)))))</span>\n    <span class=\"c1\"># if this query is satisfiable, we have found a better result for the</span>\n    <span class=\"c1\"># abstract_add</span>\n    <span class=\"k\">if</span> <span class=\"n\">res</span> <span class=\"o\">==</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">sat</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">()</span>\n        <span class=\"n\">rk3</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">ones</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_signed_long</span><span class=\"p\">(),</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">unknowns</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_signed_long</span><span class=\"p\">())</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"better\"</span><span class=\"p\">,</span> <span class=\"n\">rk3</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"mi\">0</span>\n    <span class=\"k\">if</span> <span class=\"n\">res</span> <span class=\"o\">==</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">unknown</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"timeout\"</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>It does not actually fail for <code>abstract_add</code> (nor the other abstract\nfunctions). To see the test failing we can add some imprecision to the\nimplementation of <code>abstract_add</code> to see Hypothesis and Z3 find examples of\nvalues that are not optimally precise (for example by setting some bits\nof <code>unknowns</code> in the implementation of <code>abstract_add</code> unconditionally).</p>\n<h3 id=\"using-the-abstract-domain-in-the-toy-optimizer-for-generalized-constant-folding\">Using the Abstract Domain in the Toy Optimizer for Generalized Constant Folding</h3>\n<p>Now after all this work we can finally actually use the knownbits abstract\ndomain in the toy optimizer. The code for this follows <a href=\"https://bernsteinbear.com/blog/toy-abstract-interpretation/\">Max' intro post about\nabstract interpretation</a>\nquite closely.</p>\n<p>For completeness sake, in the fold there's the basic infrastructure classes\nthat make up the IR again (they are identical or at least extremely close to\nthe previous toy posts).</p>\n<details>\n<summary>toy infrastructure</summary>\n\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">Value</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">\"abstract\"</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@dataclass</span><span class=\"p\">(</span><span class=\"n\">eq</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Operation</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">args</span> <span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Value</span><span class=\"p\">]</span>\n\n    <span class=\"n\">forwarded</span> <span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Value</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Value</span><span class=\"p\">:</span>\n        <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"bp\">self</span>\n        <span class=\"k\">while</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">Operation</span><span class=\"p\">):</span>\n            <span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">forwarded</span>\n            <span class=\"k\">if</span> <span class=\"nb\">next</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">op</span>\n            <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n        <span class=\"k\">return</span> <span class=\"n\">op</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">make_equal_to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"p\">:</span> <span class=\"n\">Value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">forwarded</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n\n<span class=\"nd\">@dataclass</span><span class=\"p\">(</span><span class=\"n\">eq</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Constant</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">):</span>\n    <span class=\"n\">value</span> <span class=\"p\">:</span> <span class=\"nb\">object</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Block</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__getattr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">opname</span><span class=\"p\">):</span>\n        <span class=\"k\">def</span> <span class=\"nf\">wraparg</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span> <span class=\"n\">Value</span><span class=\"p\">):</span>\n                <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">arg</span>\n        <span class=\"k\">def</span> <span class=\"nf\">make_op</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n            <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">Operation</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span><span class=\"n\">wraparg</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">args</span><span class=\"p\">])</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">op</span>\n        <span class=\"k\">return</span> <span class=\"n\">make_op</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">bb_to_str</span><span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"p\">:</span> <span class=\"n\">Block</span><span class=\"p\">,</span> <span class=\"n\">varprefix</span> <span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"var\"</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">arg_to_str</span><span class=\"p\">(</span><span class=\"n\">arg</span> <span class=\"p\">:</span> <span class=\"n\">Value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span> <span class=\"n\">Constant</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">varnames</span><span class=\"p\">[</span><span class=\"n\">arg</span><span class=\"p\">]</span>\n\n    <span class=\"n\">varnames</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">):</span>\n        <span class=\"c1\"># give the operation a name used while</span>\n        <span class=\"c1\"># printing:</span>\n        <span class=\"n\">var</span> <span class=\"o\">=</span>  <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">varprefix</span><span class=\"si\">}{</span><span class=\"n\">index</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n        <span class=\"n\">varnames</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">var</span>\n        <span class=\"n\">arguments</span> <span class=\"o\">=</span> <span class=\"s2\">\", \"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n            <span class=\"n\">arg_to_str</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span>\n                <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">))</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">strop</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">var</span><span class=\"si\">}</span><span class=\"s2\"> = </span><span class=\"si\">{</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">(</span><span class=\"si\">{</span><span class=\"n\">arguments</span><span class=\"si\">}</span><span class=\"s2\">)\"</span>\n        <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">strop</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n</pre></div>\n\n\n\n</details>\n\n<p>Now we can write some first tests, the first one simply checking constant\nfolding:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">test_constfold_two_ops</span><span class=\"p\">():</span>\n    <span class=\"n\">bb</span> <span class=\"o\">=</span> <span class=\"n\">Block</span><span class=\"p\">()</span>\n    <span class=\"n\">var0</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">var1</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_add</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n    <span class=\"n\">var2</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_add</span><span class=\"p\">(</span><span class=\"n\">var1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"n\">var3</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_add</span><span class=\"p\">(</span><span class=\"n\">var2</span><span class=\"p\">,</span> <span class=\"n\">var0</span><span class=\"p\">)</span>\n\n    <span class=\"n\">opt_bb</span> <span class=\"o\">=</span> <span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">bb</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">bb_to_str</span><span class=\"p\">(</span><span class=\"n\">opt_bb</span><span class=\"p\">,</span> <span class=\"s2\">\"optvar\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"\"\"</span><span class=\"se\">\\</span>\n<span class=\"s2\">optvar0 = getarg(0)</span>\n<span class=\"s2\">optvar1 = int_add(19, optvar0)\"\"\"</span>\n</pre></div>\n\n<p>Calling the transfer functions on constant <code>KnownBits</code> produces a constant\nresults, as we have seen. Therefore \"regular\" constant folding should hopefully\nbe achieved by optimizing with the <code>KnownBits</code> abstract domain too.</p>\n<p>The next two tests are slightly more complicated and can't be optimized by\nregular constant-folding. They follow the motivating examples from the start of\nthis blog post, a hundred years ago:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">def</span><span class=\"w\"> </span><span class=\"n\">test_constfold_via_knownbits</span><span class=\"p\">():</span>\n<span class=\"w\">    </span><span class=\"n\">bb</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Block</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"n\">var0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">var1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_or</span><span class=\"p\">(</span><span class=\"n\">var0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">var2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">var1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">var3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">dummy</span><span class=\"p\">(</span><span class=\"n\">var2</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"n\">opt_bb</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">bb</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nb\">assert</span><span class=\"w\"> </span><span class=\"n\">bb_to_str</span><span class=\"p\">(</span><span class=\"n\">opt_bb</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"optvar\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s2\">\"\"\"</span><span class=\"se\">\\</span>\n<span class=\"s2\">optvar0 = getarg(0)</span>\n<span class=\"s2\">optvar1 = int_or(optvar0, 1)</span>\n<span class=\"s2\">optvar2 = dummy(1)\"\"\"</span>\n\n<span class=\"n\">def</span><span class=\"w\"> </span><span class=\"n\">test_constfold_alignment_check</span><span class=\"p\">():</span>\n<span class=\"w\">    </span><span class=\"n\">bb</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Block</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"n\">var0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">var1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_invert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"n\">b111</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"c1\"># mask off the lowest three bits, thus var2 is aligned</span>\n<span class=\"w\">    </span><span class=\"n\">var2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">var0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">var1</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"c1\"># add 16 to aligned quantity</span>\n<span class=\"w\">    </span><span class=\"n\">var3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_add</span><span class=\"p\">(</span><span class=\"n\">var2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"c1\"># check alignment of result</span>\n<span class=\"w\">    </span><span class=\"n\">var4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">var3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b111</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">var5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_eq</span><span class=\"p\">(</span><span class=\"n\">var4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"c1\"># var5 should be const-folded to 1</span>\n<span class=\"w\">    </span><span class=\"n\">var6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">dummy</span><span class=\"p\">(</span><span class=\"n\">var5</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"n\">opt_bb</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">bb</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nb\">assert</span><span class=\"w\"> </span><span class=\"n\">bb_to_str</span><span class=\"p\">(</span><span class=\"n\">opt_bb</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"optvar\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s2\">\"\"\"</span><span class=\"se\">\\</span>\n<span class=\"s2\">optvar0 = getarg(0)</span>\n<span class=\"s2\">optvar1 = int_and(optvar0, -8)</span>\n<span class=\"s2\">optvar2 = int_add(optvar1, 16)</span>\n<span class=\"s2\">optvar3 = dummy(1)\"\"\"</span>\n</pre></div>\n\n<p>Here is <code>simplify</code> to make these tests pass:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">unknown_transfer_functions</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">abstract_args</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">all_unknown</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">simplify</span><span class=\"p\">(</span><span class=\"n\">bb</span><span class=\"p\">:</span> <span class=\"n\">Block</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Block</span><span class=\"p\">:</span>\n    <span class=\"n\">abstract_values</span> <span class=\"o\">=</span> <span class=\"p\">{}</span> <span class=\"c1\"># dict mapping Operation to KnownBits</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">knownbits_of</span><span class=\"p\">(</span><span class=\"n\">val</span> <span class=\"p\">:</span> <span class=\"n\">Value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">Constant</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_constant</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">abstract_values</span><span class=\"p\">[</span><span class=\"n\">val</span><span class=\"p\">]</span>\n\n    <span class=\"n\">opt_bb</span> <span class=\"o\">=</span> <span class=\"n\">Block</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"n\">bb</span><span class=\"p\">:</span>\n        <span class=\"c1\"># apply the transfer function on the abstract arguments</span>\n        <span class=\"n\">name_without_prefix</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">removeprefix</span><span class=\"p\">(</span><span class=\"s2\">\"int_\"</span><span class=\"p\">)</span>\n        <span class=\"n\">method_name</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"abstract_</span><span class=\"si\">{</span><span class=\"n\">name_without_prefix</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n        <span class=\"n\">transfer_function</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">KnownBits</span><span class=\"p\">,</span> <span class=\"n\">method_name</span><span class=\"p\">,</span> <span class=\"n\">unknown_transfer_functions</span><span class=\"p\">)</span>\n        <span class=\"n\">abstract_args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">knownbits_of</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">())</span> <span class=\"k\">for</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">]</span>\n        <span class=\"n\">abstract_res</span> <span class=\"o\">=</span> <span class=\"n\">abstract_values</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">transfer_function</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">abstract_args</span><span class=\"p\">)</span>\n        <span class=\"c1\"># if the result is a constant, we optimize the operation away and make</span>\n        <span class=\"c1\"># it equal to the constant result</span>\n        <span class=\"k\">if</span> <span class=\"n\">abstract_res</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">():</span>\n            <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">make_equal_to</span><span class=\"p\">(</span><span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"n\">abstract_res</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">))</span>\n            <span class=\"k\">continue</span>\n        <span class=\"c1\"># otherwise emit the op</span>\n        <span class=\"n\">opt_bb</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">opt_bb</span>\n</pre></div>\n\n<p>The code follows the approach from the previous blog post very closely. The\nonly difference is that we apply the transfer function <em>first</em>, to be able to\ndetect whether the abstract domain can tell us that the result has to always be\na constant. This code makes all three tests pass.</p>\n<h3 id=\"using-the-knownbits-domain-for-conditional-peephole-rewrites\">Using the <code>KnownBits</code> Domain for Conditional Peephole Rewrites</h3>\n<p>So far we are only using the <code>KnownBits</code> domain to find out that certain\noperations have to produce a constant. We can also use the <code>KnownBits</code> domain\nto check whether certain operation rewrites are correct. Let's use one of the\nexamples from the <a href=\"https://www.pypy.org/posts/2024/07/mining-jit-traces-missing-optimizations-z3.html\">Mining JIT traces for missing optimizations with\nZ3</a>\npost, where Z3 found the inefficiency <code>(x &lt;&lt; 4) &amp; -0xf == x &lt;&lt; 4</code> in PyPy JIT\ntraces. We don't have shift operations, but we want to generalize this optimization\nanyway. The general form of this rewrite is that under some circumstances <code>x &amp;\ny == x</code>, and we can use the <code>KnownBits</code> domain to detect situations where this\nmust be true.</p>\n<p>To understand <em>when</em> <code>x &amp; y == x</code> is true, we can think about individual pairs of\nbits <code>a</code> and <code>b</code>. If <code>a == 0</code>, then <code>a &amp; b == 0 &amp; b == 0 == a</code>. If <code>b == 1</code>\nthen <code>a &amp; b == a &amp; 1 == a</code>. So if either <code>a == 0</code> or <code>b == 1</code> is true,\n<code>a &amp; b == a</code> follows. And if either of these conditions is true for <em>all</em> the\nbits of <code>x</code> and <code>y</code>, we can know that <code>x &amp; y == x</code>.</p>\n<p>We can write a method on <code>KnownBits</code> to check for this condition:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">KnownBits</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_and_identity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\" Return True if n1 &amp; n2 == n1 for any n1 in self and n2 in other.</span>\n<span class=\"sd\">        (or, equivalently, return True if n1 | n2 == n2)\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">zeros</span> <span class=\"o\">|</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n</pre></div>\n\n<p>Since my reasoning about this feels ripe for errors, let's check that our\nunderstanding is correct with Z3:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">test_prove_is_and_identity</span><span class=\"p\">():</span>\n    <span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">z3_setup_variables</span><span class=\"p\">()</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Implies</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">is_and_identity</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">),</span> <span class=\"n\">n1</span> <span class=\"o\">&amp;</span> <span class=\"n\">n2</span> <span class=\"o\">==</span> <span class=\"n\">n1</span><span class=\"p\">),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Now let's use this in the toy optimizer. Here are two tests for this rewrite:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">test_remove_redundant_and</span><span class=\"p\">():</span>\n    <span class=\"n\">bb</span> <span class=\"o\">=</span> <span class=\"n\">Block</span><span class=\"p\">()</span>\n    <span class=\"n\">var0</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">var1</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_invert</span><span class=\"p\">(</span><span class=\"mb\">0b1111</span><span class=\"p\">)</span>\n    <span class=\"c1\"># mask off the lowest four bits</span>\n    <span class=\"n\">var2</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">var0</span><span class=\"p\">,</span> <span class=\"n\">var1</span><span class=\"p\">)</span>\n    <span class=\"c1\"># applying the same mask is not redundant</span>\n    <span class=\"n\">var3</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">var2</span><span class=\"p\">,</span> <span class=\"n\">var1</span><span class=\"p\">)</span>\n    <span class=\"n\">var4</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">dummy</span><span class=\"p\">(</span><span class=\"n\">var3</span><span class=\"p\">)</span>\n\n    <span class=\"n\">opt_bb</span> <span class=\"o\">=</span> <span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">bb</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">bb_to_str</span><span class=\"p\">(</span><span class=\"n\">opt_bb</span><span class=\"p\">,</span> <span class=\"s2\">\"optvar\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"\"\"</span><span class=\"se\">\\</span>\n<span class=\"s2\">optvar0 = getarg(0)</span>\n<span class=\"s2\">optvar1 = int_and(optvar0, -16)</span>\n<span class=\"s2\">optvar2 = dummy(optvar1)\"\"\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_remove_redundant_and_more_complex</span><span class=\"p\">():</span>\n    <span class=\"n\">bb</span> <span class=\"o\">=</span> <span class=\"n\">Block</span><span class=\"p\">()</span>\n    <span class=\"n\">var0</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">var1</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"c1\"># var2 has bit pattern ????</span>\n    <span class=\"n\">var2</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">var0</span><span class=\"p\">,</span> <span class=\"mb\">0b1111</span><span class=\"p\">)</span>\n    <span class=\"c1\"># var3 has bit pattern ...?1111</span>\n    <span class=\"n\">var3</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_or</span><span class=\"p\">(</span><span class=\"n\">var1</span><span class=\"p\">,</span> <span class=\"mb\">0b1111</span><span class=\"p\">)</span>\n    <span class=\"c1\"># var4 is just var2</span>\n    <span class=\"n\">var4</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">var2</span><span class=\"p\">,</span> <span class=\"n\">var3</span><span class=\"p\">)</span>\n    <span class=\"n\">var5</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">dummy</span><span class=\"p\">(</span><span class=\"n\">var4</span><span class=\"p\">)</span>\n\n    <span class=\"n\">opt_bb</span> <span class=\"o\">=</span> <span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">bb</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">bb_to_str</span><span class=\"p\">(</span><span class=\"n\">opt_bb</span><span class=\"p\">,</span> <span class=\"s2\">\"optvar\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"\"\"</span><span class=\"se\">\\</span>\n<span class=\"s2\">optvar0 = getarg(0)</span>\n<span class=\"s2\">optvar1 = getarg(1)</span>\n<span class=\"s2\">optvar2 = int_and(optvar0, 15)</span>\n<span class=\"s2\">optvar3 = int_or(optvar1, 15)</span>\n<span class=\"s2\">optvar4 = dummy(optvar2)\"\"\"</span>\n</pre></div>\n\n<p>The first test could also be made to pass by implementing a reassociation\noptimization that turns <code>(x &amp; c1) &amp; c2</code> into <code>x &amp; (c1 &amp; c2)</code> and then constant-folds the second <code>and</code>. But here we want to\nuse <code>KnownBits</code> and conditionally rewrite <code>int_and</code> to its first argument. So to make the tests pass,\nwe can change <code>simplify</code> like this:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">simplify</span><span class=\"p\">(</span><span class=\"n\">bb</span><span class=\"p\">:</span> <span class=\"n\">Block</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Block</span><span class=\"p\">:</span>\n    <span class=\"n\">abstract_values</span> <span class=\"o\">=</span> <span class=\"p\">{}</span> <span class=\"c1\"># dict mapping Operation to KnownBits</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">knownbits_of</span><span class=\"p\">(</span><span class=\"n\">val</span> <span class=\"p\">:</span> <span class=\"n\">Value</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"n\">opt_bb</span> <span class=\"o\">=</span> <span class=\"n\">Block</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"n\">bb</span><span class=\"p\">:</span>\n        <span class=\"c1\"># apply the transfer function on the abstract arguments</span>\n        <span class=\"n\">name_without_prefix</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">removeprefix</span><span class=\"p\">(</span><span class=\"s2\">\"int_\"</span><span class=\"p\">)</span>\n        <span class=\"n\">method_name</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"abstract_</span><span class=\"si\">{</span><span class=\"n\">name_without_prefix</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n        <span class=\"n\">transfer_function</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">KnownBits</span><span class=\"p\">,</span> <span class=\"n\">method_name</span><span class=\"p\">,</span> <span class=\"n\">unknown_transfer_functions</span><span class=\"p\">)</span>\n        <span class=\"n\">abstract_args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">knownbits_of</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">())</span> <span class=\"k\">for</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">]</span>\n        <span class=\"n\">abstract_res</span> <span class=\"o\">=</span> <span class=\"n\">abstract_values</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">transfer_function</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">abstract_args</span><span class=\"p\">)</span>\n        <span class=\"c1\"># if the result is a constant, we optimize the operation away and make</span>\n        <span class=\"c1\"># it equal to the constant result</span>\n        <span class=\"k\">if</span> <span class=\"n\">abstract_res</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">():</span>\n            <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">make_equal_to</span><span class=\"p\">(</span><span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"n\">abstract_res</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">))</span>\n            <span class=\"k\">continue</span>\n        <span class=\"c1\"># &lt;&lt;&lt;&lt; new code</span>\n        <span class=\"c1\"># conditionally rewrite int_and(x, y) to x</span>\n        <span class=\"k\">if</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_and\"</span><span class=\"p\">:</span>\n            <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">abstract_args</span>\n            <span class=\"k\">if</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">is_and_identity</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">):</span>\n                <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">make_equal_to</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n                <span class=\"k\">continue</span>\n        <span class=\"c1\"># &gt;&gt;&gt;&gt; end changes</span>\n        <span class=\"n\">opt_bb</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">opt_bb</span>\n</pre></div>\n\n<p>And with that, the new tests pass as well. A real implementation would also\ncheck the other argument order, but we leave that out for the sake of brevity.</p>\n<p>This rewrite also generalizes the <a href=\"https://pypy.org/posts/2024/07/finding-simple-rewrite-rules-jit-z3.html\">rewrites</a> <code>int_and(0, x) -&gt; 0</code> and\n<code>int_and(-1, x) -&gt; x</code>, let's add a test for those:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">test_remove_and_simple</span><span class=\"p\">():</span>\n    <span class=\"n\">bb</span> <span class=\"o\">=</span> <span class=\"n\">Block</span><span class=\"p\">()</span>\n    <span class=\"n\">var0</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">var1</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">var2</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">var0</span><span class=\"p\">)</span> <span class=\"c1\"># == 0</span>\n    <span class=\"n\">var3</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_invert</span><span class=\"p\">(</span><span class=\"n\">var2</span><span class=\"p\">)</span> <span class=\"c1\"># == -1</span>\n    <span class=\"n\">var4</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">var1</span><span class=\"p\">,</span> <span class=\"n\">var3</span><span class=\"p\">)</span> <span class=\"c1\"># == var1</span>\n    <span class=\"n\">var5</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">dummy</span><span class=\"p\">(</span><span class=\"n\">var4</span><span class=\"p\">)</span>\n\n    <span class=\"n\">opt_bb</span> <span class=\"o\">=</span> <span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">bb</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">bb_to_str</span><span class=\"p\">(</span><span class=\"n\">opt_bb</span><span class=\"p\">,</span> <span class=\"s2\">\"optvar\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"\"\"</span><span class=\"se\">\\</span>\n<span class=\"s2\">optvar0 = getarg(0)</span>\n<span class=\"s2\">optvar1 = getarg(1)</span>\n<span class=\"s2\">optvar2 = dummy(optvar1)\"\"\"</span>\n</pre></div>\n\n<p>This test just passes. And that's it for this post!</p>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>In this post we've seen the implementation, testing and proofs about a 'known\nbits' abstract domain, as well as its use in the toy optimizer to generalize\nconstant folding, and to implement conditional peephole rewrites.</p>\n<p>In the next posts I'll write about the real implementation of a knownbits\ndomain in PyPy's JIT, its combination with the existing interval abstract\ndomain, how to deal with gaining information from conditions in the program,\nand some lose ends.</p>\n<p>Sources:</p>\n<ul>\n<li><a href=\"https://github.com/llvm/llvm-project/blob/main/llvm/lib/Support/KnownBits.cpp\">Known bits in LLVM</a></li>\n<li><a href=\"https://github.com/torvalds/linux/blob/master/kernel/bpf/tnum.c\">Tristate numbers for known bits in Linux eBPF</a></li>\n<li><a href=\"https://arxiv.org/abs/2105.05398\">Sound, Precise, and Fast Abstract Interpretation with Tristate Numbers</a></li>\n<li><a href=\"https://people.cs.rutgers.edu/~sn349/papers/agni-cav2023.pdf\">Verifying the Veriﬁer: eBPF Range Analysis Veriﬁcation</a></li>\n<li><a href=\"https://dougallj.wordpress.com/2020/01/13/bit-twiddling-addition-with-unknown-bits/\">Bit-Twiddling: Addition with Unknown\n  Bits</a>\n  is a super readable blog post by Dougall J. I've taken the <code>ones</code> and\n  <code>unknowns</code> naming from this post, which I find significantly clearer than\n  <code>value</code> and <code>mask</code>, which the Linux kernel uses.</li>\n<li><a href=\"https://bitmath.blogspot.com/\">Bits, Math and Performance(?)</a>, a fantastic\n  blog by <a href=\"https://mastodon.gamedev.place/@harold\">Harold Aptroot</a>. There are a\n  lot of relevant posts about known bits, range analysis etc. Harold is also\n  the author of <a href=\"http://haroldbot.nl/\">Haroldbot</a>, a website that can be used\n  for bitvector calculations, and also checks bitvector identities.</li>\n<li><a href=\"https://cea.hal.science/cea-01795779/document\">Sharpening Constraint Programming approaches for Bit-Vector Theory</a></li>\n<li><a href=\"https://users.cs.utah.edu/~regehr/papers/lctes06_2/fp019-regehr.pdf\">Deriving Abstract Transfer Functions for Analyzing Embedded Software</a></li>\n<li><a href=\"https://arxiv.org/abs/2105.00493\">Synthesizing Abstract Transformers</a></li>\n</ul>\n<div class=\"footnote\">\n<hr>\n<ol>\n<li id=\"fn:proof_bitwidths\">\n<p>There's a subtletly about the Z3 proofs that I'm sort of\nglossing over here. Python integers are of arbitrary width, and the\n<code>KnownBits</code> code is actually carefully written to work for integers of any\nsize. This property is tested by the Hypothesis tests, which don't limit\nthe sizes of the generated random integers. However, the Z3 proofs only\ncheck bitvectors of a fixed bitwidth of 64. There are various ways to deal\nwith this situation. For most \"real\" compilers, the bitwidth of integers\nwould be fixed anyway. Then the components <code>ones</code> and <code>unknowns</code> of the\n<code>KnownBits</code> class would use the number of bits the corresponding integer\nvariable has, and the Z3 proofs would use the same width. This is what we\ndo in the PyPy JIT. <a class=\"footnote-backref\" href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#fnref:proof_bitwidths\" title=\"Jump back to footnote 1 in the text\">↩</a></p>\n</li>\n<li id=\"fn:tests_vs_proofs\">\n<p>The less close connection between implementation and proof\nfor <code>abstract_eq</code> is one of the reasons why it makes sense to do\nunit-testing <em>in addition</em> to proofs. For a more detailed explanation of\nwhy both tests and proofs are good to\nhave, see <a href=\"https://siek.blogspot.com/2024/06/data-structures-and-algorithms-correctly.html#correct-software-via-write-test-and-prove:~:text=We%20recognize%20that%20once%20step,detect%20most%20of%20the%20bugs\">Jeremy Siek's blog\npost</a>,\nas well as the <a href=\"https://www-cs-faculty.stanford.edu/~knuth/faq.html#:~:text=What's%20the%20exact%20citation%20of%20your%20oft%2Dcited%20comment%20about%20bugs?\">Knuth\nquote</a>. <a class=\"footnote-backref\" href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#fnref:tests_vs_proofs\" title=\"Jump back to footnote 2 in the text\">↩</a></p>\n</li>\n</ol>\n</div>"
        }
      ],
      "description": "<p>After <a href=\"https://bernsteinbear.com/blog/toy-abstract-interpretation/\">Max' introduction to abstract interpretation for the toy optimizer</a> in the\nlast post, I want to present a more complicated abstract domain in this post.\nThis abstract domain reasons about the individual bits of a variable in a trace.\nEvery bit can be either \"known zero\", \"known one\" or \"unknown\". The abstract\ndomain is useful for optimizing integer operations, particularly the bitwise operations.\nThe abstract domain follows quite closely the <a href=\"https://github.com/torvalds/linux/blob/master/kernel/bpf/tnum.c\">tristate abstract domain of the\neBPF verifier in the Linux\nKernel</a>, as\ndescribed by the paper\n<a href=\"https://arxiv.org/abs/2105.05398\">Sound, Precise, and Fast Abstract Interpretation with Tristate\nNumbers</a> by Harishankar Vishwanathan, Matan\nShachnai, Srinivas Narayana, and Santosh Nagarakatte.</p>\n<p>The presentation in this post will still be in the context of the\n<a href=\"https://www.pypy.org/categories/toy-optimizer\">toy optimizer</a>. We'll spend a significant part of\nthe post convincing ourselves that the abstract domain transfer functions that\nwe're writing are really correct, using both property-based testing and\nautomated proofs (again using Z3).</p>\n<p>PyPy has implemented and merged a more complicated version of the same abstract\ndomain for the \"real\" PyPy JIT. A more thorough explanation of that real world\nimplementation will follow.</p>\n<p>I'd like to thank Max Bernstein and Armin Rigo for lots of great feedback on\ndrafts of this post. The PyPy implementation was mainly done by Nico\nRittinghaus and me.</p>\n<p><strong>Contents:</strong></p>\n<div class=\"toc\">\n<ul>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#motivation\">Motivation</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#the-knownbits-abstract-domain\">The Knownbits Abstract Domain</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#transfer-functions\">Transfer Functions</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#property-based-tests-with-hypothesis\">Property-based Tests with Hypothesis</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#when-are-transfer-functions-correct-how-do-we-test-them\">When are Transfer Functions Correct? How do we test them?</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#implementing-binary-transfer-functions\">Implementing Binary Transfer Functions</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#addition-and-subtraction\">Addition and Subtraction</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#proving-correctness-of-the-transfer-functions-with-z3\">Proving correctness of the transfer functions with Z3</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#cases-where-this-style-of-z3-proof-doesnt-work\">Cases where this style of Z3 proof doesn't work</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#making-statements-about-precision\">Making Statements about Precision</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#using-the-abstract-domain-in-the-toy-optimizer-for-generalized-constant-folding\">Using the Abstract Domain in the Toy Optimizer for Generalized Constant Folding</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#using-the-knownbits-domain-for-conditional-peephole-rewrites\">Using the KnownBits Domain for Conditional Peephole Rewrites</a></li>\n<li><a href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#conclusion\">Conclusion</a></li>\n</ul>\n</div>\n<h3 id=\"motivation\">Motivation</h3>\n<p>In many programs that do bit-manipulation of integers, some of the bits of the\ninteger variables of the program can be statically known. Here's a simple\nexample:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n...\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mi\">1</span>:\n<span class=\"w\">    </span>...\n<span class=\"k\">else</span>:\n<span class=\"w\">    </span>...\n</pre></div>\n\n<p>After the assignment <code>x = a | 1</code>, we know that the lowest bit of <code>x</code> must be <code>1</code>\n(the other bits are unknown) and an optimizer could remove the condition <code>x &amp; 1</code> by\nconstant-folding it to <code>1</code>.</p>\n<p>Another (more complicated) example is:</p>\n<div class=\"code\"><pre class=\"code literal-block\">assert i &amp; 0b111 == 0 # check that i is a multiple of 8\nj = i + 16\nassert j &amp; 0b111 == 0\n</pre></div>\n\n<p>This kind of code could e.g. happen in a <a href=\"https://docs.pydrofoil.org/en/latest/\">CPU\nemulator</a>, where <code>i</code> and <code>j</code> are\nintegers that represent emulated pointers, and the <code>assert</code>s are alignment\nchecks. The first assert implies that the lowest three bits of i must be <code>0</code>.\nAdding 16 to such a number produces a result where the lowest three bits are\nagain all <code>0</code>, therefore the second assert is always true. So we would like a\ncompiler to remove the second assert.</p>\n<p>Both of these will optimizations are doable with the help of the knownbits\nabstract domain that we'll discuss in the rest of the post.</p>\n<h3 id=\"the-knownbits-abstract-domain\">The Knownbits Abstract Domain</h3>\n<p>An abstract value of the knownbits domain needs to be able to store, for every\nbit of an integer variable in a program, whether it is known 0, known 1, or\nunknown. To represent\nthree different states, we need 2 bits, which we will call <code>one</code> and <code>unknown</code>.\nHere's the encoding:</p>\n<table>\n<thead>\n<tr>\n<th>one</th>\n<th>unknown</th>\n<th align=\"right\">knownbit</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td align=\"right\">0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td align=\"right\">1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td align=\"right\">?</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td align=\"right\">illegal</td>\n</tr>\n</tbody>\n</table>\n<p>The <code>unknown</code> bit is set if we don't know the value of the bit (\"?\"), the <code>one</code>\nbit is set if the bit is known to be a <code>1</code>. Since two bits are enough to encode\nfour different states, but we only need three, the combination of a set <code>one</code>\nbit and a set <code>unknown</code> is not allowed.</p>\n<p>We don't just want to encode a single bit, however. Instead, we want to do this\nfor all the bits of an integer variable. Therefore the instances of the abstract\ndomain get two integer fields <code>ones</code> and <code>unknowns</code>, where each pair of\ncorresponding bits encodes the knowledge about the corresponding bit of the\ninteger variable in the program.</p>\n<p>We can start implementing a Python class that works like this:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n\n<span class=\"nd\">@dataclass</span><span class=\"p\">(</span><span class=\"n\">eq</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">KnownBits</span><span class=\"p\">:</span>\n    <span class=\"n\">ones</span> <span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">unknowns</span> <span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__post_init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_well_formed</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_well_formed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># a bit cannot be both 1 and unknown</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"o\">&amp;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unknowns</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_constant</span><span class=\"p\">(</span><span class=\"n\">const</span> <span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\" Construct a KnownBits corresponding to a constant, where all bits</span>\n<span class=\"sd\">        are known.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">const</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_constant</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\" Check if the KnownBits instance represents a constant. \"\"\"</span>\n        <span class=\"c1\"># it's a constant if there are no unknowns</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unknowns</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n</pre></div>\n\n<p>We can also add some convenience properties. Sometimes it is easier to work\nwith an integer where all the <em>known</em> bits are set, or one where the positions\nof all the known zeros have a set bit:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">KnownBits</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">knowns</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\" return an integer where the known bits are set. \"\"\"</span>\n        <span class=\"c1\"># the knowns are just the unknowns, inverted</span>\n        <span class=\"k\">return</span> <span class=\"o\">~</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unknowns</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">zeros</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\" return an integer where the places that are known zeros have a bit</span>\n<span class=\"sd\">        set. \"\"\"</span>\n        <span class=\"c1\"># it's a 0 if it is known, but not 1</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">knowns</span> <span class=\"o\">&amp;</span> <span class=\"o\">~</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span>\n</pre></div>\n\n<p>Also, for debugging and for writing tests we want a way to print the known bits\nin a human-readable form, and also to have a way to construct a <code>KnownBits</code>\ninstance from a string. It's not important to understand the details of\n<code>__str__</code> or <code>from_str</code> for the rest of the post, so I'm putting them into a fold:</p>\n<details>\n<summary><code>KnownBits</code> from and to string conversions</summary>\n\n\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">KnownBits</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"KnownBits.from_constant(</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"si\">}</span><span class=\"s2\">)\"</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"KnownBits(</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"si\">}</span><span class=\"s2\">, </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unknowns</span><span class=\"si\">}</span><span class=\"s2\">)\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"n\">unknowns</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unknowns</span>\n        <span class=\"c1\"># construct the string representation right to left</span>\n        <span class=\"k\">while</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ones</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">unknowns</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span> <span class=\"c1\"># we leave off the leading known 0s</span>\n            <span class=\"k\">if</span> <span class=\"n\">ones</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">unknowns</span><span class=\"p\">:</span>\n                <span class=\"c1\"># -1 has all bits set in two's complement, so the leading</span>\n                <span class=\"c1\"># bits are all 1</span>\n                <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">)</span>\n                <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">\"...\"</span><span class=\"p\">)</span>\n                <span class=\"k\">break</span>\n            <span class=\"k\">if</span> <span class=\"n\">unknowns</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"c1\"># -1 has all bits set in two's complement, so the leading bits</span>\n                <span class=\"c1\"># are all ?</span>\n                <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">ones</span>\n                <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">\"?\"</span><span class=\"p\">)</span>\n                <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">\"...\"</span><span class=\"p\">)</span>\n                <span class=\"k\">break</span>\n            <span class=\"k\">if</span> <span class=\"n\">unknowns</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'?'</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">ones</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'0'</span><span class=\"p\">)</span>\n            <span class=\"n\">ones</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">unknowns</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">res</span><span class=\"p\">:</span>\n            <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'0'</span><span class=\"p\">)</span>\n        <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\" Construct a KnownBits instance that from a string. String can start</span>\n<span class=\"sd\">        with ...1 to mean that all higher bits are 1, or ...? to mean that all</span>\n<span class=\"sd\">        higher bits are unknown. Otherwise it is assumed that the higher bits</span>\n<span class=\"sd\">        are all 0. \"\"\"</span>\n        <span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"n\">unknowns</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\n        <span class=\"n\">startindex</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">\"...?\"</span><span class=\"p\">):</span>\n            <span class=\"n\">unknowns</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n            <span class=\"n\">startindex</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n        <span class=\"k\">elif</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">\"...1\"</span><span class=\"p\">):</span>\n            <span class=\"n\">ones</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n            <span class=\"n\">startindex</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n        <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">startindex</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)):</span>\n            <span class=\"n\">ones</span> <span class=\"o\">&lt;&lt;=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">unknowns</span> <span class=\"o\">&lt;&lt;=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"s1\">'1'</span><span class=\"p\">:</span>\n                <span class=\"n\">ones</span> <span class=\"o\">|=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">elif</span> <span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"s1\">'?'</span><span class=\"p\">:</span>\n                <span class=\"n\">unknowns</span> <span class=\"o\">|=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"n\">unknowns</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">all_unknown</span><span class=\"p\">():</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\" convenience constructor for the \"all bits unknown\" abstract value</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s2\">\"...?\"</span><span class=\"p\">)</span>\n</pre></div>\n\n\n\n</details>\n\n<p>And here's a <a href=\"https://pytest.org\">pytest</a>-style unit test for <code>str</code>:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">test_str</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_constant</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"s1\">'0'</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_constant</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"s1\">'101'</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mb\">0b10</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"s1\">'1?1'</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"mb\">0b1111</span><span class=\"p\">,</span> <span class=\"mb\">0b10</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"s1\">'...100?0'</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"mb\">0b1</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"s1\">'...?1'</span>\n</pre></div>\n\n<p>An instance of <code>KnownBits</code> represents a set of integers, namely those that match\nthe known bits stored in the instance. We can write a method <code>contains</code> that\ntakes a concrete <code>int</code> value and returns <code>True</code> if the value matches the\npattern of the known bits:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">KnownBits</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">contains</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\" Check whether the KnownBits instance contains the concrete integer</span>\n<span class=\"sd\">        `value`. \"\"\"</span>\n        <span class=\"c1\"># check whether value matches the bit pattern. in the places where we</span>\n        <span class=\"c1\"># know the bits, the value must agree with ones.</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span> <span class=\"o\">&amp;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">knowns</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span>\n</pre></div>\n\n<p>and a test:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">test_contains</span><span class=\"p\">():</span>\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'1?1'</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"mb\">0b111</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"mb\">0b101</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"mb\">0b110</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"mb\">0b011</span><span class=\"p\">)</span>\n\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'...?1'</span><span class=\"p\">)</span> <span class=\"c1\"># all odd numbers</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n\n<h3 id=\"transfer-functions\">Transfer Functions</h3>\n<p>Now that we have implemented the basics of the <code>KnownBits</code> class, we need to\nstart implementing the transfer functions. They are for computing what we know\nabout the <em>results</em> of an operation, given the knowledge we have about the bits\nof the arguments.</p>\n<p>We'll start with a simple unary operation, <code>invert(x)</code> (which is <code>~x</code> in Python\nand C syntax), which flips all the bits of at integer. If we know some bits of\nthe arguments, we can compute the corresponding bits of the result. The unknown\nbits remain unknown.</p>\n<p>Here's the code:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">KnownBits</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">abstract_invert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># self.zeros has bits set where the known 0s are in self</span>\n        <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unknowns</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>And a unit-test:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">test_invert</span><span class=\"p\">():</span>\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'01?01?01?'</span><span class=\"p\">)</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_invert</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'...10?10?10?'</span>\n\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'...?'</span><span class=\"p\">)</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_invert</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'...?'</span>\n</pre></div>\n\n<p>Before we continue with further transfer functions, we'll think about\ncorrectness of the transfer functions and build up some test infrastructure. To\ntest transfer functions, it's quite important to move being simple example-style\nunit tests. The state-space for more complicated binary transfer functions is\nextremely large and it's too easy to do something wrong in a corner case.\nTherefore we'll look at property-based-test for <code>KnownBits</code> next.</p>\n<h3 id=\"property-based-tests-with-hypothesis\">Property-based Tests with Hypothesis</h3>\n<p>We want to do property-based tests of <code>KnownBits</code>, to try\nmake it less likely that we'll get a corner-case in the implementation wrong.\nWe'll use <a href=\"https://hypothesis.readthedocs.io/en/latest/\">Hypothesis</a> for that.</p>\n<p>I can't give a decent introduction to Hypothesis here, but want to give a few\nhints about the API. Hypothesis is a way to run unit tests with randomly\ngenerated input. It provides <em>strategies</em> to describe the data that the test\nfunctions expects. Hypothesis provides primitive strategies (for things like\nintegers, strings, floats, etc) and ways to build composite strategies out of\nthe primitive ones.</p>\n<p>To be able to write the tests, we need to generate random <code>KnownBits</code> instances,\nand we also want an <code>int</code> instance that is a member of the <code>KnownBits</code> instance.\nWe generate tuples of <code>(KnownBits, int)</code> together, to ensure this property.\nWe'll ask Hypothesis to generate us a random concrete <code>int</code> as the concrete\nvalue, and then we'll also generate a second random <code>int</code> to use as the\n<code>unknown</code> masks (i.e. which bits of the concrete int we don't know in the\n<code>KnownBits</code> instance). Here's a function that takes two such ints and builds the\ntuple:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">build_knownbits_and_contained_number</span><span class=\"p\">(</span><span class=\"n\">concrete_value</span> <span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">unknowns</span> <span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n    <span class=\"c1\"># to construct a valid KnownBits instance, we need to mask off the unknown</span>\n    <span class=\"c1\"># bits</span>\n    <span class=\"n\">ones</span> <span class=\"o\">=</span> <span class=\"n\">concrete_value</span> <span class=\"o\">&amp;</span> <span class=\"o\">~</span><span class=\"n\">unknowns</span>\n    <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"n\">unknowns</span><span class=\"p\">),</span> <span class=\"n\">concrete_value</span>\n</pre></div>\n\n<p>We can turn this function into a hypothesis strategy to generate input data\nusing the <code>strategies.builds</code> function:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"kn\">from</span> <span class=\"nn\">hypothesis</span> <span class=\"kn\">import</span> <span class=\"n\">strategies</span><span class=\"p\">,</span> <span class=\"n\">given</span><span class=\"p\">,</span> <span class=\"n\">settings</span>\n\n<span class=\"n\">ints</span> <span class=\"o\">=</span> <span class=\"n\">strategies</span><span class=\"o\">.</span><span class=\"n\">integers</span><span class=\"p\">()</span>\n\n<span class=\"n\">random_knownbits_and_contained_number</span> <span class=\"o\">=</span> <span class=\"n\">strategies</span><span class=\"o\">.</span><span class=\"n\">builds</span><span class=\"p\">(</span>\n    <span class=\"n\">build_knownbits_and_contained_number</span><span class=\"p\">,</span>\n    <span class=\"n\">ints</span><span class=\"p\">,</span> <span class=\"n\">ints</span>\n<span class=\"p\">)</span>\n</pre></div>\n\n<p>One important special case of <code>KnownBits</code> are the constants, which contain only\na single concrete value. We'll also generate some of those specifically, and\nthen combine the <code>random_knownbits_and_contained_number</code> strategy with it:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">constant_knownbits</span> <span class=\"o\">=</span> <span class=\"n\">strategies</span><span class=\"o\">.</span><span class=\"n\">builds</span><span class=\"p\">(</span>\n    <span class=\"k\">lambda</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_constant</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">),</span> <span class=\"n\">value</span><span class=\"p\">),</span>\n    <span class=\"n\">ints</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">knownbits_and_contained_number</span> <span class=\"o\">=</span> <span class=\"n\">constant_knownbits</span> <span class=\"o\">|</span> <span class=\"n\">random_knownbits_and_contained_number</span>\n</pre></div>\n\n<p>Now we can write the first property-based tests, for the <code>KnownBits.contains</code>\nmethod:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_contains</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">):</span>\n    <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">t</span>\n    <span class=\"k\">assert</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>The <code>@given</code> decorator is used to tell Hypothesis which strategy to use to\ngenerate random data for the test function. Hypothesis will run the test with a\nnumber of random examples (100 by default). If it finds an error, it will try to\nminimize the example needed that demonstrates the problem, to try to make it\neasier to understand what is going wrong. It also saves all failing cases into\nan example database and tries them again on subsequent runs.</p>\n<p>This test is as much a check for whether we got the strategies right as it is\nfor the logic in <code>KnownBits.contains</code>. Here's an example output of random\nconcrete and abstract values that we are getting here:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"mf\">110000011001101</span><span class=\"w\"> </span><span class=\"mf\">...</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">???</span><span class=\"mf\">1</span>\n<span class=\"mf\">...1011011</span><span class=\"w\"> </span><span class=\"mf\">...1011011</span>\n<span class=\"mf\">...1001101110101000010010011111011</span><span class=\"w\"> </span><span class=\"mf\">...1001101110101000010010011111011</span>\n<span class=\"mf\">...1001101110101000010010011111011</span><span class=\"w\"> </span><span class=\"mf\">...100110111010100001</span><span class=\"err\">?</span><span class=\"mf\">010</span><span class=\"err\">?</span><span class=\"mf\">1</span><span class=\"err\">??</span><span class=\"mf\">1</span><span class=\"err\">??</span><span class=\"mf\">11</span>\n<span class=\"mf\">1000001101111101001011010011111101000011000111011001011111101</span><span class=\"w\"> </span><span class=\"mf\">1000001101111101001011010011111101000011000111011001011111101</span>\n<span class=\"mf\">1000001101111101001011010011111101000011000111011001011111101</span><span class=\"w\"> </span><span class=\"mf\">1000001101111101001011010011111101000011000111</span><span class=\"err\">????</span><span class=\"mf\">01</span><span class=\"err\">?</span><span class=\"mf\">11</span><span class=\"err\">?????</span><span class=\"mf\">1</span>\n<span class=\"mf\">1111100000010</span><span class=\"w\"> </span><span class=\"mf\">1111100000010</span>\n<span class=\"mf\">1111100000010</span><span class=\"w\"> </span><span class=\"mf\">...</span><span class=\"err\">?</span><span class=\"mf\">11111</span><span class=\"err\">?</span><span class=\"mf\">00000</span><span class=\"err\">??</span>\n<span class=\"mf\">110110</span><span class=\"w\"> </span><span class=\"mf\">110110</span>\n<span class=\"mf\">110110</span><span class=\"w\"> </span><span class=\"mf\">...</span><span class=\"err\">?</span><span class=\"mf\">00</span><span class=\"err\">?</span><span class=\"mf\">00</span><span class=\"err\">????</span><span class=\"mf\">11</span><span class=\"err\">??</span><span class=\"mf\">10</span>\n<span class=\"mf\">110110</span><span class=\"w\"> </span><span class=\"err\">??</span><span class=\"mf\">0</span><span class=\"err\">??</span><span class=\"mf\">0</span>\n<span class=\"mf\">...100010111011111</span><span class=\"w\"> </span><span class=\"mf\">...</span><span class=\"err\">?</span><span class=\"mf\">100</span><span class=\"err\">?</span><span class=\"mf\">10111</span><span class=\"err\">??</span><span class=\"mf\">111</span><span class=\"err\">?</span>\n<span class=\"mf\">...1000100000110001</span><span class=\"w\"> </span><span class=\"mf\">...</span><span class=\"err\">?</span><span class=\"mf\">000</span><span class=\"err\">?</span><span class=\"mf\">00000</span><span class=\"err\">??</span><span class=\"mf\">000</span><span class=\"err\">?</span>\n<span class=\"mf\">110000001110</span><span class=\"w\"> </span><span class=\"mf\">...</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">??</span><span class=\"mf\">000</span><span class=\"err\">?</span><span class=\"mf\">00</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">?</span><span class=\"mf\">0000000</span><span class=\"err\">?</span><span class=\"mf\">00</span><span class=\"err\">???</span><span class=\"mf\">0000</span><span class=\"err\">?????</span><span class=\"mf\">00</span><span class=\"err\">???</span><span class=\"mf\">000</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">?</span><span class=\"mf\">00</span><span class=\"err\">?</span><span class=\"mf\">01</span><span class=\"err\">?</span><span class=\"mf\">000</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">??</span><span class=\"mf\">1</span><span class=\"err\">??</span>\n<span class=\"mf\">110000001110</span><span class=\"w\"> </span><span class=\"err\">??</span><span class=\"mf\">000000</span><span class=\"err\">???</span><span class=\"mf\">0</span>\n<span class=\"mf\">1011011010000001110101001111000010001001011101010010010001000000010101010010001101110101111111010101010010101100110000011110000</span><span class=\"w\"> </span><span class=\"mf\">1011011010000001110101001111000010001001011101010010010001000000010101010010001101110101111111010101010010101100110000011110000</span>\n<span class=\"mf\">...1011010010010100</span><span class=\"w\"> </span><span class=\"mf\">...1011010010010100</span>\n<span class=\"mf\">...1011111110110011</span><span class=\"w\"> </span><span class=\"mf\">...1011111110110011</span>\n<span class=\"mf\">101000011110110</span><span class=\"w\"> </span><span class=\"mf\">101000011</span><span class=\"err\">?</span><span class=\"mf\">10</span><span class=\"err\">?</span><span class=\"mf\">1</span><span class=\"err\">?</span>\n<span class=\"mf\">100101</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"mf\">00</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">?</span>\n</pre></div>\n\n<p>That looks suitably random, but we might want to bias our random numbers a\nlittle bit towards common error values like small constants, powers of two, etc.\nLike this:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">INTEGER_WIDTH</span> <span class=\"o\">=</span> <span class=\"mi\">64</span>\n<span class=\"c1\"># some small integers</span>\n<span class=\"n\">ints_special</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">))</span>\n<span class=\"c1\"># powers of two</span>\n<span class=\"n\">ints_special</span> <span class=\"o\">=</span> <span class=\"n\">ints_special</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">INTEGER_WIDTH</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"c1\"># powers of two - 1</span>\n<span class=\"n\">ints_special</span> <span class=\"o\">=</span> <span class=\"n\">ints_special</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">((</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">INTEGER_WIDTH</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"c1\"># negative versions of what we have so far</span>\n<span class=\"n\">ints_special</span> <span class=\"o\">=</span> <span class=\"n\">ints_special</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">ints_special</span><span class=\"p\">)</span>\n<span class=\"c1\"># bit-flipped versions of what we have so far</span>\n<span class=\"n\">ints_special</span> <span class=\"o\">=</span> <span class=\"n\">ints_special</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">ints_special</span><span class=\"p\">)</span>\n<span class=\"n\">ints_special</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ints_special</span><span class=\"p\">)</span>\n<span class=\"c1\"># sort them (because hypothesis simplifies towards earlier elements in the list)</span>\n<span class=\"n\">ints_special</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">element</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">),</span> <span class=\"n\">element</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n\n<span class=\"n\">ints</span> <span class=\"o\">=</span> <span class=\"n\">strategies</span><span class=\"o\">.</span><span class=\"n\">sampled_from</span><span class=\"p\">(</span><span class=\"n\">ints_special</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">strategies</span><span class=\"o\">.</span><span class=\"n\">integers</span><span class=\"p\">()</span>\n</pre></div>\n\n<p>Now we get data like this:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"mf\">1110</span><span class=\"w\"> </span><span class=\"mf\">1110</span>\n<span class=\"mf\">...10000000000000000001</span><span class=\"w\"> </span><span class=\"mf\">...10000</span><span class=\"err\">??</span><span class=\"mf\">0</span><span class=\"err\">??</span><span class=\"mf\">0000</span><span class=\"err\">??</span><span class=\"mf\">00</span><span class=\"err\">?</span><span class=\"mf\">1</span>\n<span class=\"mf\">1</span><span class=\"w\"> </span><span class=\"err\">??</span><span class=\"mf\">0</span><span class=\"err\">??</span><span class=\"mf\">0000</span><span class=\"err\">??</span><span class=\"mf\">00</span><span class=\"err\">?</span><span class=\"mf\">1</span>\n<span class=\"mf\">1</span><span class=\"w\"> </span><span class=\"err\">?</span>\n<span class=\"mf\">...10101100</span><span class=\"w\"> </span><span class=\"mf\">...10101100</span>\n<span class=\"mf\">110000000011001010111011111111111111011110010001001100110001011</span><span class=\"w\"> </span><span class=\"mf\">...</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">?</span><span class=\"mf\">101</span><span class=\"err\">?</span>\n<span class=\"mf\">110000000011001010111011111111111111011110010001001100110001011</span><span class=\"w\"> </span><span class=\"err\">??</span><span class=\"mf\">00000000</span><span class=\"err\">??</span><span class=\"mf\">00</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">???</span><span class=\"mf\">0</span><span class=\"err\">??????????????</span><span class=\"mf\">0</span><span class=\"err\">????</span><span class=\"mf\">00</span><span class=\"err\">?</span><span class=\"mf\">000</span><span class=\"err\">?</span><span class=\"mf\">00</span><span class=\"err\">??</span><span class=\"mf\">00</span><span class=\"err\">??</span><span class=\"mf\">000</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">??</span>\n<span class=\"mf\">...1011111111111111111111111111</span><span class=\"w\"> </span><span class=\"mf\">...</span><span class=\"err\">?</span><span class=\"mf\">11</span><span class=\"err\">?</span><span class=\"mf\">11</span><span class=\"err\">??</span>\n<span class=\"mf\">...1011111111111111111111111111</span><span class=\"w\"> </span><span class=\"mf\">...</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">??????????????????????????</span>\n<span class=\"mf\">0</span><span class=\"w\"> </span><span class=\"mf\">...</span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">??????????????????????????</span>\n<span class=\"mf\">101101</span><span class=\"w\"> </span><span class=\"mf\">101101</span>\n<span class=\"mf\">111111111111111111111111111111111111111111111</span><span class=\"w\"> </span><span class=\"mf\">111111111111111111111111111111111111111111111</span>\n<span class=\"mf\">10111</span><span class=\"w\"> </span><span class=\"mf\">10111</span>\n<span class=\"mf\">...101100</span><span class=\"w\"> </span><span class=\"mf\">...1</span><span class=\"err\">?</span><span class=\"mf\">111011</span><span class=\"err\">?</span><span class=\"mf\">0</span>\n<span class=\"mf\">101000</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"mf\">001010</span><span class=\"err\">?</span><span class=\"mf\">0</span>\n<span class=\"mf\">101000</span><span class=\"w\"> </span><span class=\"err\">?</span><span class=\"mf\">0</span><span class=\"err\">?</span><span class=\"mf\">000</span>\n<span class=\"mf\">110010</span><span class=\"w\"> </span><span class=\"mf\">110010</span>\n<span class=\"mf\">...100111</span><span class=\"w\"> </span><span class=\"mf\">...100111</span>\n<span class=\"mf\">1111011010010</span><span class=\"w\"> </span><span class=\"mf\">1111011010010</span>\n<span class=\"mf\">...1000000000000000000000000000000000000</span><span class=\"w\"> </span><span class=\"mf\">...1000000000000000000000000000000000000</span>\n</pre></div>\n\n<p>We can also write a test that checks that the somewhat tricky logic in\n<code>__str__</code> and <code>from_str</code> is correct, by making sure that the two functions\nround-trip (ie converting a <code>KnownBits</code> to a string and then back to a\n<code>KnownBits</code> instance produces the same abstract value).</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_hypothesis_str_roundtrips</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">):</span>\n    <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span> <span class=\"o\">=</span> <span class=\"n\">t1</span>\n    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"p\">)</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"o\">==</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">ones</span>\n    <span class=\"k\">assert</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">unknowns</span> <span class=\"o\">==</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">unknowns</span>\n</pre></div>\n\n<p>Now let's actually apply this infrastructure to test <code>abstract_invert</code>.</p>\n<h3 id=\"when-are-transfer-functions-correct-how-do-we-test-them\">When are Transfer Functions Correct? How do we test them?</h3>\n<p>Abstract values, i.e. instances of <code>KnownBits</code> represent <em>sets</em> of concrete\nvalues. We want the transfer functions to compute <em>overapproximations</em> of the\nconcrete values. So if we have an arbitrary abstract value <code>k</code>, with a concrete\nnumber <code>n</code> that is a member of the abstract values (i.e.\n<code>k.contains(n) == True</code>) then the result of the concrete operation <code>op(n)</code>\n<strong>must</strong> be a member of the result of the abstract operation <code>k.abstract_op()</code>\n(i.e. <code>k.abstract_op().contains(op(n)) == True</code>).</p>\n<p>Checking the correctness/overapproximation property is a good match for\nhypothesis. Here's what the test for <code>abstract_invert</code> looks like:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_hypothesis_invert</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">):</span>\n    <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span> <span class=\"o\">=</span> <span class=\"n\">t1</span>\n    <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"o\">~</span><span class=\"n\">n1</span> <span class=\"c1\"># compute the real result</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_invert</span><span class=\"p\">()</span> <span class=\"c1\"># compute the abstract result</span>\n    <span class=\"k\">assert</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n2</span><span class=\"p\">)</span> <span class=\"c1\"># the abstract result must contain the real result</span>\n</pre></div>\n\n<p>This is the <em>only</em> condition needed for <code>abstract_invert</code> to be correct. If\n<code>abstract_invert</code> fulfils this property for every combination of abstract and\nconcrete value then <code>abstract_invert</code> is correct. Note however, that this test\ndoes not actually check whether <code>abstract_invert</code> gives us precise results. A\ncorrect (but imprecise) implementation of <code>abstract_invert</code> would simply return\na completely unknown result, regardless of what is known about the input\n<code>KnownBits</code>.</p>\n<p>The \"proper\" CS term for this notion of correctness is called <em>soundness</em>. The\ncorrectness condition on the transfer functions is called a <em>Galois\nconnection</em>. I won't go into any mathematical/technical details here, but\nwanted to at least mention the terms. I found <a href=\"https://web.njit.edu/~mjk76/\">Martin\nKellogg</a>'s\n<a href=\"https://web.njit.edu/~mjk76/teaching/cs684-sp24/assets/lecture-12.pdf#34\">slides</a>\nto be quite an approachable introduction to the Galois connection and how to\nshow soundness.</p>\n<h3 id=\"implementing-binary-transfer-functions\">Implementing Binary Transfer Functions</h3>\n<p>Now we have infrastructure in place for testing transfer functions with random\ninputs. With that we can start thinking about the more complicated case, that of\nbinary operations. Let's start with the simpler ones, <code>and</code> and <code>or</code>. For <code>and</code>,\nwe can know a <code>0</code> bit in the result if either of the input bits are known <code>0</code>;\nor we can know a <code>1</code> bit in the result if both input bits are known <code>1</code>.\nOtherwise the resulting bit is unknown. Let's look at all the combinations:</p>\n<div class=\"code\"><pre class=\"code literal-block\">and\ninput1: 000111???\ninput2: 01?01?01?\nresult: 00001?0??\n</pre></div>\n\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">KnownBits</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">abstract_and</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"n\">ones</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"o\">&amp;</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"c1\"># known ones</span>\n        <span class=\"n\">knowns</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">zeros</span> <span class=\"o\">|</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">zeros</span> <span class=\"o\">|</span> <span class=\"n\">ones</span>\n        <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">knowns</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Here's an example unit-test and a property-based test for <code>and</code>:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">test_and</span><span class=\"p\">():</span>\n    <span class=\"c1\"># test all combinations of 0, 1, ? in one example</span>\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'01?01?01?'</span><span class=\"p\">)</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'000111???'</span><span class=\"p\">)</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_and</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>     <span class=\"c1\"># should be: 0...00001?0??</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span> <span class=\"o\">==</span>   <span class=\"s2\">\"1?0??\"</span>\n\n<span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">,</span> <span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_hypothesis_and</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">t2</span><span class=\"p\">):</span>\n    <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span> <span class=\"o\">=</span> <span class=\"n\">t1</span>\n    <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">t2</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_and</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">n3</span> <span class=\"o\">=</span> <span class=\"n\">n1</span> <span class=\"o\">&amp;</span> <span class=\"n\">n2</span>\n    <span class=\"k\">assert</span> <span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n3</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>To implement <code>or</code> is pretty similar. The result is known <code>1</code> where either of the\ninputs is <code>1</code>. The result is known <code>0</code> where both inputs are known <code>0</code>, and <code>?</code>\notherwise.</p>\n<div class=\"code\"><pre class=\"code literal-block\">or\ninput1: 000111???\ninput2: 01?01?01?\nresult: 01?111?1?\n</pre></div>\n\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">KnownBits</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">abstract_or</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"n\">ones</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"o\">|</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">ones</span>\n        <span class=\"n\">zeros</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">zeros</span> <span class=\"o\">&amp;</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">zeros</span>\n        <span class=\"n\">knowns</span> <span class=\"o\">=</span> <span class=\"n\">ones</span> <span class=\"o\">|</span> <span class=\"n\">zeros</span>\n        <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">knowns</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Here's an example unit-test and a property-based test for <code>or</code>:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">test_or</span><span class=\"p\">():</span>\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'01?01?01?'</span><span class=\"p\">)</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'000111???'</span><span class=\"p\">)</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_or</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>     <span class=\"c1\"># should be:  0...01?111?1?</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span> <span class=\"o\">==</span>   <span class=\"s2\">\"1?111?1?\"</span>\n\n<span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">,</span> <span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_hypothesis_or</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">t2</span><span class=\"p\">):</span>\n    <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span> <span class=\"o\">=</span> <span class=\"n\">t1</span>\n    <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">t2</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_or</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">n3</span> <span class=\"o\">=</span> <span class=\"n\">n1</span> <span class=\"o\">|</span> <span class=\"n\">n2</span>\n    <span class=\"k\">assert</span> <span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n3</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Implementing support for <code>abstract_xor</code> is relatively simple, and left as an\nexercise :-).</p>\n<h3 id=\"addition-and-subtraction\">Addition and Subtraction</h3>\n<p><code>invert</code>, <code>and</code>, and <code>or</code> are relatively simple transfer functions to write,\nbecause they compose over the individual bits of the integers. The arithmetic\nfunctions <code>add</code> and <code>sub</code> are significantly harder, because of carries and\nborrows. Coming up with the formulas for them and gaining an intuitive\nunderstanding is quite tricky and involves carefully going through a few\nexamples with pen and paper. When implementing this in PyPy, Nico and I didn't\ncome up with the implementation ourselves, but instead took them from the\n<a href=\"https://arxiv.org/abs/2105.05398\">Tristate Numbers</a> paper. Here's the code,\nwith example tests and hypothesis tests:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">KnownBits</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">abstract_add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"n\">sum_ones</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"o\">+</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">ones</span>\n        <span class=\"n\">sum_unknowns</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unknowns</span> <span class=\"o\">+</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">unknowns</span>\n        <span class=\"n\">all_carries</span> <span class=\"o\">=</span> <span class=\"n\">sum_ones</span> <span class=\"o\">+</span> <span class=\"n\">sum_unknowns</span>\n        <span class=\"n\">ones_carries</span> <span class=\"o\">=</span> <span class=\"n\">all_carries</span> <span class=\"o\">^</span> <span class=\"n\">sum_ones</span>\n        <span class=\"n\">unknowns</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unknowns</span> <span class=\"o\">|</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">unknowns</span> <span class=\"o\">|</span> <span class=\"n\">ones_carries</span>\n        <span class=\"n\">ones</span> <span class=\"o\">=</span> <span class=\"n\">sum_ones</span> <span class=\"o\">&amp;</span> <span class=\"o\">~</span><span class=\"n\">unknowns</span>\n        <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"n\">unknowns</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">abstract_sub</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"n\">diff_ones</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"o\">-</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">ones</span>\n        <span class=\"n\">val_borrows</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">diff_ones</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unknowns</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"p\">(</span><span class=\"n\">diff_ones</span> <span class=\"o\">-</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">unknowns</span><span class=\"p\">)</span>\n        <span class=\"n\">unknowns</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unknowns</span> <span class=\"o\">|</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">unknowns</span> <span class=\"o\">|</span> <span class=\"n\">val_borrows</span>\n        <span class=\"n\">ones</span> <span class=\"o\">=</span> <span class=\"n\">diff_ones</span> <span class=\"o\">&amp;</span> <span class=\"o\">~</span><span class=\"n\">unknowns</span>\n        <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"n\">unknowns</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_add</span><span class=\"p\">():</span>\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'0?10?10?10'</span><span class=\"p\">)</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'0???111000'</span><span class=\"p\">)</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_add</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span> <span class=\"o\">==</span>   <span class=\"s2\">\"?????01?10\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_sub</span><span class=\"p\">():</span>\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'0?10?10?10'</span><span class=\"p\">)</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'0???111000'</span><span class=\"p\">)</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_sub</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span> <span class=\"o\">==</span>   <span class=\"s2\">\"...?11?10\"</span>\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span>    <span class=\"s1\">'...1?10?10?10'</span><span class=\"p\">)</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'...10000???111000'</span><span class=\"p\">)</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_sub</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span> <span class=\"o\">==</span>   <span class=\"s2\">\"111?????11?10\"</span>\n\n<span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">,</span> <span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_hypothesis_add</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">t2</span><span class=\"p\">):</span>\n    <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span> <span class=\"o\">=</span> <span class=\"n\">t1</span>\n    <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">t2</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_add</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">n3</span> <span class=\"o\">=</span> <span class=\"n\">n1</span> <span class=\"o\">+</span> <span class=\"n\">n2</span>\n    <span class=\"k\">assert</span> <span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n3</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">,</span> <span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_hypothesis_sub</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">t2</span><span class=\"p\">):</span>\n    <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span> <span class=\"o\">=</span> <span class=\"n\">t1</span>\n    <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">t2</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_sub</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">n3</span> <span class=\"o\">=</span> <span class=\"n\">n1</span> <span class=\"o\">-</span> <span class=\"n\">n2</span>\n    <span class=\"k\">assert</span> <span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n3</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Now we are in a pretty good situation, and have implemented abstract versions\nfor a bunch of important arithmetic and binary functions. What's also surprising\nis that the implementation of all of the transfer functions is quite efficient.\nWe didn't have to write loops over the individual bits at all, instead we found\nclosed form expressions using primitive operations on the underlying integers\n<code>ones</code> and <code>unknowns</code>. This means that computing the results of abstract\noperations is quite efficient, which is important when using the abstract domain\nin the context of a JIT compiler.</p>\n<h3 id=\"proving-correctness-of-the-transfer-functions-with-z3\">Proving correctness of the transfer functions with Z3</h3>\n<p>As one can probably tell from my recent posts, I've been thinking about\ncompiler correctness a lot. Getting the transfer functions absolutely\ncorrect is really crucial, because a bug in them would lead to miscompilation of\nPython code when the abstract domain is added to the JIT. While the randomized\ntests are great, it's still entirely possible for them to miss bugs. The state\nspace for the arguments of a binary transfer function is <code>3**64 * 3**64</code>, and if\nonly a small part of that contains wrong behaviour it would be really unlikely\nfor us to find it with random tests by chance. Therefore I was reluctant to\nmerge the PyPy branch that contained the new abstract domain for a long time.</p>\n<p>To increase our confidence in the correctness of the transfer functions further,\nwe can use Z3 to <em>prove</em> their correctness, which gives us much stronger\nguarantees (not 100%, obviously). In this subsection I will show how to do that.</p>\n<p>Here's an attempt to do this manually in the Python repl:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">z3</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">solver</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Solver</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># like last blog post, proof by failing to find counterexamples</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">prove</span><span class=\"p\">(</span><span class=\"n\">cond</span><span class=\"p\">):</span><span class=\"w\"> </span><span class=\"k\">assert</span><span class=\"w\"> </span><span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Not</span><span class=\"p\">(</span><span class=\"n\">cond</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">unsat</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># let's set up a z3 bitvector variable for an arbitrary concrete value</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">n1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s1\">'concrete_value'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">n1</span>\n<span class=\"n\">concrete_value</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># due to operator overloading we can manipulate z3 formulas</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">n2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"n\">n1</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">n2</span>\n<span class=\"o\">~</span><span class=\"n\">concrete_value</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># now z3 bitvector variables for the ones and zeros fields</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">ones</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s1\">'abstract_ones'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">unknowns</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s1\">'abstract_unknowns'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># we construct a KnownBits instance with the z3 variables</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">k1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">ones</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">unknowns</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># due to operator overloading we can call the methods on k1:</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">k2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_invert</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">ones</span>\n<span class=\"o\">~</span><span class=\"n\">abstract_unknowns</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"n\">abstract_ones</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">unknowns</span>\n<span class=\"n\">abstract_unknowns</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># here's the correctness condition that we want to prove:</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n2</span><span class=\"p\">)</span>\n<span class=\"o\">~</span><span class=\"n\">concrete_value</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"n\">abstract_unknowns</span><span class=\"w\"> </span><span class=\"o\">==</span>\n<span class=\"o\">~</span><span class=\"n\">abstract_unknowns</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"n\">abstract_ones</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># let's try</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n2</span><span class=\"p\">))</span>\n<span class=\"n\">Traceback</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">most</span><span class=\"w\"> </span><span class=\"n\">recent</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"w\">  </span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ow\">in</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n<span class=\"w\">  </span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ow\">in</span><span class=\"w\"> </span><span class=\"n\">prove</span>\n<span class=\"n\">AssertionError</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># it doesn't work! let's look at the counterexample to see why:</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"n\">abstract_unknowns</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\"> </span><span class=\"n\">abstract_ones</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\"> </span><span class=\"n\">concrete_value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># we can build a KnownBits instance with the values in the</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># counterexample:</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"c1\"># concrete result</span>\n<span class=\"o\">-</span><span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">counter_example_k1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">counter_example_k1</span>\n<span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_constant</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">counter_example_k2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">counter_example_k1</span><span class=\"o\">.</span><span class=\"n\">abstract_invert</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">counter_example_k2</span>\n<span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_constant</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"c1\"># let's check the failing condition</span>\n<span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">counter_example_k2</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n</pre></div>\n\n<p>What is the problem here? We didn't tell Z3 that <code>n1</code> was supposed to be a\nmember of <code>k1</code>. We can add this as a precondition to the solver, and then the\nprove works:</p>\n<div class=\"code\"><pre class=\"code literal-block\">&gt;&gt;&gt;&gt; solver.add(k1.contains(n1))\n&gt;&gt;&gt;&gt; prove(k2.contains(n2)) # works!\n</pre></div>\n\n<p>This is super cool! It's really a proof about the actual implementation, because\nwe call the implementation methods directly, and due to the operator overloading\nthat Z3 does we can be sure that we are actually checking a formula that\ncorresponds to the Python code. This eliminates one source of errors in formal\nmethods.</p>\n<p>Doing the proof manually on the Python REPL is kind of annoying though, and we\nalso would like to make sure that the proofs are re-done when we change the\ncode. What we would really like to do is writing the proofs as a unit-test that\nwe can run while developing and in CI. Doing this is possible, and the unit\ntests that really perform proofs look pleasingly similar to the\nHypothesis-based ones.</p>\n<p>First we need to set up a bit of infrastructure:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">INTEGER_WIDTH</span> <span class=\"o\">=</span> <span class=\"mi\">64</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">BitVec</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">BitVecVal</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVecVal</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">z3_setup_variables</span><span class=\"p\">():</span>\n    <span class=\"c1\"># instantiate a solver</span>\n    <span class=\"n\">solver</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Solver</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># a Z3 variable for the first concrete value</span>\n    <span class=\"n\">n1</span> <span class=\"o\">=</span> <span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s2\">\"n1\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># a KnownBits instances that uses Z3 variables as its ones and unknowns,</span>\n    <span class=\"c1\"># representing the first abstract value</span>\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s2\">\"n1_ones\"</span><span class=\"p\">),</span> <span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s2\">\"n1_unkowns\"</span><span class=\"p\">))</span>\n    <span class=\"c1\"># add the precondition to the solver that the concrete value n1 must be a</span>\n    <span class=\"c1\"># member of the abstract value k1</span>\n    <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># a Z3 variable for the second concrete value</span>\n    <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s2\">\"n2\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># a KnownBits instances for the second abstract value</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s2\">\"n2_ones\"</span><span class=\"p\">),</span> <span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s2\">\"n2_unkowns\"</span><span class=\"p\">))</span>\n    <span class=\"c1\"># add the precondition linking n2 and k2 to the solver</span>\n    <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n2</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">prove</span><span class=\"p\">(</span><span class=\"n\">cond</span><span class=\"p\">,</span> <span class=\"n\">solver</span><span class=\"p\">):</span>\n    <span class=\"n\">z3res</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Not</span><span class=\"p\">(</span><span class=\"n\">cond</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"n\">z3res</span> <span class=\"o\">!=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">unsat</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">z3res</span> <span class=\"o\">==</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">sat</span> <span class=\"c1\"># can't be timeout, we set no timeout</span>\n        <span class=\"c1\"># make the model with the counterexample global, to make inspecting the</span>\n        <span class=\"c1\"># bug easier when running pytest --pdb</span>\n        <span class=\"k\">global</span> <span class=\"n\">model</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"n1=</span><span class=\"si\">{</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">, n2=</span><span class=\"si\">{</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">n2</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">counter_example_k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_signed_long</span><span class=\"p\">(),</span>\n                                       <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">unknowns</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_signed_long</span><span class=\"p\">())</span>\n        <span class=\"n\">counter_example_k2</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_signed_long</span><span class=\"p\">(),</span>\n                                       <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">unknowns</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_signed_long</span><span class=\"p\">())</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"k1=</span><span class=\"si\">{</span><span class=\"n\">counter_example_k1</span><span class=\"si\">}</span><span class=\"s2\">, k2=</span><span class=\"si\">{</span><span class=\"n\">counter_example_k2</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"but </span><span class=\"si\">{</span><span class=\"n\">cond</span><span class=\"si\">=}</span><span class=\"s2\"> evaluates to </span><span class=\"si\">{</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">cond</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">())</span>\n</pre></div>\n\n<p>And then we can write proof-unit-tests like this:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">test_z3_abstract_invert</span><span class=\"p\">():</span>\n    <span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">z3_setup_variables</span><span class=\"p\">()</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_invert</span><span class=\"p\">()</span>\n    <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"o\">~</span><span class=\"n\">n1</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n2</span><span class=\"p\">),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_z3_abstract_and</span><span class=\"p\">():</span>\n    <span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">z3_setup_variables</span><span class=\"p\">()</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_and</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">n3</span> <span class=\"o\">=</span> <span class=\"n\">n1</span> <span class=\"o\">&amp;</span> <span class=\"n\">n2</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n3</span><span class=\"p\">),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_z3_abstract_or</span><span class=\"p\">():</span>\n    <span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">z3_setup_variables</span><span class=\"p\">()</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_or</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">n3</span> <span class=\"o\">=</span> <span class=\"n\">n1</span> <span class=\"o\">|</span> <span class=\"n\">n2</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n3</span><span class=\"p\">),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_z3_abstract_add</span><span class=\"p\">():</span>\n    <span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">z3_setup_variables</span><span class=\"p\">()</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_add</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">n3</span> <span class=\"o\">=</span> <span class=\"n\">n1</span> <span class=\"o\">+</span> <span class=\"n\">n2</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n3</span><span class=\"p\">),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_z3_abstract_sub</span><span class=\"p\">():</span>\n    <span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">z3_setup_variables</span><span class=\"p\">()</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_sub</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">n3</span> <span class=\"o\">=</span> <span class=\"n\">n1</span> <span class=\"o\">-</span> <span class=\"n\">n2</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n3</span><span class=\"p\">),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>It's possible to write a bit more Python-metaprogramming-magic and unify the\nHypothesis and Z3 tests into the same test definition.<sup id=\"fnref:proof_bitwidths\"><a class=\"footnote-ref\" href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#fn:proof_bitwidths\">1</a></sup></p>\n<h3 id=\"cases-where-this-style-of-z3-proof-doesnt-work\">Cases where this style of Z3 proof doesn't work</h3>\n<p>Unfortunately the approach described in the previous section only works for a\nvery small number of cases. It breaks down as soon as the <code>KnownBits</code> methods\nthat we're calling contain any <code>if</code> conditions (including hidden ones like\nthe short-circuiting <code>and</code> and <code>or</code> in Python). Let's look at an example and\nimplement <code>abstract_eq</code>. <code>eq</code> is supposed to be an operation that compares two\nintegers and returns <code>0</code> or <code>1</code> if they are different or equal, respectively.\nImplementing this in knownbits looks like this (with example and hypothesis\ntests):</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">KnownBits</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">abstract_eq</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"c1\"># the result is a 0, 1, or ?</span>\n\n        <span class=\"c1\"># if they are both the same constant, they must be equal</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_constant</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"c1\"># check whether we have known disagreeing bits, then we know the result</span>\n        <span class=\"c1\"># is 0</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_disagrees</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_constant</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># an unknown boolean</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_disagrees</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"c1\"># check whether the bits disagree in any place where both are known</span>\n        <span class=\"n\">both_known</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">knowns</span> <span class=\"o\">&amp;</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">knowns</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"o\">&amp;</span> <span class=\"n\">both_known</span> <span class=\"o\">!=</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"o\">&amp;</span> <span class=\"n\">both_known</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_eq</span><span class=\"p\">():</span>\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'...?'</span><span class=\"p\">)</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'...?'</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_eq</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"s1\">'?'</span>\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_constant</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_eq</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"s1\">'1'</span>\n    <span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_constant</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_constant</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_eq</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"s1\">'0'</span>\n\n<span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">,</span> <span class=\"n\">knownbits_and_contained_number</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_hypothesis_eq</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">t2</span><span class=\"p\">):</span>\n    <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span> <span class=\"o\">=</span> <span class=\"n\">t1</span>\n    <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">t2</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_eq</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">n1</span> <span class=\"o\">==</span> <span class=\"n\">n2</span><span class=\"p\">))</span>\n</pre></div>\n\n<p>Trying to do the proof in the same style as before breaks:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"o\">&gt;&gt;&gt;&gt;</span> <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_eq</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"knownbits.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">246</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">abstract_eq</span>\n    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_disagrees</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"venv/site-packages/z3/z3.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">381</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__bool__</span>\n    <span class=\"k\">raise</span> <span class=\"n\">Z3Exception</span><span class=\"p\">(</span><span class=\"s2\">\"Symbolic expressions cannot be cast to concrete Boolean values.\"</span><span class=\"p\">)</span>\n<span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">z3types</span><span class=\"o\">.</span><span class=\"n\">Z3Exception</span><span class=\"p\">:</span> <span class=\"n\">Symbolic</span> <span class=\"n\">expressions</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">cast</span> <span class=\"n\">to</span> <span class=\"n\">concrete</span> <span class=\"n\">Boolean</span> <span class=\"n\">values</span><span class=\"o\">.</span>\n</pre></div>\n\n<p>We cannot call <code>abstract_eq</code> on a <code>KnownBits</code> with Z3 variables as fields,\nbecause once we hit an <code>if</code> statement, the whole approach of relying on the\noperator overloading breaks down. Z3 doesn't actually parse the Python code or\nanything advanced like that, we rather build an expression only by running the\ncode and letting the Z3 formulas build up.</p>\n<p>To still prove the correctness of <code>abstract_eq</code> we need to manually transform\nthe control flow logic of the function into a Z3 formula that uses the <code>z3.If</code>\nexpression, using a small helper function:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">z3_cond</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">trueval</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">falseval</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">If</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">BitVecVal</span><span class=\"p\">(</span><span class=\"n\">trueval</span><span class=\"p\">),</span> <span class=\"n\">BitVecVal</span><span class=\"p\">(</span><span class=\"n\">falseval</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">z3_abstract_eq</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">):</span>\n    <span class=\"c1\"># follow the *logic* of abstract_eq, we can't call it due to the ifs in it</span>\n    <span class=\"n\">case1cond</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">(),</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">(),</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"o\">==</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">)</span>\n    <span class=\"n\">case2cond</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">_disagrees</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># ones is 1 in the first case, 0 otherwise</span>\n    <span class=\"n\">ones</span> <span class=\"o\">=</span> <span class=\"n\">z3_cond</span><span class=\"p\">(</span><span class=\"n\">case1cond</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># in the first two cases, unknowns is 0, 1 otherwise</span>\n    <span class=\"n\">unknowns</span> <span class=\"o\">=</span> <span class=\"n\">z3_cond</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Or</span><span class=\"p\">(</span><span class=\"n\">case1cond</span><span class=\"p\">,</span> <span class=\"n\">case2cond</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"n\">unknowns</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_z3_abstract_eq_logic</span><span class=\"p\">():</span>\n    <span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">z3_setup_variables</span><span class=\"p\">()</span>\n    <span class=\"n\">n3</span> <span class=\"o\">=</span> <span class=\"n\">z3_cond</span><span class=\"p\">(</span><span class=\"n\">n1</span> <span class=\"o\">==</span> <span class=\"n\">n2</span><span class=\"p\">)</span> <span class=\"c1\"># concrete result</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">z3_abstract_eq</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">n3</span><span class=\"p\">),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>This proof works. It is a lot less satisfying than the previous ones though,\nbecause we could have done an error in the manual transcription from Python code\nto Z3 formulas (there are possibly more heavy-handed approaches where we do\nthis transformation more automatically using e.g. the <code>ast</code> module to analyze\nthe source code, but that's a much more complicated researchy project). To\nlessen this problem somewhat we can factor out the parts of the logic that don't\nhave any conditions into small helper methods (like <code>_disagrees</code> in this\nexample) and use them in the manual conversion of the code to Z3 formulas.<sup id=\"fnref:tests_vs_proofs\"><a class=\"footnote-ref\" href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#fn:tests_vs_proofs\">2</a></sup></p>\n<p>The final condition that Z3 checks, btw, is this one:</p>\n<div class=\"code\"><pre class=\"code literal-block\">If(n1 == n2, 1, 0) &amp;\n~If(Or(And(n1_unkowns == 0,\n           n2_unkowns == 0,\n           n1_ones == n2_ones),\n       n1_ones &amp; ~n1_unkowns &amp; ~n2_unkowns !=\n       n2_ones &amp; ~n1_unkowns &amp; ~n2_unkowns),\n    0, 1) ==\nIf(And(n1_unkowns == 0, n2_unkowns == 0, n1_ones == n2_ones),\n   1, 0)\n</pre></div>\n\n<h3 id=\"making-statements-about-precision\">Making Statements about Precision</h3>\n<p>So far we have only used Z3 to prove statements about correctness, i.e. that\nour abstract operations overapproximate what can happen with concrete values.\nWhile proving this property is essential if we want to avoid miscompilation,\ncorrectness alone is not a very strong constraint on the implementation of our\nabstract transfer functions. We could simply return <code>Knownbits.unknowns()</code> for\nevery <code>abstract_*</code> method and the resulting overapproximation would be correct,\nbut useless in practice.</p>\n<p>It's much harder to make statements about whether the transfer functions are\nmaximally precise. There are two aspects of precision I want to discuss in this\nsection, however.</p>\n<p>The first aspect is that we would really like it if the transfer functions\ncompute the maximally precise results for singleton sets. If all abstract\narguments of an operations are constants, i.e. contain only a single concrete\nelement, then we know that the resulting set also has only a single element. We\ncan prove that all our transfer functions have this property:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">test_z3_prove_constant_folding</span><span class=\"p\">():</span>\n    <span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">z3_setup_variables</span><span class=\"p\">()</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_invert</span><span class=\"p\">()</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Implies</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">(),</span>\n                     <span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_and</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Implies</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">(),</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()),</span>\n                     <span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_or</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Implies</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">(),</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()),</span>\n                     <span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_sub</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Implies</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">(),</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()),</span>\n                     <span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">z3_abstract_eq</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Implies</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">(),</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()),</span>\n                     <span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">()),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Proving with Z3 that the transfer functions are maximally precise for\nnon-constant arguments seems to be relatively hard. I tried a few completely\nrigorous approaches and failed. The paper <a href=\"https://arxiv.org/pdf/2105.05398\">Sound, Precise, and Fast Abstract\nInterpretation with Tristate Numbers</a>\ncontains an optimality proof for the transfer functions of addition and\nsubtraction, so we can be certain that they are as precise as is\npossible.</p>\n<p>I still want to show an approach for trying to find concrete examples of\nabstract values that are less precise than they could be, using a combination\nof Hypothesis and Z3. The idea is to use hypothesis to pick random abstract\nvalues. Then we compute the abstract result using our transfer function.\nAfterwards we can ask Z3 to find us an abstract result that is better than the\none our transfer function produced. If Z3 finds a better abstract result, we\nhave a concrete example of imprecision for our transfer function. Those tests\naren't strict proofs, because they rely on generating random abstract values,\nbut they can still be valuable (not for the transfer functions in this blog\npost, which are all optimal).</p>\n<p>Here is what the code looks like (this is a little bit bonus content, I'll not\nexplain the details and can only hope that the comments are somewhat helpful):</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"n\">random_knownbits_and_contained_number</span><span class=\"p\">,</span> <span class=\"n\">random_knownbits_and_contained_number</span><span class=\"p\">)</span>\n<span class=\"nd\">@settings</span><span class=\"p\">(</span><span class=\"n\">deadline</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_check_precision</span><span class=\"p\">(</span><span class=\"n\">t1</span><span class=\"p\">,</span> <span class=\"n\">t2</span><span class=\"p\">):</span>\n    <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span> <span class=\"o\">=</span> <span class=\"n\">t1</span>\n    <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">t2</span>\n    <span class=\"c1\"># apply transfer function</span>\n    <span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">abstract_add</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">)</span>\n    <span class=\"n\">example_res</span> <span class=\"o\">=</span> <span class=\"n\">n1</span> <span class=\"o\">+</span> <span class=\"n\">n2</span>\n\n    <span class=\"c1\"># try to find a better version of k3 with Z3</span>\n    <span class=\"n\">solver</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Solver</span><span class=\"p\">()</span>\n    <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">\"timeout\"</span><span class=\"p\">,</span> <span class=\"mi\">8000</span><span class=\"p\">)</span>\n\n    <span class=\"n\">var1</span> <span class=\"o\">=</span> <span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s1\">'v1'</span><span class=\"p\">)</span>\n    <span class=\"n\">var2</span> <span class=\"o\">=</span> <span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s1\">'v2'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">ones</span> <span class=\"o\">=</span> <span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s1\">'ones'</span><span class=\"p\">)</span>\n    <span class=\"n\">unknowns</span> <span class=\"o\">=</span> <span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s1\">'unknowns'</span><span class=\"p\">)</span>\n    <span class=\"n\">better_k3</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">ones</span><span class=\"p\">,</span> <span class=\"n\">unknowns</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">k3</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># we're trying to find an example for a better k3, so we use check, without</span>\n    <span class=\"c1\"># negation:</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span>\n        <span class=\"c1\"># better_k3 should be a valid knownbits instance</span>\n        <span class=\"n\">better_k3</span><span class=\"o\">.</span><span class=\"n\">is_well_formed</span><span class=\"p\">(),</span>\n        <span class=\"c1\"># it should be better than k3, ie there are known bits in better_k3</span>\n        <span class=\"c1\"># that we don't have in k3</span>\n        <span class=\"n\">better_k3</span><span class=\"o\">.</span><span class=\"n\">knowns</span> <span class=\"o\">&amp;</span> <span class=\"o\">~</span><span class=\"n\">k3</span><span class=\"o\">.</span><span class=\"n\">knowns</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"c1\"># now encode the correctness condition for better_k3 with a ForAll:</span>\n        <span class=\"c1\"># for all concrete values var1 and var2, it must hold that if</span>\n        <span class=\"c1\"># var1 is in k1 and var2 is in k2 it follows that var1 + var2 is in</span>\n        <span class=\"c1\"># better_k3</span>\n        <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">ForAll</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"n\">var1</span><span class=\"p\">,</span> <span class=\"n\">var2</span><span class=\"p\">],</span>\n        <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Implies</span><span class=\"p\">(</span>\n            <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">var1</span><span class=\"p\">),</span> <span class=\"n\">k2</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">var2</span><span class=\"p\">)),</span>\n            <span class=\"n\">better_k3</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">var1</span> <span class=\"o\">+</span> <span class=\"n\">var2</span><span class=\"p\">)))))</span>\n    <span class=\"c1\"># if this query is satisfiable, we have found a better result for the</span>\n    <span class=\"c1\"># abstract_add</span>\n    <span class=\"k\">if</span> <span class=\"n\">res</span> <span class=\"o\">==</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">sat</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">()</span>\n        <span class=\"n\">rk3</span> <span class=\"o\">=</span> <span class=\"n\">KnownBits</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">ones</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_signed_long</span><span class=\"p\">(),</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">unknowns</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_signed_long</span><span class=\"p\">())</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"better\"</span><span class=\"p\">,</span> <span class=\"n\">rk3</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"mi\">0</span>\n    <span class=\"k\">if</span> <span class=\"n\">res</span> <span class=\"o\">==</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">unknown</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"timeout\"</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>It does not actually fail for <code>abstract_add</code> (nor the other abstract\nfunctions). To see the test failing we can add some imprecision to the\nimplementation of <code>abstract_add</code> to see Hypothesis and Z3 find examples of\nvalues that are not optimally precise (for example by setting some bits\nof <code>unknowns</code> in the implementation of <code>abstract_add</code> unconditionally).</p>\n<h3 id=\"using-the-abstract-domain-in-the-toy-optimizer-for-generalized-constant-folding\">Using the Abstract Domain in the Toy Optimizer for Generalized Constant Folding</h3>\n<p>Now after all this work we can finally actually use the knownbits abstract\ndomain in the toy optimizer. The code for this follows <a href=\"https://bernsteinbear.com/blog/toy-abstract-interpretation/\">Max' intro post about\nabstract interpretation</a>\nquite closely.</p>\n<p>For completeness sake, in the fold there's the basic infrastructure classes\nthat make up the IR again (they are identical or at least extremely close to\nthe previous toy posts).</p>\n<details>\n<summary>toy infrastructure</summary>\n\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">Value</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">\"abstract\"</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@dataclass</span><span class=\"p\">(</span><span class=\"n\">eq</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Operation</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">args</span> <span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Value</span><span class=\"p\">]</span>\n\n    <span class=\"n\">forwarded</span> <span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Value</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Value</span><span class=\"p\">:</span>\n        <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"bp\">self</span>\n        <span class=\"k\">while</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">Operation</span><span class=\"p\">):</span>\n            <span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">forwarded</span>\n            <span class=\"k\">if</span> <span class=\"nb\">next</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">op</span>\n            <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n        <span class=\"k\">return</span> <span class=\"n\">op</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">arg</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">make_equal_to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"p\">:</span> <span class=\"n\">Value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">forwarded</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n\n<span class=\"nd\">@dataclass</span><span class=\"p\">(</span><span class=\"n\">eq</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Constant</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">):</span>\n    <span class=\"n\">value</span> <span class=\"p\">:</span> <span class=\"nb\">object</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Block</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__getattr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">opname</span><span class=\"p\">):</span>\n        <span class=\"k\">def</span> <span class=\"nf\">wraparg</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span> <span class=\"n\">Value</span><span class=\"p\">):</span>\n                <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">arg</span>\n        <span class=\"k\">def</span> <span class=\"nf\">make_op</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n            <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">Operation</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span><span class=\"n\">wraparg</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">args</span><span class=\"p\">])</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">op</span>\n        <span class=\"k\">return</span> <span class=\"n\">make_op</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">bb_to_str</span><span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"p\">:</span> <span class=\"n\">Block</span><span class=\"p\">,</span> <span class=\"n\">varprefix</span> <span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"var\"</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">arg_to_str</span><span class=\"p\">(</span><span class=\"n\">arg</span> <span class=\"p\">:</span> <span class=\"n\">Value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span> <span class=\"n\">Constant</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">varnames</span><span class=\"p\">[</span><span class=\"n\">arg</span><span class=\"p\">]</span>\n\n    <span class=\"n\">varnames</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">):</span>\n        <span class=\"c1\"># give the operation a name used while</span>\n        <span class=\"c1\"># printing:</span>\n        <span class=\"n\">var</span> <span class=\"o\">=</span>  <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">varprefix</span><span class=\"si\">}{</span><span class=\"n\">index</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n        <span class=\"n\">varnames</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">var</span>\n        <span class=\"n\">arguments</span> <span class=\"o\">=</span> <span class=\"s2\">\", \"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n            <span class=\"n\">arg_to_str</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span>\n                <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">))</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">strop</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">var</span><span class=\"si\">}</span><span class=\"s2\"> = </span><span class=\"si\">{</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">(</span><span class=\"si\">{</span><span class=\"n\">arguments</span><span class=\"si\">}</span><span class=\"s2\">)\"</span>\n        <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">strop</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n</pre></div>\n\n\n\n</details>\n\n<p>Now we can write some first tests, the first one simply checking constant\nfolding:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">test_constfold_two_ops</span><span class=\"p\">():</span>\n    <span class=\"n\">bb</span> <span class=\"o\">=</span> <span class=\"n\">Block</span><span class=\"p\">()</span>\n    <span class=\"n\">var0</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">var1</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_add</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n    <span class=\"n\">var2</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_add</span><span class=\"p\">(</span><span class=\"n\">var1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"n\">var3</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_add</span><span class=\"p\">(</span><span class=\"n\">var2</span><span class=\"p\">,</span> <span class=\"n\">var0</span><span class=\"p\">)</span>\n\n    <span class=\"n\">opt_bb</span> <span class=\"o\">=</span> <span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">bb</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">bb_to_str</span><span class=\"p\">(</span><span class=\"n\">opt_bb</span><span class=\"p\">,</span> <span class=\"s2\">\"optvar\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"\"\"</span><span class=\"se\">\\</span>\n<span class=\"s2\">optvar0 = getarg(0)</span>\n<span class=\"s2\">optvar1 = int_add(19, optvar0)\"\"\"</span>\n</pre></div>\n\n<p>Calling the transfer functions on constant <code>KnownBits</code> produces a constant\nresults, as we have seen. Therefore \"regular\" constant folding should hopefully\nbe achieved by optimizing with the <code>KnownBits</code> abstract domain too.</p>\n<p>The next two tests are slightly more complicated and can't be optimized by\nregular constant-folding. They follow the motivating examples from the start of\nthis blog post, a hundred years ago:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">def</span><span class=\"w\"> </span><span class=\"n\">test_constfold_via_knownbits</span><span class=\"p\">():</span>\n<span class=\"w\">    </span><span class=\"n\">bb</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Block</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"n\">var0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">var1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_or</span><span class=\"p\">(</span><span class=\"n\">var0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">var2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">var1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">var3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">dummy</span><span class=\"p\">(</span><span class=\"n\">var2</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"n\">opt_bb</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">bb</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nb\">assert</span><span class=\"w\"> </span><span class=\"n\">bb_to_str</span><span class=\"p\">(</span><span class=\"n\">opt_bb</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"optvar\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s2\">\"\"\"</span><span class=\"se\">\\</span>\n<span class=\"s2\">optvar0 = getarg(0)</span>\n<span class=\"s2\">optvar1 = int_or(optvar0, 1)</span>\n<span class=\"s2\">optvar2 = dummy(1)\"\"\"</span>\n\n<span class=\"n\">def</span><span class=\"w\"> </span><span class=\"n\">test_constfold_alignment_check</span><span class=\"p\">():</span>\n<span class=\"w\">    </span><span class=\"n\">bb</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Block</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"n\">var0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">var1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_invert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"n\">b111</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"c1\"># mask off the lowest three bits, thus var2 is aligned</span>\n<span class=\"w\">    </span><span class=\"n\">var2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">var0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">var1</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"c1\"># add 16 to aligned quantity</span>\n<span class=\"w\">    </span><span class=\"n\">var3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_add</span><span class=\"p\">(</span><span class=\"n\">var2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"c1\"># check alignment of result</span>\n<span class=\"w\">    </span><span class=\"n\">var4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">var3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">b111</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">var5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_eq</span><span class=\"p\">(</span><span class=\"n\">var4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"c1\"># var5 should be const-folded to 1</span>\n<span class=\"w\">    </span><span class=\"n\">var6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">dummy</span><span class=\"p\">(</span><span class=\"n\">var5</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"n\">opt_bb</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">bb</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nb\">assert</span><span class=\"w\"> </span><span class=\"n\">bb_to_str</span><span class=\"p\">(</span><span class=\"n\">opt_bb</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"optvar\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s2\">\"\"\"</span><span class=\"se\">\\</span>\n<span class=\"s2\">optvar0 = getarg(0)</span>\n<span class=\"s2\">optvar1 = int_and(optvar0, -8)</span>\n<span class=\"s2\">optvar2 = int_add(optvar1, 16)</span>\n<span class=\"s2\">optvar3 = dummy(1)\"\"\"</span>\n</pre></div>\n\n<p>Here is <code>simplify</code> to make these tests pass:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">unknown_transfer_functions</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">abstract_args</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">all_unknown</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">simplify</span><span class=\"p\">(</span><span class=\"n\">bb</span><span class=\"p\">:</span> <span class=\"n\">Block</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Block</span><span class=\"p\">:</span>\n    <span class=\"n\">abstract_values</span> <span class=\"o\">=</span> <span class=\"p\">{}</span> <span class=\"c1\"># dict mapping Operation to KnownBits</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">knownbits_of</span><span class=\"p\">(</span><span class=\"n\">val</span> <span class=\"p\">:</span> <span class=\"n\">Value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">Constant</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">KnownBits</span><span class=\"o\">.</span><span class=\"n\">from_constant</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">abstract_values</span><span class=\"p\">[</span><span class=\"n\">val</span><span class=\"p\">]</span>\n\n    <span class=\"n\">opt_bb</span> <span class=\"o\">=</span> <span class=\"n\">Block</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"n\">bb</span><span class=\"p\">:</span>\n        <span class=\"c1\"># apply the transfer function on the abstract arguments</span>\n        <span class=\"n\">name_without_prefix</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">removeprefix</span><span class=\"p\">(</span><span class=\"s2\">\"int_\"</span><span class=\"p\">)</span>\n        <span class=\"n\">method_name</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"abstract_</span><span class=\"si\">{</span><span class=\"n\">name_without_prefix</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n        <span class=\"n\">transfer_function</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">KnownBits</span><span class=\"p\">,</span> <span class=\"n\">method_name</span><span class=\"p\">,</span> <span class=\"n\">unknown_transfer_functions</span><span class=\"p\">)</span>\n        <span class=\"n\">abstract_args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">knownbits_of</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">())</span> <span class=\"k\">for</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">]</span>\n        <span class=\"n\">abstract_res</span> <span class=\"o\">=</span> <span class=\"n\">abstract_values</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">transfer_function</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">abstract_args</span><span class=\"p\">)</span>\n        <span class=\"c1\"># if the result is a constant, we optimize the operation away and make</span>\n        <span class=\"c1\"># it equal to the constant result</span>\n        <span class=\"k\">if</span> <span class=\"n\">abstract_res</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">():</span>\n            <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">make_equal_to</span><span class=\"p\">(</span><span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"n\">abstract_res</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">))</span>\n            <span class=\"k\">continue</span>\n        <span class=\"c1\"># otherwise emit the op</span>\n        <span class=\"n\">opt_bb</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">opt_bb</span>\n</pre></div>\n\n<p>The code follows the approach from the previous blog post very closely. The\nonly difference is that we apply the transfer function <em>first</em>, to be able to\ndetect whether the abstract domain can tell us that the result has to always be\na constant. This code makes all three tests pass.</p>\n<h3 id=\"using-the-knownbits-domain-for-conditional-peephole-rewrites\">Using the <code>KnownBits</code> Domain for Conditional Peephole Rewrites</h3>\n<p>So far we are only using the <code>KnownBits</code> domain to find out that certain\noperations have to produce a constant. We can also use the <code>KnownBits</code> domain\nto check whether certain operation rewrites are correct. Let's use one of the\nexamples from the <a href=\"https://www.pypy.org/posts/2024/07/mining-jit-traces-missing-optimizations-z3.html\">Mining JIT traces for missing optimizations with\nZ3</a>\npost, where Z3 found the inefficiency <code>(x &lt;&lt; 4) &amp; -0xf == x &lt;&lt; 4</code> in PyPy JIT\ntraces. We don't have shift operations, but we want to generalize this optimization\nanyway. The general form of this rewrite is that under some circumstances <code>x &amp;\ny == x</code>, and we can use the <code>KnownBits</code> domain to detect situations where this\nmust be true.</p>\n<p>To understand <em>when</em> <code>x &amp; y == x</code> is true, we can think about individual pairs of\nbits <code>a</code> and <code>b</code>. If <code>a == 0</code>, then <code>a &amp; b == 0 &amp; b == 0 == a</code>. If <code>b == 1</code>\nthen <code>a &amp; b == a &amp; 1 == a</code>. So if either <code>a == 0</code> or <code>b == 1</code> is true,\n<code>a &amp; b == a</code> follows. And if either of these conditions is true for <em>all</em> the\nbits of <code>x</code> and <code>y</code>, we can know that <code>x &amp; y == x</code>.</p>\n<p>We can write a method on <code>KnownBits</code> to check for this condition:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">KnownBits</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_and_identity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\" Return True if n1 &amp; n2 == n1 for any n1 in self and n2 in other.</span>\n<span class=\"sd\">        (or, equivalently, return True if n1 | n2 == n2)\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">zeros</span> <span class=\"o\">|</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">ones</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n</pre></div>\n\n<p>Since my reasoning about this feels ripe for errors, let's check that our\nunderstanding is correct with Z3:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">test_prove_is_and_identity</span><span class=\"p\">():</span>\n    <span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">z3_setup_variables</span><span class=\"p\">()</span>\n    <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Implies</span><span class=\"p\">(</span><span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">is_and_identity</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">),</span> <span class=\"n\">n1</span> <span class=\"o\">&amp;</span> <span class=\"n\">n2</span> <span class=\"o\">==</span> <span class=\"n\">n1</span><span class=\"p\">),</span> <span class=\"n\">solver</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Now let's use this in the toy optimizer. Here are two tests for this rewrite:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">test_remove_redundant_and</span><span class=\"p\">():</span>\n    <span class=\"n\">bb</span> <span class=\"o\">=</span> <span class=\"n\">Block</span><span class=\"p\">()</span>\n    <span class=\"n\">var0</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">var1</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_invert</span><span class=\"p\">(</span><span class=\"mb\">0b1111</span><span class=\"p\">)</span>\n    <span class=\"c1\"># mask off the lowest four bits</span>\n    <span class=\"n\">var2</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">var0</span><span class=\"p\">,</span> <span class=\"n\">var1</span><span class=\"p\">)</span>\n    <span class=\"c1\"># applying the same mask is not redundant</span>\n    <span class=\"n\">var3</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">var2</span><span class=\"p\">,</span> <span class=\"n\">var1</span><span class=\"p\">)</span>\n    <span class=\"n\">var4</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">dummy</span><span class=\"p\">(</span><span class=\"n\">var3</span><span class=\"p\">)</span>\n\n    <span class=\"n\">opt_bb</span> <span class=\"o\">=</span> <span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">bb</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">bb_to_str</span><span class=\"p\">(</span><span class=\"n\">opt_bb</span><span class=\"p\">,</span> <span class=\"s2\">\"optvar\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"\"\"</span><span class=\"se\">\\</span>\n<span class=\"s2\">optvar0 = getarg(0)</span>\n<span class=\"s2\">optvar1 = int_and(optvar0, -16)</span>\n<span class=\"s2\">optvar2 = dummy(optvar1)\"\"\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_remove_redundant_and_more_complex</span><span class=\"p\">():</span>\n    <span class=\"n\">bb</span> <span class=\"o\">=</span> <span class=\"n\">Block</span><span class=\"p\">()</span>\n    <span class=\"n\">var0</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">var1</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"c1\"># var2 has bit pattern ????</span>\n    <span class=\"n\">var2</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">var0</span><span class=\"p\">,</span> <span class=\"mb\">0b1111</span><span class=\"p\">)</span>\n    <span class=\"c1\"># var3 has bit pattern ...?1111</span>\n    <span class=\"n\">var3</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_or</span><span class=\"p\">(</span><span class=\"n\">var1</span><span class=\"p\">,</span> <span class=\"mb\">0b1111</span><span class=\"p\">)</span>\n    <span class=\"c1\"># var4 is just var2</span>\n    <span class=\"n\">var4</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">var2</span><span class=\"p\">,</span> <span class=\"n\">var3</span><span class=\"p\">)</span>\n    <span class=\"n\">var5</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">dummy</span><span class=\"p\">(</span><span class=\"n\">var4</span><span class=\"p\">)</span>\n\n    <span class=\"n\">opt_bb</span> <span class=\"o\">=</span> <span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">bb</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">bb_to_str</span><span class=\"p\">(</span><span class=\"n\">opt_bb</span><span class=\"p\">,</span> <span class=\"s2\">\"optvar\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"\"\"</span><span class=\"se\">\\</span>\n<span class=\"s2\">optvar0 = getarg(0)</span>\n<span class=\"s2\">optvar1 = getarg(1)</span>\n<span class=\"s2\">optvar2 = int_and(optvar0, 15)</span>\n<span class=\"s2\">optvar3 = int_or(optvar1, 15)</span>\n<span class=\"s2\">optvar4 = dummy(optvar2)\"\"\"</span>\n</pre></div>\n\n<p>The first test could also be made to pass by implementing a reassociation\noptimization that turns <code>(x &amp; c1) &amp; c2</code> into <code>x &amp; (c1 &amp; c2)</code> and then constant-folds the second <code>and</code>. But here we want to\nuse <code>KnownBits</code> and conditionally rewrite <code>int_and</code> to its first argument. So to make the tests pass,\nwe can change <code>simplify</code> like this:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">simplify</span><span class=\"p\">(</span><span class=\"n\">bb</span><span class=\"p\">:</span> <span class=\"n\">Block</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Block</span><span class=\"p\">:</span>\n    <span class=\"n\">abstract_values</span> <span class=\"o\">=</span> <span class=\"p\">{}</span> <span class=\"c1\"># dict mapping Operation to KnownBits</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">knownbits_of</span><span class=\"p\">(</span><span class=\"n\">val</span> <span class=\"p\">:</span> <span class=\"n\">Value</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"n\">opt_bb</span> <span class=\"o\">=</span> <span class=\"n\">Block</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"n\">bb</span><span class=\"p\">:</span>\n        <span class=\"c1\"># apply the transfer function on the abstract arguments</span>\n        <span class=\"n\">name_without_prefix</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">removeprefix</span><span class=\"p\">(</span><span class=\"s2\">\"int_\"</span><span class=\"p\">)</span>\n        <span class=\"n\">method_name</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"abstract_</span><span class=\"si\">{</span><span class=\"n\">name_without_prefix</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n        <span class=\"n\">transfer_function</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">KnownBits</span><span class=\"p\">,</span> <span class=\"n\">method_name</span><span class=\"p\">,</span> <span class=\"n\">unknown_transfer_functions</span><span class=\"p\">)</span>\n        <span class=\"n\">abstract_args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">knownbits_of</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">())</span> <span class=\"k\">for</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">]</span>\n        <span class=\"n\">abstract_res</span> <span class=\"o\">=</span> <span class=\"n\">abstract_values</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">transfer_function</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">abstract_args</span><span class=\"p\">)</span>\n        <span class=\"c1\"># if the result is a constant, we optimize the operation away and make</span>\n        <span class=\"c1\"># it equal to the constant result</span>\n        <span class=\"k\">if</span> <span class=\"n\">abstract_res</span><span class=\"o\">.</span><span class=\"n\">is_constant</span><span class=\"p\">():</span>\n            <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">make_equal_to</span><span class=\"p\">(</span><span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"n\">abstract_res</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">))</span>\n            <span class=\"k\">continue</span>\n        <span class=\"c1\"># &lt;&lt;&lt;&lt; new code</span>\n        <span class=\"c1\"># conditionally rewrite int_and(x, y) to x</span>\n        <span class=\"k\">if</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_and\"</span><span class=\"p\">:</span>\n            <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">abstract_args</span>\n            <span class=\"k\">if</span> <span class=\"n\">k1</span><span class=\"o\">.</span><span class=\"n\">is_and_identity</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">):</span>\n                <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">make_equal_to</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n                <span class=\"k\">continue</span>\n        <span class=\"c1\"># &gt;&gt;&gt;&gt; end changes</span>\n        <span class=\"n\">opt_bb</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">opt_bb</span>\n</pre></div>\n\n<p>And with that, the new tests pass as well. A real implementation would also\ncheck the other argument order, but we leave that out for the sake of brevity.</p>\n<p>This rewrite also generalizes the <a href=\"https://pypy.org/posts/2024/07/finding-simple-rewrite-rules-jit-z3.html\">rewrites</a> <code>int_and(0, x) -&gt; 0</code> and\n<code>int_and(-1, x) -&gt; x</code>, let's add a test for those:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">test_remove_and_simple</span><span class=\"p\">():</span>\n    <span class=\"n\">bb</span> <span class=\"o\">=</span> <span class=\"n\">Block</span><span class=\"p\">()</span>\n    <span class=\"n\">var0</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">var1</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">var2</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">var0</span><span class=\"p\">)</span> <span class=\"c1\"># == 0</span>\n    <span class=\"n\">var3</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_invert</span><span class=\"p\">(</span><span class=\"n\">var2</span><span class=\"p\">)</span> <span class=\"c1\"># == -1</span>\n    <span class=\"n\">var4</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">var1</span><span class=\"p\">,</span> <span class=\"n\">var3</span><span class=\"p\">)</span> <span class=\"c1\"># == var1</span>\n    <span class=\"n\">var5</span> <span class=\"o\">=</span> <span class=\"n\">bb</span><span class=\"o\">.</span><span class=\"n\">dummy</span><span class=\"p\">(</span><span class=\"n\">var4</span><span class=\"p\">)</span>\n\n    <span class=\"n\">opt_bb</span> <span class=\"o\">=</span> <span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">bb</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">bb_to_str</span><span class=\"p\">(</span><span class=\"n\">opt_bb</span><span class=\"p\">,</span> <span class=\"s2\">\"optvar\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"\"\"</span><span class=\"se\">\\</span>\n<span class=\"s2\">optvar0 = getarg(0)</span>\n<span class=\"s2\">optvar1 = getarg(1)</span>\n<span class=\"s2\">optvar2 = dummy(optvar1)\"\"\"</span>\n</pre></div>\n\n<p>This test just passes. And that's it for this post!</p>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>In this post we've seen the implementation, testing and proofs about a 'known\nbits' abstract domain, as well as its use in the toy optimizer to generalize\nconstant folding, and to implement conditional peephole rewrites.</p>\n<p>In the next posts I'll write about the real implementation of a knownbits\ndomain in PyPy's JIT, its combination with the existing interval abstract\ndomain, how to deal with gaining information from conditions in the program,\nand some lose ends.</p>\n<p>Sources:</p>\n<ul>\n<li><a href=\"https://github.com/llvm/llvm-project/blob/main/llvm/lib/Support/KnownBits.cpp\">Known bits in LLVM</a></li>\n<li><a href=\"https://github.com/torvalds/linux/blob/master/kernel/bpf/tnum.c\">Tristate numbers for known bits in Linux eBPF</a></li>\n<li><a href=\"https://arxiv.org/abs/2105.05398\">Sound, Precise, and Fast Abstract Interpretation with Tristate Numbers</a></li>\n<li><a href=\"https://people.cs.rutgers.edu/~sn349/papers/agni-cav2023.pdf\">Verifying the Veriﬁer: eBPF Range Analysis Veriﬁcation</a></li>\n<li><a href=\"https://dougallj.wordpress.com/2020/01/13/bit-twiddling-addition-with-unknown-bits/\">Bit-Twiddling: Addition with Unknown\n  Bits</a>\n  is a super readable blog post by Dougall J. I've taken the <code>ones</code> and\n  <code>unknowns</code> naming from this post, which I find significantly clearer than\n  <code>value</code> and <code>mask</code>, which the Linux kernel uses.</li>\n<li><a href=\"https://bitmath.blogspot.com/\">Bits, Math and Performance(?)</a>, a fantastic\n  blog by <a href=\"https://mastodon.gamedev.place/@harold\">Harold Aptroot</a>. There are a\n  lot of relevant posts about known bits, range analysis etc. Harold is also\n  the author of <a href=\"http://haroldbot.nl/\">Haroldbot</a>, a website that can be used\n  for bitvector calculations, and also checks bitvector identities.</li>\n<li><a href=\"https://cea.hal.science/cea-01795779/document\">Sharpening Constraint Programming approaches for Bit-Vector Theory</a></li>\n<li><a href=\"https://users.cs.utah.edu/~regehr/papers/lctes06_2/fp019-regehr.pdf\">Deriving Abstract Transfer Functions for Analyzing Embedded Software</a></li>\n<li><a href=\"https://arxiv.org/abs/2105.00493\">Synthesizing Abstract Transformers</a></li>\n</ul>\n<div class=\"footnote\">\n<hr>\n<ol>\n<li id=\"fn:proof_bitwidths\">\n<p>There's a subtletly about the Z3 proofs that I'm sort of\nglossing over here. Python integers are of arbitrary width, and the\n<code>KnownBits</code> code is actually carefully written to work for integers of any\nsize. This property is tested by the Hypothesis tests, which don't limit\nthe sizes of the generated random integers. However, the Z3 proofs only\ncheck bitvectors of a fixed bitwidth of 64. There are various ways to deal\nwith this situation. For most \"real\" compilers, the bitwidth of integers\nwould be fixed anyway. Then the components <code>ones</code> and <code>unknowns</code> of the\n<code>KnownBits</code> class would use the number of bits the corresponding integer\nvariable has, and the Z3 proofs would use the same width. This is what we\ndo in the PyPy JIT. <a class=\"footnote-backref\" href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#fnref:proof_bitwidths\" title=\"Jump back to footnote 1 in the text\">↩</a></p>\n</li>\n<li id=\"fn:tests_vs_proofs\">\n<p>The less close connection between implementation and proof\nfor <code>abstract_eq</code> is one of the reasons why it makes sense to do\nunit-testing <em>in addition</em> to proofs. For a more detailed explanation of\nwhy both tests and proofs are good to\nhave, see <a href=\"https://siek.blogspot.com/2024/06/data-structures-and-algorithms-correctly.html#correct-software-via-write-test-and-prove:~:text=We%20recognize%20that%20once%20step,detect%20most%20of%20the%20bugs\">Jeremy Siek's blog\npost</a>,\nas well as the <a href=\"https://www-cs-faculty.stanford.edu/~knuth/faq.html#:~:text=What's%20the%20exact%20citation%20of%20your%20oft%2Dcited%20comment%20about%20bugs?\">Knuth\nquote</a>. <a class=\"footnote-backref\" href=\"https://www.pypy.org/posts/2024/08/toy-knownbits.html#fnref:tests_vs_proofs\" title=\"Jump back to footnote 2 in the text\">↩</a></p>\n</li>\n</ol>\n</div>",
      "id": "https://www.pypy.org/posts/2024/08/toy-knownbits.html",
      "link": "https://www.pypy.org/posts/2024/08/toy-knownbits.html",
      "links": [],
      "published": "2024-08-03T14:00:00+00:00",
      "tags": [
        {
          "label": null,
          "scheme": null,
          "term": "toy-optimizer"
        },
        {
          "label": null,
          "scheme": null,
          "term": "z3"
        }
      ],
      "title": "A Knownbits Abstract Domain for the Toy Optimizer, Correctly"
    },
    {
      "author": "Max Bernstein",
      "content": [
        {
          "base": null,
          "language": null,
          "type": "text/html",
          "value": "<p>This is a <a href=\"https://bernsteinbear.com/blog/toy-abstract-interpretation/\" rel=\"canonical\">cross-post</a>\nfrom Max Bernstein from his excellent blog where he writes about programming\nlanguages, compilers, optimizations, virtual machines. He's looking for a\n(dynamic language runtime or compiler related) job too.</p>\n<hr>\n<p>CF Bolz-Tereick wrote some excellent posts in which they <a href=\"https://pypy.org/posts/2022/07/toy-optimizer.html\">introduce a small IR\nand optimizer</a> and <a href=\"https://pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html\">extend it with allocation\nremoval</a>. We also did a live stream together in which\nwe did <a href=\"https://www.youtube.com/watch?v=w-UHg0yOPSE\">some more heap optimizations</a>.</p>\n<p>In this blog post, I'm going to write a small abstract interpreter for the Toy\nIR and then show how we can use it to do some simple optimizations. It assumes\nthat you are familiar with the little IR, which I have reproduced unchanged in\n<a href=\"https://gist.github.com/tekknolagi/4425b28d5267e7bae8b0d7ef8fb4a671\">a GitHub Gist</a>.</p>\n<p>Abstract interpretation is a general framework for efficiently computing\nproperties that must be true for all possible executions of a program. It's a\nwidely used approach both in compiler optimizations as well as offline static\nanalysis for finding bugs. I'm writing this post to pave the way for CF's next\npost on proving abstract interpreters correct for range analysis and known bits\nanalysis inside PyPy.</p>\n<p>Before we begin, I want to note a couple of things:</p>\n<ul>\n<li>The Toy IR is in SSA form, which means that every variable is defined exactly\n  once. This means that abstract properties of each variable are easy to track.</li>\n<li>The Toy IR represents a linear trace without control flow, meaning we won't\n  talk about meet/join or fixpoints. They only make sense if the IR has a\n  notion of conditional branches or back edges (loops).</li>\n</ul>\n<p>Alright, let's get started.</p>\n<h3 id=\"welcome-to-abstract-interpretation\">Welcome to abstract interpretation</h3>\n<p>Abstract interpretation means a couple different things to different people.\nThere's rigorous mathematical formalism thanks to Patrick and Radhia Cousot,\nour favorite power couple, and there's also sketchy hand-wavy stuff like what\nwill follow in this post. In the end, all people are trying to do is reason\nabout program behavior without running it.</p>\n<p>In particular, abstract interpretation is an <em>over-approximation</em> of the\nbehavior of a program. Correctly implemented abstract interpreters never lie,\nbut they might be a little bit pessimistic. This is because instead of using\nreal values and running the program---which would produce a concrete result and\nsome real-world behavior---we \"run\" the program with a parallel universe of\n<em>abstract</em> values. This abstract run gives us information about all possible\nruns of the program.<sup id=\"fnref:logozzo\"><a class=\"footnote-ref\" href=\"https://www.pypy.org/posts/2024/07/toy-abstract-interpretation.html#fn:logozzo\">1</a></sup></p>\n<p>Abstract values always represent sets of concrete values. Instead of literally\nstoring a set (in the world of integers, for example, it could get pretty\nbig...there are a lot of integers), we group them into a finite number of named\nsubsets.<sup id=\"fnref:lattices\"><a class=\"footnote-ref\" href=\"https://www.pypy.org/posts/2024/07/toy-abstract-interpretation.html#fn:lattices\">2</a></sup></p>\n<p>Let's learn a little about abstract interpretation with an example program and\nexample abstract domain. Here's the example program:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">v0</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">,</span> <span class=\"n\">v1</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>And our abstract domain is \"is the number positive\" (where \"positive\" means\nnonnegative, but I wanted to keep the words distinct):</p>\n<div class=\"code\"><pre class=\"code literal-block\">       top\n    /       \\\npositive    negative\n    \\       /\n      bottom\n</pre></div>\n\n<p>The special <em>top</em> value means \"I don't know\" and the special <em>bottom</em> value\nmeans \"empty set\" or \"unreachable\". The <em>positive</em> and <em>negative</em> values\nrepresent the sets of all positive and negative numbers, respectively.</p>\n<p>We initialize all the variables <code>v0</code>, <code>v1</code>, and <code>v2</code> to <em>bottom</em> and then walk\nour IR, updating our knowledge as we go.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"c1\"># here</span>\n<span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"n\">bottom</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"n\">bottom</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">v2</span><span class=\"p\">:</span><span class=\"n\">bottom</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">,</span> <span class=\"n\">v1</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>In order to do that, we have to have <em>transfer functions</em> for each operation.\nFor constants, the transfer function is easy: determine if the constant is\npositive or negative. For other operations, we have to define a function that\ntakes the abstract values of the operands and returns the abstract value of the\nresult.</p>\n<p>In order to be correct, transfer functions for operations have to be compatible\nwith the behavior of their corresponding concrete implementations. You can\nthink of them having an implicit universal quantifier <em>forall</em> in front of\nthem.</p>\n<p>Let's step through the constants at least:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"n\">positive</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"n\">positive</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"c1\"># here</span>\n<span class=\"n\">v2</span><span class=\"p\">:</span><span class=\"n\">bottom</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">,</span> <span class=\"n\">v1</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Now we need to figure out the transfer function for <code>add</code>. It's kind of tricky\nright now because we haven't specified our abstract domain very well. I keep\nsaying \"numbers\", but what kinds of numbers? Integers? Real numbers? Floating\npoint? Some kind of fixed-width bit vector (<code>int8</code>, <code>uint32</code>, ...) like an\nactual machine \"integer\"?</p>\n<p>For this post, I am going to use the mathematical definition of integer, which\nmeans that the values are not bounded in size and therefore do not overflow.\nActual hardware memory constraints aside, this is kind of like a Python <code>int</code>.</p>\n<p>So let's look at what happens when we add two abstract numbers:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>top</th>\n<th>positive</th>\n<th>negative</th>\n<th>bottom</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>top</strong></td>\n<td>top</td>\n<td>top</td>\n<td>top</td>\n<td>bottom</td>\n</tr>\n<tr>\n<td><strong>positive</strong></td>\n<td>top</td>\n<td>positive</td>\n<td>top</td>\n<td>bottom</td>\n</tr>\n<tr>\n<td><strong>negative</strong></td>\n<td>top</td>\n<td>top</td>\n<td>negative</td>\n<td>bottom</td>\n</tr>\n<tr>\n<td><strong>bottom</strong></td>\n<td>bottom</td>\n<td>bottom</td>\n<td>bottom</td>\n<td>bottom</td>\n</tr>\n</tbody>\n</table>\n<p>As an example, let's try to add two numbers <code>a</code> and <code>b</code>, where <code>a</code> is positive\nand <code>b</code> is negative. We don't know anything about their values other than their\nsigns. They could be <code>5</code> and <code>-3</code>, where the result is <code>2</code>, or they could be\n<code>1</code> and <code>-100</code>, where the result is <code>-99</code>. This is why we can't say anything\nabout the result of this operation and have to return <em>top</em>.</p>\n<p>The short of this table is that we only really know the result of an addition\nif both operands are positive or both operands are negative. Thankfully, in\nthis example, both operands are known positive. So we can learn something about\n<code>v2</code>:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"n\">positive</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"n\">positive</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">v2</span><span class=\"p\">:</span><span class=\"n\">positive</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">,</span> <span class=\"n\">v1</span><span class=\"p\">)</span>\n<span class=\"c1\"># here</span>\n</pre></div>\n\n<p>This may not seem useful in isolation, but analyzing more complex programs even\nwith this simple domain may be able to remove checks such as <code>if (v2 &lt; 0) { ... }</code>.</p>\n<p>Let's take a look at another example using an sample <code>absval</code> (absolute value)\nIR operation:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">v0</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">absval</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">)</span>\n<span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">absval</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n<span class=\"n\">v4</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"n\">v5</span> <span class=\"o\">=</span> <span class=\"n\">absval</span><span class=\"p\">(</span><span class=\"n\">v4</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Even though we have no constant/concrete values, we can still learn something\nabout the states of values throughout the program. Since we know that <code>absval</code>\nalways returns a positive number, we learn that <code>v2</code>, <code>v3</code>, and <code>v4</code> are all\npositive. This means that we can optimize out the <code>absval</code> operation on <code>v5</code>:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span><span class=\"p\">:</span><span class=\"n\">positive</span> <span class=\"o\">=</span> <span class=\"n\">absval</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">)</span>\n<span class=\"n\">v3</span><span class=\"p\">:</span><span class=\"n\">positive</span> <span class=\"o\">=</span> <span class=\"n\">absval</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n<span class=\"n\">v4</span><span class=\"p\">:</span><span class=\"n\">positive</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"n\">v5</span><span class=\"p\">:</span><span class=\"n\">positive</span> <span class=\"o\">=</span> <span class=\"n\">v4</span>\n</pre></div>\n\n<p>Other interesting lattices include:</p>\n<ul>\n<li>Constants (where the middle row is pretty wide)</li>\n<li>Range analysis (bounds on min and max of a number)</li>\n<li>Known bits (using a bitvector representation of a number, which bits are\n  always 0 or 1)</li>\n</ul>\n<p>For the rest of this blog post, we are going to do a very limited version of\n\"known bits\", called <em>parity</em>. This analysis only tracks the least significant\nbit of a number, which indicates if it is even or odd.</p>\n<h3 id=\"parity\">Parity</h3>\n<p>The lattice is pretty similar to the positive/negative lattice:</p>\n<div class=\"code\"><pre class=\"code literal-block\">    top\n  /     \\\neven    odd\n  \\     /\n   bottom\n</pre></div>\n\n<p>Let's define a data structure to represent this in Python code:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">Parity</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n</pre></div>\n\n<p>And instantiate the members of the lattice:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">TOP</span> <span class=\"o\">=</span> <span class=\"n\">Parity</span><span class=\"p\">(</span><span class=\"s2\">\"top\"</span><span class=\"p\">)</span>\n<span class=\"n\">EVEN</span> <span class=\"o\">=</span> <span class=\"n\">Parity</span><span class=\"p\">(</span><span class=\"s2\">\"even\"</span><span class=\"p\">)</span>\n<span class=\"n\">ODD</span> <span class=\"o\">=</span> <span class=\"n\">Parity</span><span class=\"p\">(</span><span class=\"s2\">\"odd\"</span><span class=\"p\">)</span>\n<span class=\"n\">BOTTOM</span> <span class=\"o\">=</span> <span class=\"n\">Parity</span><span class=\"p\">(</span><span class=\"s2\">\"bottom\"</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Now let's write a forward flow analysis of a basic block using this lattice.\nWe'll do that by assuming that a method on <code>Parity</code> is defined for each IR\noperation. For example, <code>Parity.add</code>, <code>Parity.lshift</code>, etc.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">analyze</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">:</span> <span class=\"n\">Block</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"n\">parity</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">BOTTOM</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">block</span><span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parity_of</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">Constant</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">Parity</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">parity</span><span class=\"p\">[</span><span class=\"n\">value</span><span class=\"p\">]</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"n\">block</span><span class=\"p\">:</span>\n        <span class=\"n\">transfer</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">Parity</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">parity_of</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">())</span> <span class=\"k\">for</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">]</span>\n        <span class=\"n\">parity</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">transfer</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>For every operation, we compute the abstract value---the parity---of the\narguments and then call the corresponding method on <code>Parity</code> to get the\nabstract result.</p>\n<!-- TODO maybe learn more about different IRs and how they do constants.\napparently pypy/llvm are free-floating; cinder is not -->\n<p>We need to special case <code>Constant</code>s due to a quirk of how the Toy IR is\nconstructed: the constants don't appear in the instruction stream and instead\nare free-floating.</p>\n<p>Let's start by looking at the abstraction function for concrete\nvalues---constants:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">Parity</span><span class=\"p\">:</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">const</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">EVEN</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">ODD</span>\n</pre></div>\n\n<p>Seems reasonable enough. Let's pause on operations for a moment and consider an\nexample program:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">v0</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">lshift</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">lshift</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v4</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"n\">v5</span> <span class=\"o\">=</span> <span class=\"n\">dummy</span><span class=\"p\">(</span><span class=\"n\">v4</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>This function (which is admittedly a little contrived) takes two inputs, shifts\nthem left by one bit, adds the result, and then checks the least significant\nbit of the addition result. It then passes that result into a <code>dummy</code> function,\nwhich you can think of as \"return\" or \"escape\".</p>\n<p>To do some abstract interpretation on this program, we'll need to implement the\ntransfer functions for <code>lshift</code> and <code>add</code> (<code>dummy</code> will just always return\n<code>TOP</code>). We'll start with <code>add</code>. Remember that adding two even numbers returns\nan even number, adding two odd numbers returns an even number, and mixing even\nand odd returns an odd number.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">Parity</span><span class=\"p\">:</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span> <span class=\"ow\">is</span> <span class=\"n\">BOTTOM</span> <span class=\"ow\">or</span> <span class=\"n\">other</span> <span class=\"ow\">is</span> <span class=\"n\">BOTTOM</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">BOTTOM</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span> <span class=\"ow\">is</span> <span class=\"n\">TOP</span> <span class=\"ow\">or</span> <span class=\"n\">other</span> <span class=\"ow\">is</span> <span class=\"n\">TOP</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">TOP</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span> <span class=\"ow\">is</span> <span class=\"n\">EVEN</span> <span class=\"ow\">and</span> <span class=\"n\">other</span> <span class=\"ow\">is</span> <span class=\"n\">EVEN</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">EVEN</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span> <span class=\"ow\">is</span> <span class=\"n\">ODD</span> <span class=\"ow\">and</span> <span class=\"n\">other</span> <span class=\"ow\">is</span> <span class=\"n\">ODD</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">EVEN</span>\n        <span class=\"k\">return</span> <span class=\"n\">ODD</span>\n</pre></div>\n\n<p>We also need to fill in the other cases where the operands are <em>top</em> or\n<em>bottom</em>. In this case, they are both \"contagious\"; if either operand is\nbottom, the result is as well. If neither is bottom but either operand is top,\nthe result is as well.</p>\n<p>Now let's look at <code>lshift</code>. Shifting any number left by a non-zero number of\nbits will always result in an even number, but we need to be careful about the\nzero case! Shifting by zero doesn't change the number at all. Unfortunately,\nsince our lattice has no notion of zero, we have to over-approximate here:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">Parity</span><span class=\"p\">:</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">def</span> <span class=\"nf\">lshift</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"c1\"># self &lt;&lt; other</span>\n        <span class=\"k\">if</span> <span class=\"n\">other</span> <span class=\"ow\">is</span> <span class=\"n\">ODD</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">EVEN</span>\n        <span class=\"k\">return</span> <span class=\"n\">TOP</span>\n</pre></div>\n\n<p>This means that we will miss some opportunities to optimize, but it's a\ntradeoff that's just part of the game. (We could also add more elements to our\nlattice, but that's a topic for another day.)</p>\n<p>Now, if we run our abstract interpretation, we'll collect some interesting\nproperties about the program. If we temporarily hack on the internals of\n<code>bb_to_str</code>, we can print out parity information alongside the IR operations:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span><span class=\"p\">:</span><span class=\"n\">even</span> <span class=\"o\">=</span> <span class=\"n\">lshift</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v3</span><span class=\"p\">:</span><span class=\"n\">even</span> <span class=\"o\">=</span> <span class=\"n\">lshift</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v4</span><span class=\"p\">:</span><span class=\"n\">even</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"n\">v5</span><span class=\"p\">:</span><span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">dummy</span><span class=\"p\">(</span><span class=\"n\">v4</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>This is pretty awesome, because we can see that <code>v4</code>, the result of the\naddition, is <em>always</em> even. Maybe we can do something with that information.</p>\n<h3 id=\"optimization\">Optimization</h3>\n<p>One way that a program might check if a number is odd is by checking the least\nsignificant bit. This is a common pattern in C code, where you might see code\nlike <code>y = x &amp; 1</code>. Let's introduce a <code>bitand</code> IR operation that acts like the\n<code>&amp;</code> operator in C/Python. Here is an example of use of it in our program:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">v0</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">lshift</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">lshift</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v4</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"n\">v5</span> <span class=\"o\">=</span> <span class=\"n\">bitand</span><span class=\"p\">(</span><span class=\"n\">v4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># new!</span>\n<span class=\"n\">v6</span> <span class=\"o\">=</span> <span class=\"n\">dummy</span><span class=\"p\">(</span><span class=\"n\">v5</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>We'll hold off on implementing the transfer function for it---that's left as an\nexercise for the reader---and instead do something different.</p>\n<p>Instead, we'll see if we can optimize operations of the form <code>bitand(X, 1)</code>. If\nwe statically know the parity as a result of abstract interpretation, we can\nreplace the <code>bitand</code> with a constant <code>0</code> or <code>1</code>.</p>\n<p>We'll first modify the <code>analyze</code> function (and rename it) to return a new\n<code>Block</code> containing optimized instructions:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">simplify</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">:</span> <span class=\"n\">Block</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Block</span><span class=\"p\">:</span>\n    <span class=\"n\">parity</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">BOTTOM</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">block</span><span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parity_of</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">Constant</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">Parity</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">parity</span><span class=\"p\">[</span><span class=\"n\">value</span><span class=\"p\">]</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">Block</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"n\">block</span><span class=\"p\">:</span>\n        <span class=\"c1\"># TODO: Optimize op</span>\n        <span class=\"c1\"># Emit</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Analyze</span>\n        <span class=\"n\">transfer</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">Parity</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">parity_of</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">())</span> <span class=\"k\">for</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">]</span>\n        <span class=\"n\">parity</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">transfer</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n</pre></div>\n\n<p>We're approaching this the way that PyPy does things under the hood, which is\nall in roughly a single pass. It tries to optimize an instruction away, and if\nit can't, it copies it into the new block.</p>\n<p>Now let's add in the <code>bitand</code> optimization. It's mostly some gross-looking\npattern matching that checks if the right hand side of a bitwise <code>and</code>\noperation is <code>1</code> (TODO: the left hand side, too). CF had some neat ideas on how\nto make this more ergonomic, which I might save for later.<sup id=\"fnref:match-args\"><a class=\"footnote-ref\" href=\"https://www.pypy.org/posts/2024/07/toy-abstract-interpretation.html#fn:match-args\">3</a></sup></p>\n<p>Then, if we know the parity, optimize the <code>bitand</code> into a constant.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">simplify</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">:</span> <span class=\"n\">Block</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Block</span><span class=\"p\">:</span>\n    <span class=\"n\">parity</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">BOTTOM</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">block</span><span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parity_of</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">Constant</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">Parity</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">parity</span><span class=\"p\">[</span><span class=\"n\">value</span><span class=\"p\">]</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">Block</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"n\">block</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Try to simplify</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">Operation</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"bitand\"</span><span class=\"p\">:</span>\n            <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"p\">,</span> <span class=\"n\">Constant</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">mask</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">parity_of</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">EVEN</span><span class=\"p\">:</span>\n                    <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">make_equal_to</span><span class=\"p\">(</span><span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"k\">elif</span> <span class=\"n\">parity_of</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">ODD</span><span class=\"p\">:</span>\n                    <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">make_equal_to</span><span class=\"p\">(</span><span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n                    <span class=\"k\">continue</span>\n        <span class=\"c1\"># Emit</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Analyze</span>\n        <span class=\"n\">transfer</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">Parity</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">parity_of</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">())</span> <span class=\"k\">for</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">]</span>\n        <span class=\"n\">parity</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">transfer</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n</pre></div>\n\n<p>Remember: because we use union-find to rewrite instructions in the optimizer\n(<code>make_equal_to</code>), later uses of the same instruction get the new\noptimized version \"for free\" (<code>find</code>).</p>\n<p>Let's see how it works on our IR:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">v0</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">lshift</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">lshift</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v4</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"n\">v6</span> <span class=\"o\">=</span> <span class=\"n\">dummy</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Hey, neat! <code>bitand</code> disappeared and the argument to <code>dummy</code> is now the constant\n<code>0</code> because we know the lowest bit.</p>\n<h3 id=\"wrapping-up\">Wrapping up</h3>\n<p>Hopefully you have gained a little bit of an intuitive understanding of\nabstract interpretation. Last year, being able to write some code made me more\ncomfortable with the math. Now being more comfortable with the math is helping\nme write the code. It's nice upward spiral.</p>\n<p>The two abstract domains we used in this post are simple and not very useful in\npractice but it's possible to get very far using slightly more complicated\nabstract domains. Common domains include: constant propagation, type inference,\nrange analysis, effect inference, liveness, etc. For example, here is a a\nsample lattice for constant propagation:</p>\n<figure style=\"display: block; margin: 0 auto;\">\n<!--\ndigraph G {\n    rankdir=\"BT\";\n    top [shape=Msquare];\n    bottom [shape=Msquare];\n\n    bottom -> \"-inf\";\n    bottom -> \"-2\";\n    bottom -> \"-1\";\n    bottom -> 0;\n    bottom -> 1;\n    bottom -> 2;\n    bottom -> \"+inf\";\n\n    \"-inf\" -> negative;\n    \"-2\" -> negative;\n    \"-1\" -> negative;\n    0 -> top;\n    1 -> nonnegative;\n    2 -> nonnegative;\n    \"+inf\" -> nonnegative;\n\n    negative -> nonzero;\n    nonnegative -> nonzero;\n    nonzero->top;\n\n    {rank=same; \"-inf\"; \"-2\"; \"-1\"; 0; 1; 2; \"+inf\"}\n    {rank=same; nonnegative; negative;}\n}\n-->\n    <object class=\"svg\" type=\"image/svg+xml\" data=\"https://www.pypy.org/images/2024-complex-lattice.svg\">\n    </object>\n</figure>\n\n<p>It has multiple levels to indicate more and less precision. For example, you\nmight learn that a variable is either <code>1</code> or <code>2</code> and be able to encode that as\n<code>nonnegative</code> instead of just going straight to <code>top</code>.</p>\n<p>Check out some real-world abstract interpretation in open source projects:</p>\n<ul>\n<li><a href=\"https://github.com/llvm/llvm-project/blob/main/llvm/lib/Support/KnownBits.cpp\">Known bits in LLVM</a></li>\n<li><a href=\"https://github.com/llvm/llvm-project/blob/main/llvm/lib/IR/ConstantRange.cpp\">Constant range in LLVM</a></li>\n<li>But I am told that the ranges don't form a lattice (see <a href=\"https://dl.acm.org/doi/10.1145/2651360\">Interval Analysis and Machine Arithmetic: Why Signedness Ignorance Is Bliss</a>)</li>\n<li><a href=\"https://github.com/torvalds/linux/blob/master/kernel/bpf/tnum.c\">Tristate numbers for known bits in Linux eBPF</a></li>\n<li><a href=\"https://github.com/torvalds/linux/blob/28bbe4ea686a023929d907cc168430b61094811c/kernel/bpf/verifier.c#L13335\">Range analysis in Linux eBPF</a></li>\n<li><a href=\"https://github.com/bminor/binutils-gdb/blob/master/gdb/prologue-value.c\">GDB prologue analysis</a>\n  of assembly to understand the stack and find frame pointers without using\n  DWARF (<a href=\"https://sourceware.org/gdb/wiki/Internals/Prologue%20Analysis\">some\n  docs</a>)</li>\n</ul>\n<p>If you have some readable examples, please share them so I can add.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>Thank you to <a href=\"https://cfbolz.de/\">CF Bolz-Tereick</a> for the toy optimizer and\nhelping edit this post!</p>\n<div class=\"footnote\">\n<hr>\n<ol>\n<li id=\"fn:logozzo\">\n<p>In the words of abstract interpretation researchers Vincent Laviron\nand Francesco Logozzo in their paper <em>Refining Abstract\nInterpretation-based Static Analyses with Hints</em> (APLAS 2009):</p>\n<blockquote>\n<p>The three main elements of an abstract interpretation are: (i) the\nabstract elements (\"which properties am I interested in?\"); (ii) the\nabstract transfer functions (\"which is the abstract semantics of basic\nstatements?\"); and (iii) the abstract operations (\"how do I combine the\nabstract elements?\").</p>\n</blockquote>\n<p>We don't have any of these \"abstract operations\" in this post because\nthere's no control flow but you can read about them elsewhere! <a class=\"footnote-backref\" href=\"https://www.pypy.org/posts/2024/07/toy-abstract-interpretation.html#fnref:logozzo\" title=\"Jump back to footnote 1 in the text\">↩</a></p>\n</li>\n<li id=\"fn:lattices\">\n<p>These abstract values are arranged in a <em>lattice</em>, which is a\nmathematical structure with some properties but the most important ones are\nthat it has a top, a bottom, a partial order, a meet operation, and values\ncan only move in one direction on the lattice.</p>\n<p>Using abstract values from a lattice promises two things:</p>\n<ul>\n<li>The analysis will terminate</li>\n<li>The analysis will be correct for <em>any</em> run of the program, not just one\n  sample run</li>\n</ul>\n<p><a class=\"footnote-backref\" href=\"https://www.pypy.org/posts/2024/07/toy-abstract-interpretation.html#fnref:lattices\" title=\"Jump back to footnote 2 in the text\">↩</a></p>\n</li>\n<li id=\"fn:match-args\">\n<p>Something about <code>__match_args__</code> and <code>@property</code>... <a class=\"footnote-backref\" href=\"https://www.pypy.org/posts/2024/07/toy-abstract-interpretation.html#fnref:match-args\" title=\"Jump back to footnote 3 in the text\">↩</a></p>\n</li>\n</ol>\n</div>"
        }
      ],
      "description": "<p>This is a <a href=\"https://bernsteinbear.com/blog/toy-abstract-interpretation/\" rel=\"canonical\">cross-post</a>\nfrom Max Bernstein from his excellent blog where he writes about programming\nlanguages, compilers, optimizations, virtual machines. He's looking for a\n(dynamic language runtime or compiler related) job too.</p>\n<hr>\n<p>CF Bolz-Tereick wrote some excellent posts in which they <a href=\"https://pypy.org/posts/2022/07/toy-optimizer.html\">introduce a small IR\nand optimizer</a> and <a href=\"https://pypy.org/posts/2022/10/toy-optimizer-allocation-removal.html\">extend it with allocation\nremoval</a>. We also did a live stream together in which\nwe did <a href=\"https://www.youtube.com/watch?v=w-UHg0yOPSE\">some more heap optimizations</a>.</p>\n<p>In this blog post, I'm going to write a small abstract interpreter for the Toy\nIR and then show how we can use it to do some simple optimizations. It assumes\nthat you are familiar with the little IR, which I have reproduced unchanged in\n<a href=\"https://gist.github.com/tekknolagi/4425b28d5267e7bae8b0d7ef8fb4a671\">a GitHub Gist</a>.</p>\n<p>Abstract interpretation is a general framework for efficiently computing\nproperties that must be true for all possible executions of a program. It's a\nwidely used approach both in compiler optimizations as well as offline static\nanalysis for finding bugs. I'm writing this post to pave the way for CF's next\npost on proving abstract interpreters correct for range analysis and known bits\nanalysis inside PyPy.</p>\n<p>Before we begin, I want to note a couple of things:</p>\n<ul>\n<li>The Toy IR is in SSA form, which means that every variable is defined exactly\n  once. This means that abstract properties of each variable are easy to track.</li>\n<li>The Toy IR represents a linear trace without control flow, meaning we won't\n  talk about meet/join or fixpoints. They only make sense if the IR has a\n  notion of conditional branches or back edges (loops).</li>\n</ul>\n<p>Alright, let's get started.</p>\n<h3 id=\"welcome-to-abstract-interpretation\">Welcome to abstract interpretation</h3>\n<p>Abstract interpretation means a couple different things to different people.\nThere's rigorous mathematical formalism thanks to Patrick and Radhia Cousot,\nour favorite power couple, and there's also sketchy hand-wavy stuff like what\nwill follow in this post. In the end, all people are trying to do is reason\nabout program behavior without running it.</p>\n<p>In particular, abstract interpretation is an <em>over-approximation</em> of the\nbehavior of a program. Correctly implemented abstract interpreters never lie,\nbut they might be a little bit pessimistic. This is because instead of using\nreal values and running the program---which would produce a concrete result and\nsome real-world behavior---we \"run\" the program with a parallel universe of\n<em>abstract</em> values. This abstract run gives us information about all possible\nruns of the program.<sup id=\"fnref:logozzo\"><a class=\"footnote-ref\" href=\"https://www.pypy.org/posts/2024/07/toy-abstract-interpretation.html#fn:logozzo\">1</a></sup></p>\n<p>Abstract values always represent sets of concrete values. Instead of literally\nstoring a set (in the world of integers, for example, it could get pretty\nbig...there are a lot of integers), we group them into a finite number of named\nsubsets.<sup id=\"fnref:lattices\"><a class=\"footnote-ref\" href=\"https://www.pypy.org/posts/2024/07/toy-abstract-interpretation.html#fn:lattices\">2</a></sup></p>\n<p>Let's learn a little about abstract interpretation with an example program and\nexample abstract domain. Here's the example program:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">v0</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">,</span> <span class=\"n\">v1</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>And our abstract domain is \"is the number positive\" (where \"positive\" means\nnonnegative, but I wanted to keep the words distinct):</p>\n<div class=\"code\"><pre class=\"code literal-block\">       top\n    /       \\\npositive    negative\n    \\       /\n      bottom\n</pre></div>\n\n<p>The special <em>top</em> value means \"I don't know\" and the special <em>bottom</em> value\nmeans \"empty set\" or \"unreachable\". The <em>positive</em> and <em>negative</em> values\nrepresent the sets of all positive and negative numbers, respectively.</p>\n<p>We initialize all the variables <code>v0</code>, <code>v1</code>, and <code>v2</code> to <em>bottom</em> and then walk\nour IR, updating our knowledge as we go.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"c1\"># here</span>\n<span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"n\">bottom</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"n\">bottom</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">v2</span><span class=\"p\">:</span><span class=\"n\">bottom</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">,</span> <span class=\"n\">v1</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>In order to do that, we have to have <em>transfer functions</em> for each operation.\nFor constants, the transfer function is easy: determine if the constant is\npositive or negative. For other operations, we have to define a function that\ntakes the abstract values of the operands and returns the abstract value of the\nresult.</p>\n<p>In order to be correct, transfer functions for operations have to be compatible\nwith the behavior of their corresponding concrete implementations. You can\nthink of them having an implicit universal quantifier <em>forall</em> in front of\nthem.</p>\n<p>Let's step through the constants at least:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"n\">positive</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"n\">positive</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"c1\"># here</span>\n<span class=\"n\">v2</span><span class=\"p\">:</span><span class=\"n\">bottom</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">,</span> <span class=\"n\">v1</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Now we need to figure out the transfer function for <code>add</code>. It's kind of tricky\nright now because we haven't specified our abstract domain very well. I keep\nsaying \"numbers\", but what kinds of numbers? Integers? Real numbers? Floating\npoint? Some kind of fixed-width bit vector (<code>int8</code>, <code>uint32</code>, ...) like an\nactual machine \"integer\"?</p>\n<p>For this post, I am going to use the mathematical definition of integer, which\nmeans that the values are not bounded in size and therefore do not overflow.\nActual hardware memory constraints aside, this is kind of like a Python <code>int</code>.</p>\n<p>So let's look at what happens when we add two abstract numbers:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>top</th>\n<th>positive</th>\n<th>negative</th>\n<th>bottom</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>top</strong></td>\n<td>top</td>\n<td>top</td>\n<td>top</td>\n<td>bottom</td>\n</tr>\n<tr>\n<td><strong>positive</strong></td>\n<td>top</td>\n<td>positive</td>\n<td>top</td>\n<td>bottom</td>\n</tr>\n<tr>\n<td><strong>negative</strong></td>\n<td>top</td>\n<td>top</td>\n<td>negative</td>\n<td>bottom</td>\n</tr>\n<tr>\n<td><strong>bottom</strong></td>\n<td>bottom</td>\n<td>bottom</td>\n<td>bottom</td>\n<td>bottom</td>\n</tr>\n</tbody>\n</table>\n<p>As an example, let's try to add two numbers <code>a</code> and <code>b</code>, where <code>a</code> is positive\nand <code>b</code> is negative. We don't know anything about their values other than their\nsigns. They could be <code>5</code> and <code>-3</code>, where the result is <code>2</code>, or they could be\n<code>1</code> and <code>-100</code>, where the result is <code>-99</code>. This is why we can't say anything\nabout the result of this operation and have to return <em>top</em>.</p>\n<p>The short of this table is that we only really know the result of an addition\nif both operands are positive or both operands are negative. Thankfully, in\nthis example, both operands are known positive. So we can learn something about\n<code>v2</code>:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"n\">positive</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"n\">positive</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">v2</span><span class=\"p\">:</span><span class=\"n\">positive</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">,</span> <span class=\"n\">v1</span><span class=\"p\">)</span>\n<span class=\"c1\"># here</span>\n</pre></div>\n\n<p>This may not seem useful in isolation, but analyzing more complex programs even\nwith this simple domain may be able to remove checks such as <code>if (v2 &lt; 0) { ... }</code>.</p>\n<p>Let's take a look at another example using an sample <code>absval</code> (absolute value)\nIR operation:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">v0</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">absval</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">)</span>\n<span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">absval</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n<span class=\"n\">v4</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"n\">v5</span> <span class=\"o\">=</span> <span class=\"n\">absval</span><span class=\"p\">(</span><span class=\"n\">v4</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Even though we have no constant/concrete values, we can still learn something\nabout the states of values throughout the program. Since we know that <code>absval</code>\nalways returns a positive number, we learn that <code>v2</code>, <code>v3</code>, and <code>v4</code> are all\npositive. This means that we can optimize out the <code>absval</code> operation on <code>v5</code>:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span><span class=\"p\">:</span><span class=\"n\">positive</span> <span class=\"o\">=</span> <span class=\"n\">absval</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">)</span>\n<span class=\"n\">v3</span><span class=\"p\">:</span><span class=\"n\">positive</span> <span class=\"o\">=</span> <span class=\"n\">absval</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span>\n<span class=\"n\">v4</span><span class=\"p\">:</span><span class=\"n\">positive</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"n\">v5</span><span class=\"p\">:</span><span class=\"n\">positive</span> <span class=\"o\">=</span> <span class=\"n\">v4</span>\n</pre></div>\n\n<p>Other interesting lattices include:</p>\n<ul>\n<li>Constants (where the middle row is pretty wide)</li>\n<li>Range analysis (bounds on min and max of a number)</li>\n<li>Known bits (using a bitvector representation of a number, which bits are\n  always 0 or 1)</li>\n</ul>\n<p>For the rest of this blog post, we are going to do a very limited version of\n\"known bits\", called <em>parity</em>. This analysis only tracks the least significant\nbit of a number, which indicates if it is even or odd.</p>\n<h3 id=\"parity\">Parity</h3>\n<p>The lattice is pretty similar to the positive/negative lattice:</p>\n<div class=\"code\"><pre class=\"code literal-block\">    top\n  /     \\\neven    odd\n  \\     /\n   bottom\n</pre></div>\n\n<p>Let's define a data structure to represent this in Python code:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">Parity</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n</pre></div>\n\n<p>And instantiate the members of the lattice:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">TOP</span> <span class=\"o\">=</span> <span class=\"n\">Parity</span><span class=\"p\">(</span><span class=\"s2\">\"top\"</span><span class=\"p\">)</span>\n<span class=\"n\">EVEN</span> <span class=\"o\">=</span> <span class=\"n\">Parity</span><span class=\"p\">(</span><span class=\"s2\">\"even\"</span><span class=\"p\">)</span>\n<span class=\"n\">ODD</span> <span class=\"o\">=</span> <span class=\"n\">Parity</span><span class=\"p\">(</span><span class=\"s2\">\"odd\"</span><span class=\"p\">)</span>\n<span class=\"n\">BOTTOM</span> <span class=\"o\">=</span> <span class=\"n\">Parity</span><span class=\"p\">(</span><span class=\"s2\">\"bottom\"</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Now let's write a forward flow analysis of a basic block using this lattice.\nWe'll do that by assuming that a method on <code>Parity</code> is defined for each IR\noperation. For example, <code>Parity.add</code>, <code>Parity.lshift</code>, etc.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">analyze</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">:</span> <span class=\"n\">Block</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"n\">parity</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">BOTTOM</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">block</span><span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parity_of</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">Constant</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">Parity</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">parity</span><span class=\"p\">[</span><span class=\"n\">value</span><span class=\"p\">]</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"n\">block</span><span class=\"p\">:</span>\n        <span class=\"n\">transfer</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">Parity</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">parity_of</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">())</span> <span class=\"k\">for</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">]</span>\n        <span class=\"n\">parity</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">transfer</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>For every operation, we compute the abstract value---the parity---of the\narguments and then call the corresponding method on <code>Parity</code> to get the\nabstract result.</p>\n<!-- TODO maybe learn more about different IRs and how they do constants.\napparently pypy/llvm are free-floating; cinder is not -->\n<p>We need to special case <code>Constant</code>s due to a quirk of how the Toy IR is\nconstructed: the constants don't appear in the instruction stream and instead\nare free-floating.</p>\n<p>Let's start by looking at the abstraction function for concrete\nvalues---constants:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">Parity</span><span class=\"p\">:</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">const</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">EVEN</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">ODD</span>\n</pre></div>\n\n<p>Seems reasonable enough. Let's pause on operations for a moment and consider an\nexample program:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">v0</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">lshift</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">lshift</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v4</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"n\">v5</span> <span class=\"o\">=</span> <span class=\"n\">dummy</span><span class=\"p\">(</span><span class=\"n\">v4</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>This function (which is admittedly a little contrived) takes two inputs, shifts\nthem left by one bit, adds the result, and then checks the least significant\nbit of the addition result. It then passes that result into a <code>dummy</code> function,\nwhich you can think of as \"return\" or \"escape\".</p>\n<p>To do some abstract interpretation on this program, we'll need to implement the\ntransfer functions for <code>lshift</code> and <code>add</code> (<code>dummy</code> will just always return\n<code>TOP</code>). We'll start with <code>add</code>. Remember that adding two even numbers returns\nan even number, adding two odd numbers returns an even number, and mixing even\nand odd returns an odd number.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">Parity</span><span class=\"p\">:</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span> <span class=\"ow\">is</span> <span class=\"n\">BOTTOM</span> <span class=\"ow\">or</span> <span class=\"n\">other</span> <span class=\"ow\">is</span> <span class=\"n\">BOTTOM</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">BOTTOM</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span> <span class=\"ow\">is</span> <span class=\"n\">TOP</span> <span class=\"ow\">or</span> <span class=\"n\">other</span> <span class=\"ow\">is</span> <span class=\"n\">TOP</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">TOP</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span> <span class=\"ow\">is</span> <span class=\"n\">EVEN</span> <span class=\"ow\">and</span> <span class=\"n\">other</span> <span class=\"ow\">is</span> <span class=\"n\">EVEN</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">EVEN</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span> <span class=\"ow\">is</span> <span class=\"n\">ODD</span> <span class=\"ow\">and</span> <span class=\"n\">other</span> <span class=\"ow\">is</span> <span class=\"n\">ODD</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">EVEN</span>\n        <span class=\"k\">return</span> <span class=\"n\">ODD</span>\n</pre></div>\n\n<p>We also need to fill in the other cases where the operands are <em>top</em> or\n<em>bottom</em>. In this case, they are both \"contagious\"; if either operand is\nbottom, the result is as well. If neither is bottom but either operand is top,\nthe result is as well.</p>\n<p>Now let's look at <code>lshift</code>. Shifting any number left by a non-zero number of\nbits will always result in an even number, but we need to be careful about the\nzero case! Shifting by zero doesn't change the number at all. Unfortunately,\nsince our lattice has no notion of zero, we have to over-approximate here:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">class</span> <span class=\"nc\">Parity</span><span class=\"p\">:</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">def</span> <span class=\"nf\">lshift</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"c1\"># self &lt;&lt; other</span>\n        <span class=\"k\">if</span> <span class=\"n\">other</span> <span class=\"ow\">is</span> <span class=\"n\">ODD</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">EVEN</span>\n        <span class=\"k\">return</span> <span class=\"n\">TOP</span>\n</pre></div>\n\n<p>This means that we will miss some opportunities to optimize, but it's a\ntradeoff that's just part of the game. (We could also add more elements to our\nlattice, but that's a topic for another day.)</p>\n<p>Now, if we run our abstract interpretation, we'll collect some interesting\nproperties about the program. If we temporarily hack on the internals of\n<code>bb_to_str</code>, we can print out parity information alongside the IR operations:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span><span class=\"p\">:</span><span class=\"n\">even</span> <span class=\"o\">=</span> <span class=\"n\">lshift</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v3</span><span class=\"p\">:</span><span class=\"n\">even</span> <span class=\"o\">=</span> <span class=\"n\">lshift</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v4</span><span class=\"p\">:</span><span class=\"n\">even</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"n\">v5</span><span class=\"p\">:</span><span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">dummy</span><span class=\"p\">(</span><span class=\"n\">v4</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>This is pretty awesome, because we can see that <code>v4</code>, the result of the\naddition, is <em>always</em> even. Maybe we can do something with that information.</p>\n<h3 id=\"optimization\">Optimization</h3>\n<p>One way that a program might check if a number is odd is by checking the least\nsignificant bit. This is a common pattern in C code, where you might see code\nlike <code>y = x &amp; 1</code>. Let's introduce a <code>bitand</code> IR operation that acts like the\n<code>&amp;</code> operator in C/Python. Here is an example of use of it in our program:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">v0</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">lshift</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">lshift</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v4</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"n\">v5</span> <span class=\"o\">=</span> <span class=\"n\">bitand</span><span class=\"p\">(</span><span class=\"n\">v4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># new!</span>\n<span class=\"n\">v6</span> <span class=\"o\">=</span> <span class=\"n\">dummy</span><span class=\"p\">(</span><span class=\"n\">v5</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>We'll hold off on implementing the transfer function for it---that's left as an\nexercise for the reader---and instead do something different.</p>\n<p>Instead, we'll see if we can optimize operations of the form <code>bitand(X, 1)</code>. If\nwe statically know the parity as a result of abstract interpretation, we can\nreplace the <code>bitand</code> with a constant <code>0</code> or <code>1</code>.</p>\n<p>We'll first modify the <code>analyze</code> function (and rename it) to return a new\n<code>Block</code> containing optimized instructions:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">simplify</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">:</span> <span class=\"n\">Block</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Block</span><span class=\"p\">:</span>\n    <span class=\"n\">parity</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">BOTTOM</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">block</span><span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parity_of</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">Constant</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">Parity</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">parity</span><span class=\"p\">[</span><span class=\"n\">value</span><span class=\"p\">]</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">Block</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"n\">block</span><span class=\"p\">:</span>\n        <span class=\"c1\"># TODO: Optimize op</span>\n        <span class=\"c1\"># Emit</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Analyze</span>\n        <span class=\"n\">transfer</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">Parity</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">parity_of</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">())</span> <span class=\"k\">for</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">]</span>\n        <span class=\"n\">parity</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">transfer</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n</pre></div>\n\n<p>We're approaching this the way that PyPy does things under the hood, which is\nall in roughly a single pass. It tries to optimize an instruction away, and if\nit can't, it copies it into the new block.</p>\n<p>Now let's add in the <code>bitand</code> optimization. It's mostly some gross-looking\npattern matching that checks if the right hand side of a bitwise <code>and</code>\noperation is <code>1</code> (TODO: the left hand side, too). CF had some neat ideas on how\nto make this more ergonomic, which I might save for later.<sup id=\"fnref:match-args\"><a class=\"footnote-ref\" href=\"https://www.pypy.org/posts/2024/07/toy-abstract-interpretation.html#fn:match-args\">3</a></sup></p>\n<p>Then, if we know the parity, optimize the <code>bitand</code> into a constant.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">simplify</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">:</span> <span class=\"n\">Block</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Block</span><span class=\"p\">:</span>\n    <span class=\"n\">parity</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">BOTTOM</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">block</span><span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parity_of</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">Constant</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">Parity</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">parity</span><span class=\"p\">[</span><span class=\"n\">value</span><span class=\"p\">]</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">Block</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"n\">block</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Try to simplify</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">Operation</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"bitand\"</span><span class=\"p\">:</span>\n            <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"p\">,</span> <span class=\"n\">Constant</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">mask</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">parity_of</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">EVEN</span><span class=\"p\">:</span>\n                    <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">make_equal_to</span><span class=\"p\">(</span><span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"k\">elif</span> <span class=\"n\">parity_of</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">ODD</span><span class=\"p\">:</span>\n                    <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">make_equal_to</span><span class=\"p\">(</span><span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n                    <span class=\"k\">continue</span>\n        <span class=\"c1\"># Emit</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Analyze</span>\n        <span class=\"n\">transfer</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">Parity</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">parity_of</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">())</span> <span class=\"k\">for</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">]</span>\n        <span class=\"n\">parity</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">transfer</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n</pre></div>\n\n<p>Remember: because we use union-find to rewrite instructions in the optimizer\n(<code>make_equal_to</code>), later uses of the same instruction get the new\noptimized version \"for free\" (<code>find</code>).</p>\n<p>Let's see how it works on our IR:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">v0</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"n\">getarg</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v2</span> <span class=\"o\">=</span> <span class=\"n\">lshift</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">lshift</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">v4</span> <span class=\"o\">=</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">,</span> <span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"n\">v6</span> <span class=\"o\">=</span> <span class=\"n\">dummy</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Hey, neat! <code>bitand</code> disappeared and the argument to <code>dummy</code> is now the constant\n<code>0</code> because we know the lowest bit.</p>\n<h3 id=\"wrapping-up\">Wrapping up</h3>\n<p>Hopefully you have gained a little bit of an intuitive understanding of\nabstract interpretation. Last year, being able to write some code made me more\ncomfortable with the math. Now being more comfortable with the math is helping\nme write the code. It's nice upward spiral.</p>\n<p>The two abstract domains we used in this post are simple and not very useful in\npractice but it's possible to get very far using slightly more complicated\nabstract domains. Common domains include: constant propagation, type inference,\nrange analysis, effect inference, liveness, etc. For example, here is a a\nsample lattice for constant propagation:</p>\n<figure style=\"display: block; margin: 0 auto;\">\n<!--\ndigraph G {\n    rankdir=\"BT\";\n    top [shape=Msquare];\n    bottom [shape=Msquare];\n\n    bottom -> \"-inf\";\n    bottom -> \"-2\";\n    bottom -> \"-1\";\n    bottom -> 0;\n    bottom -> 1;\n    bottom -> 2;\n    bottom -> \"+inf\";\n\n    \"-inf\" -> negative;\n    \"-2\" -> negative;\n    \"-1\" -> negative;\n    0 -> top;\n    1 -> nonnegative;\n    2 -> nonnegative;\n    \"+inf\" -> nonnegative;\n\n    negative -> nonzero;\n    nonnegative -> nonzero;\n    nonzero->top;\n\n    {rank=same; \"-inf\"; \"-2\"; \"-1\"; 0; 1; 2; \"+inf\"}\n    {rank=same; nonnegative; negative;}\n}\n-->\n    <object class=\"svg\" type=\"image/svg+xml\" data=\"https://www.pypy.org/images/2024-complex-lattice.svg\">\n    </object>\n</figure>\n\n<p>It has multiple levels to indicate more and less precision. For example, you\nmight learn that a variable is either <code>1</code> or <code>2</code> and be able to encode that as\n<code>nonnegative</code> instead of just going straight to <code>top</code>.</p>\n<p>Check out some real-world abstract interpretation in open source projects:</p>\n<ul>\n<li><a href=\"https://github.com/llvm/llvm-project/blob/main/llvm/lib/Support/KnownBits.cpp\">Known bits in LLVM</a></li>\n<li><a href=\"https://github.com/llvm/llvm-project/blob/main/llvm/lib/IR/ConstantRange.cpp\">Constant range in LLVM</a></li>\n<li>But I am told that the ranges don't form a lattice (see <a href=\"https://dl.acm.org/doi/10.1145/2651360\">Interval Analysis and Machine Arithmetic: Why Signedness Ignorance Is Bliss</a>)</li>\n<li><a href=\"https://github.com/torvalds/linux/blob/master/kernel/bpf/tnum.c\">Tristate numbers for known bits in Linux eBPF</a></li>\n<li><a href=\"https://github.com/torvalds/linux/blob/28bbe4ea686a023929d907cc168430b61094811c/kernel/bpf/verifier.c#L13335\">Range analysis in Linux eBPF</a></li>\n<li><a href=\"https://github.com/bminor/binutils-gdb/blob/master/gdb/prologue-value.c\">GDB prologue analysis</a>\n  of assembly to understand the stack and find frame pointers without using\n  DWARF (<a href=\"https://sourceware.org/gdb/wiki/Internals/Prologue%20Analysis\">some\n  docs</a>)</li>\n</ul>\n<p>If you have some readable examples, please share them so I can add.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>Thank you to <a href=\"https://cfbolz.de/\">CF Bolz-Tereick</a> for the toy optimizer and\nhelping edit this post!</p>\n<div class=\"footnote\">\n<hr>\n<ol>\n<li id=\"fn:logozzo\">\n<p>In the words of abstract interpretation researchers Vincent Laviron\nand Francesco Logozzo in their paper <em>Refining Abstract\nInterpretation-based Static Analyses with Hints</em> (APLAS 2009):</p>\n<blockquote>\n<p>The three main elements of an abstract interpretation are: (i) the\nabstract elements (\"which properties am I interested in?\"); (ii) the\nabstract transfer functions (\"which is the abstract semantics of basic\nstatements?\"); and (iii) the abstract operations (\"how do I combine the\nabstract elements?\").</p>\n</blockquote>\n<p>We don't have any of these \"abstract operations\" in this post because\nthere's no control flow but you can read about them elsewhere! <a class=\"footnote-backref\" href=\"https://www.pypy.org/posts/2024/07/toy-abstract-interpretation.html#fnref:logozzo\" title=\"Jump back to footnote 1 in the text\">↩</a></p>\n</li>\n<li id=\"fn:lattices\">\n<p>These abstract values are arranged in a <em>lattice</em>, which is a\nmathematical structure with some properties but the most important ones are\nthat it has a top, a bottom, a partial order, a meet operation, and values\ncan only move in one direction on the lattice.</p>\n<p>Using abstract values from a lattice promises two things:</p>\n<ul>\n<li>The analysis will terminate</li>\n<li>The analysis will be correct for <em>any</em> run of the program, not just one\n  sample run</li>\n</ul>\n<p><a class=\"footnote-backref\" href=\"https://www.pypy.org/posts/2024/07/toy-abstract-interpretation.html#fnref:lattices\" title=\"Jump back to footnote 2 in the text\">↩</a></p>\n</li>\n<li id=\"fn:match-args\">\n<p>Something about <code>__match_args__</code> and <code>@property</code>... <a class=\"footnote-backref\" href=\"https://www.pypy.org/posts/2024/07/toy-abstract-interpretation.html#fnref:match-args\" title=\"Jump back to footnote 3 in the text\">↩</a></p>\n</li>\n</ol>\n</div>",
      "id": "https://www.pypy.org/posts/2024/07/toy-abstract-interpretation.html",
      "link": "https://www.pypy.org/posts/2024/07/toy-abstract-interpretation.html",
      "links": [],
      "published": "2024-07-24T14:48:00+00:00",
      "tags": [
        {
          "label": null,
          "scheme": null,
          "term": "toy-optimizer"
        }
      ],
      "title": "Abstract interpretation in the Toy Optimizer"
    },
    {
      "author": "CF Bolz-Tereick",
      "content": [
        {
          "base": null,
          "language": null,
          "type": "text/html",
          "value": "<p>In my last post I've described <a href=\"https://www.pypy.org/posts/2024/07/finding-simple-rewrite-rules-jit-z3.html\">how to use Z3 to find simple local peephole\noptimization patterns</a>\nfor the integer operations in PyPy's JIT. An example is <code>int_and(x, 0) -&gt;\n0</code>. In this post I want to scale up the problem of identifying possible\noptimizations to much bigger instruction sequences, also using Z3. For that, I\nam starting with the JIT traces of <strong>real benchmarks</strong>, after they have been\noptimized by the optimizer of PyPy's JIT. Then we can ask Z3 to find\ninefficient integer operations in those traces.</p>\n<p>Starting from the optimized traces of real programs has some big\nadvantages over the \"classical\" superoptimization approach of generating and\nthen trying all possible sequences of instructions. It avoids the\ncombinatorial explosion that happens with the latter approach. Also, starting\nfrom the traces of benchmarks or (even better) actual programs makes sure that\nwe actually care about the missing optimizations\nthat are found in this way. And because the traces are analyzed after they have\nbeen optimized by PyPy's optimizer, we only get reports for <em>missing</em>\noptimizations, that the JIT isn't able to do (yet).</p>\n<p>The techniques and experiments I describe in this post are again the result of\na bunch of discussions with John Regehr at a conference a few weeks ago, as\nwell as reading his blog posts and papers. Thanks John! Also thanks to <a href=\"https://bernsteinbear.com/\">Max\nBernstein</a> for super helpful feedback on the drafts\nof this blog post (and for poking me to write things in general).</p>\n<h3 id=\"high-level-approach\">High-Level Approach</h3>\n<p>The approach that I took works as follows:</p>\n<ul>\n<li>Run benchmarks or other interesting programs and then dump the IR of the JIT\n  traces into a file. The traces have at that point been already optimized by\n  the PyPy JIT's optimizer.</li>\n<li>For every trace, ignore all the operations on non-integer variables.</li>\n<li>Translate every integer operation into a Z3 formula.</li>\n<li>For every operation, use Z3 to find out whether the operation is redundant\n  (how that is done is described below).</li>\n<li>If the operation is redundant, the trace is less efficient than it could have\n  been, because the optimizer could also have removed the operation. Report the\n  inefficiency.</li>\n<li>Minimize the inefficient programs by removing as many operations as possible\n  to make the problem easier to understand.</li>\n</ul>\n<p>In the post I will describe the details and show some pseudocode of the\napproach. I'll also make the proper code public eventually (but it needs a\nhealthy dose of cleanups first).</p>\n<h3 id=\"dumping-pypy-traces\">Dumping PyPy Traces</h3>\n<p>PyPy will write its JIT traces into the file <code>out</code> if the environment variable\n<a href=\"https://doc.pypy.org/en/latest/man/pypy.1.html\"><code>PYPYLOG</code></a> is set as follows:</p>\n<div class=\"code\"><pre class=\"code literal-block\">PYPYLOG=jit-log-opt:out pypy &lt;program.py&gt;\n</pre></div>\n\n<p>This environment variable works for PyPy, but also for other virtual machines\nbuilt with RPython.</p>\n<p>(This is really a side point for the rest of the blog post, but since the\nquestion came up I wanted to clarify it: Operations on integers in the Python\nprogram that the JIT is running don't all correspond 1-to-1 with the <code>int_...</code>\noperations in the traces. The <code>int_...</code> trace operations always operate on\nmachine words. The Python <code>int</code> type supports arbitrarily large integers. PyPy\nwill optimistically try to lower the operations on Python integers into machine\nword operations, but adds the necessary guards into the trace to make sure that\noverflow outside of the range of machine words is caught. In case one of these\nguards fails the interpreter switches to a big integer heap-allocated\nrepresentation.)</p>\n<h3 id=\"encoding-traces-as-z3-formulas\">Encoding Traces as Z3 formulas</h3>\n<p>The last blog post already contained the code to encode the results of\nindividual trace operations into Z3 formulas, so we don't need to repeat that\nhere. To encode traces of operations we introduce a Z3 variable for every\noperation in the trace and then call the <code>z3_expression</code> function for every\nsingle one of the operations in the trace.</p>\n<p>For example, for the following trace:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">[i1]</span>\n<span class=\"na\">i2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">uint_rshift(i1, 32)</span>\n<span class=\"na\">i3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">int_and(i2, 65535)</span>\n<span class=\"na\">i4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">uint_rshift(i1, 48)</span>\n<span class=\"na\">i5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">int_lshift(i4, 16)</span>\n<span class=\"na\">i6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">int_or(i5, i3)</span>\n<span class=\"na\">jump(i6, i2) # equal</span>\n</pre></div>\n\n<p>We would get the Z3 formula:</p>\n<div class=\"code\"><pre class=\"code literal-block\">z3.And(i2 == LShR(i1, 32),\n       i3 == i2 &amp; 65535,\n       i4 == LShR(i1, 48),\n       i5 == i4 &lt;&lt; 16)\n</pre></div>\n\n<p>Usually we won't ask for the formula of the whole trace at once. Instead we go\nthrough the trace operation by operation and try to find inefficiencies in the\ncurrent one we are looking at. Roughly like this (pseudo-)code:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">newvar</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_inefficiencies</span><span class=\"p\">(</span><span class=\"n\">trace</span><span class=\"p\">):</span>\n    <span class=\"n\">solver</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Solver</span><span class=\"p\">()</span>\n    <span class=\"n\">var_to_z3var</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">input_argument</span> <span class=\"ow\">in</span> <span class=\"n\">trace</span><span class=\"o\">.</span><span class=\"n\">inputargs</span><span class=\"p\">:</span>\n        <span class=\"n\">var_to_z3var</span><span class=\"p\">[</span><span class=\"n\">input_argument</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">newz3var</span><span class=\"p\">(</span><span class=\"n\">input_argument</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"n\">trace</span><span class=\"p\">:</span>\n        <span class=\"n\">var_to_z3var</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">z3resultvar</span> <span class=\"o\">=</span> <span class=\"n\">newz3var</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">resultvarname</span><span class=\"p\">)</span>\n        <span class=\"n\">arg0</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">z3arg0</span> <span class=\"o\">=</span> <span class=\"n\">var_to_z3var</span><span class=\"p\">[</span><span class=\"n\">arg0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">arg1</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">z3arg1</span> <span class=\"o\">=</span> <span class=\"n\">var_to_z3var</span><span class=\"p\">[</span><span class=\"n\">arg1</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">z3arg1</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">z3arg0</span><span class=\"p\">,</span> <span class=\"n\">z3arg1</span><span class=\"p\">)</span>\n        <span class=\"c1\"># checking for inefficiencies, see the next sections</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">if</span> <span class=\"o\">...</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">\"inefficient\"</span><span class=\"p\">,</span> <span class=\"n\">op</span>\n\n        <span class=\"c1\"># not inefficient, assert op into the solver and continue with the next op</span>\n        <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">z3resultvar</span> <span class=\"o\">==</span> <span class=\"n\">res</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"kc\">None</span> <span class=\"c1\"># no inefficiency found</span>\n</pre></div>\n\n<h3 id=\"identifying-constant-booleans-with-z3\">Identifying constant booleans with Z3</h3>\n<p>To get started finding inefficiencies in a trace, we can\nfirst focus on boolean variables. For every operation in the trace that\nreturns a bool we can ask Z3 to prove that this variable must be always True or\nalways False. Most of the time, neither of these proofs will succeed. But if Z3\nmanages to prove one of them, we know have found an ineffiency: instead of\ncomputing the boolean result (eg by executing a comparison) the JIT's optimizer\ncould have replaced the operation with the corresponding boolean constant.</p>\n<p>Here's an example of an inefficiency found that way: if <code>x &lt; y</code> and <code>y &lt; z</code> are\nboth true, PyPy's JIT could conclude that <code>x &lt; z</code> must also\nbe true. However, currently the JIT cannot make that conclusion because it\nonly reasons about the concrete ranges (lower and upper bounds) for every\ninteger variable, but it has no way to remember anything about relationships\nbetween different variables. This kind of reasoning would quite often be useful\nto remove list/string bounds checks. Here's a <a href=\"https://www.youtube.com/watch?app=desktop&amp;v=1hm5ZVmBEvo\">talk about how LLVM does\nthis</a> (but it might be\ntoo heavyweight for a JIT setting).</p>\n<p>Here are some more examples found that way:</p>\n<ul>\n<li><code>x - 1 == x</code> is always False</li>\n<li><code>x - (x == -1) == -1</code> is always False. The pattern <code>x - (x == -1)</code> happens a\n  lot in PyPy's hash computations: To be compatible with the CPython hashes we\n  need to make sure that no object's hash is -1 (CPython uses -1 as an error\n  value on the C level).</li>\n</ul>\n<p>Here's pseudo-code for how to implement checking boolean operations for\ninefficiencies:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">find_inefficiencies</span><span class=\"p\">(</span><span class=\"n\">trace</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">for</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"n\">trace</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">z3arg0</span><span class=\"p\">,</span> <span class=\"n\">z3arg1</span><span class=\"p\">)</span>\n        <span class=\"c1\"># check for boolean constant result</span>\n        <span class=\"k\">if</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">has_boolean_result</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">res</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"s2\">\"inefficient\"</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\n            <span class=\"k\">if</span> <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">res</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"s2\">\"inefficient\"</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n        <span class=\"c1\"># checking for other inefficiencies, see the next sections</span>\n        <span class=\"o\">...</span>\n\n        <span class=\"c1\"># not inefficient, add op to the solver and continue with the next op</span>\n        <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">z3resultvar</span> <span class=\"o\">==</span> <span class=\"n\">res</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"kc\">None</span> <span class=\"c1\"># no inefficiency found</span>\n</pre></div>\n\n<h3 id=\"identifying-redundant-operations\">Identifying redundant operations</h3>\n<p>A more interesting class of redundancy is to try to find two operations in a\ntrace that compute the same result. We can do that by asking Z3 to prove for\neach pair of different operations in the trace to prove that the result is\nalways the same. If a previous operation returns the same result, the JIT could\nhave re-used that result instead of re-computing it, saving time. Doing this\nsearch for equivalent operations with Z3 is quadratic in the number of\noperations, but since traces have a maximum length it is not too bad in\npractice.</p>\n<p>This is the real workhorse of my script so far, it's what finds most of the\ninefficiencies. Here's a few examples:</p>\n<ul>\n<li>The very first and super useful example the script found is <code>int_eq(b, 1) ==\n  b</code> if <code>b</code> is known to be a boolean (ie and integer 0 or 1). I have already\n  implemented this optimization in the JIT.</li>\n<li>Similarly, <code>int_and(b, 1) == b</code> for booleans.</li>\n<li><code>(x &lt;&lt; 4) &amp; -0xf == x &lt;&lt; 4</code></li>\n<li><code>((x &gt;&gt; 63) &lt;&lt; 1) &lt;&lt; 2) &gt;&gt; 3 == x &gt;&gt; 63</code>. In general the JIT is quite bad at\n  optimizing repeated shifts (the infrastructure for doing better with that is\n  already in place, so this will be a relatively easy fix).</li>\n<li><code>(x &amp; 0xffffffff) | ((x &gt;&gt; 32) &lt;&lt; 32) == x</code>. Having the JIT optimize this\n  would maybe require first recognizing that <code>(x &gt;&gt; 32) &lt;&lt; 32</code> can be expressed\n  as a mask: <code>(x &amp; 0xffffffff00000000)</code>, and then using <code>(x &amp; c1) | (x &amp; c2) ==\n  x &amp; (c1 | c2)</code></li>\n<li>A commonly occurring pattern is variations of this one:\n  <code>((x &amp; 1345) ^ 2048) - 2048 == x &amp; 1345</code> (with different constants, of\n  course). xor is add without carry, and <code>x &amp; 1345</code> does not have the bit\n  <code>2048</code> set. Therefore the <code>^ 2048</code> is equivalent to <code>+ 2048</code>, which the <code>-\n  2048</code> cancels. More generally, if <code>a &amp; b == 0</code>, then <code>a + b == a | b == a ^ b</code>.\n  I don't understand at all why this appears so often in the traces, but I\n  see variations of it a lot. LLVM can optimize this, but <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=115829\">GCC\n  can't</a>, thanks to\n  <a href=\"https://hachyderm.io/@pinskia/112752641328799157\">Andrew Pinski for filing the\n  bug</a>!</li>\n</ul>\n<p>And here's some implementation pseudo-code again:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">find_inefficiencies</span><span class=\"p\">(</span><span class=\"n\">trace</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">for</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"n\">trace</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">z3arg0</span><span class=\"p\">,</span> <span class=\"n\">z3arg1</span><span class=\"p\">)</span>\n        <span class=\"c1\"># check for boolean constant result</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\"># searching for redundant operations</span>\n        <span class=\"k\">for</span> <span class=\"n\">previous_op</span> <span class=\"ow\">in</span> <span class=\"n\">trace</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">previous_op</span> <span class=\"ow\">is</span> <span class=\"n\">op</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span> <span class=\"c1\"># done, reached the current op</span>\n            <span class=\"n\">previous_op_z3var</span> <span class=\"o\">=</span> <span class=\"n\">var_to_z3var</span><span class=\"p\">[</span><span class=\"n\">previous_op</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">previous_op_z3var</span> <span class=\"o\">==</span> <span class=\"n\">res</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"s2\">\"inefficient\"</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">previous_op</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\"># more code here later</span>\n        <span class=\"o\">...</span>\n\n        <span class=\"c1\"># not inefficient, add op to the solver and continue with the next op</span>\n        <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">z3resultvar</span> <span class=\"o\">==</span> <span class=\"n\">res</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"kc\">None</span> <span class=\"c1\"># no inefficiency found</span>\n</pre></div>\n\n<h3 id=\"synthesizing-more-complicated-constants-with-exists-forall\">Synthesizing more complicated constants with exists-forall</h3>\n<p>To find out whether some integer operations always return a constant result, we\ncan't simply use the same trick as for those operations that return boolean\nresults, because enumerating 2⁶⁴ possible constants and checking them all\nwould take too long. Like in the last post, we can use <code>z3.ForAll</code> to find out\nwhether Z3 can synthesize a constant for the result of an operation for us.\nIf such a constant exists, the JIT could have removed the operation,\nand replaced it with the constant that Z3 provides.</p>\n<p>Here a few examples of inefficiencies found this way:</p>\n<ul>\n<li><code>(x ^ 1) ^ x == 1</code> (or, more generally: <code>(x ^ y) ^ x == y</code>)</li>\n<li>if <code>x | y == 0</code>, it follows that <code>x == 0</code> and <code>y == 0</code></li>\n<li>if <code>x != MAXINT</code>, then <code>x + 1 &gt; x</code></li>\n</ul>\n<p>Implementing this is actually slightly annoying. The <code>solver.add</code> calls for\nnon-inefficient ops add assertions to the solver, which are now confusing the\n<code>z3.ForAll</code> query. We could remove all assertion from the solver, then do the\n<code>ForAll</code> query, then add the assertions back. What I ended doing instead was\ninstantiating a second solver object that I'm using for the <code>ForAll</code> queries,\nthat remains empty the whole time.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">find_inefficiencies</span><span class=\"p\">(</span><span class=\"n\">trace</span><span class=\"p\">):</span>\n    <span class=\"n\">solver</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Solver</span><span class=\"p\">()</span>\n    <span class=\"n\">empty_solver</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Solver</span><span class=\"p\">()</span>\n    <span class=\"n\">var_to_z3var</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">for</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"n\">trace</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">z3arg0</span><span class=\"p\">,</span> <span class=\"n\">z3arg1</span><span class=\"p\">)</span>\n        <span class=\"c1\"># check for boolean constant result</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\"># searching for redundant operations</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\"># checking for constant results</span>\n        <span class=\"n\">constvar</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s1\">'find_const'</span><span class=\"p\">,</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n        <span class=\"n\">condition</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">ForAll</span><span class=\"p\">(</span>\n            <span class=\"n\">var_to_z3var</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(),</span>\n            <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Implies</span><span class=\"p\">(</span>\n                <span class=\"o\">*</span><span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">assertions</span><span class=\"p\">(),</span>\n                <span class=\"n\">expr</span> <span class=\"o\">==</span> <span class=\"n\">constvar</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">empty_solver</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">condition</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">sat</span><span class=\"p\">:</span>\n            <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">empty_solver</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">()</span>\n            <span class=\"n\">const</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">[</span><span class=\"n\">constvar</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">as_signed_long</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"s2\">\"inefficient\"</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">const</span>\n\n        <span class=\"c1\"># not inefficient, add op to the solver and continue with the next op</span>\n        <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">z3resultvar</span> <span class=\"o\">==</span> <span class=\"n\">res</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"kc\">None</span> <span class=\"c1\"># no inefficiency found</span>\n</pre></div>\n\n<h3 id=\"minimization\">Minimization</h3>\n<p>Analyzing an inefficiency by hand in the context of a larger trace is quite\ntedious. Therefore I've implemented a (super inefficient) script to try to make\nthe examples smaller. Here's how that works:</p>\n<ul>\n<li>First throw out all the operations that occur <em>after</em> the inefficient operation\n  in the trace.</li>\n<li>Then we remove all \"dead\" operations, ie operations that don't have their\n  results used (all the operations that we can analyze with Z3 are without side\n  effects).</li>\n<li>Now we try to remove every guard in the trace one by one and check\n  afterwards, whether the resulting trace still has an inefficiency.</li>\n<li>We also try to replace every single operation with a new argument to the\n  trace, to see whether the inefficiency is still present.</li>\n</ul>\n<p>The minimization process is sort of inefficient and I should probably be using\n <a href=\"https://github.com/DRMacIver/shrinkray\">shrinkray</a> or\n <a href=\"https://github.com/csmith-project/creduce\">C-Reduce</a> instead. However, it\n seems to work well in practice and the runtime isn't too bad.</p>\n<h3 id=\"results\">Results</h3>\n<p>So far I am using the JIT traces of three programs: 1) Booting Linux on the\n<a href=\"https://docs.pydrofoil.org\">Pydrofoil</a> RISC-V emulator, 2) booting Linux on the Pydrofoil ARM emulator, and 3)\nrunning the PyPy bootstrap process on top of PyPy.</p>\n<p>I picked these programs because most Python programs don't contain interesting\namounts of integer operations, and the traces of the emulators\ncontain a lot of them. I also used the bootstrap process because I still wanted\nto try a big Python program and personally care about the runtime of this\nprogram a lot.</p>\n<p>The script identifies 94\ninefficiencies in the traces, a lot of them come from repeating\npatterns. My next steps will be to manually inspect them all, categorize them, and\nimplement easy optimizations identified that way. I also want a way to sort the\nexamples by execution count in the benchmarks, to get a feeling for which of\nthem are most important.</p>\n<p>I didn't investigate the full set of <a href=\"https://speed.pypy.org\">Python\nbenchmarks</a> that PyPy uses yet, because I don't expect\nthem to contain interesting amounts of integer operations, but maybe I am wrong\nabout that? Will have to try eventually.</p>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>This was again much easier to do than I would have expected! Given that I had\nthe translation of trace ops to Z3 already in place, it was a matter of about a\nday's of programming to use this infrastructure to find the first problems and\nminimizing them.</p>\n<p>Reusing the results of existing operations or replacing operations by constants\ncan be seen as \"zero-instruction superoptimization\". I'll probably be rather\nbusy for a while to add the missing optimizations identified by my simple\nscript. But later extensions to actually synthesize one or several operations\nin the attempt to optimize the traces more and find more opportunities should\nbe possible.</p>\n<p>Finding inefficiencies in traces with Z3 is significantly less\nannoying and also less error-prone than just manually inspecting traces and\ntrying to spot optimization opportunities.</p>\n<h3 id=\"random-notes-and-sources\">Random Notes and Sources</h3>\n<p>Again, John's blog posts:</p>\n<ul>\n<li><a href=\"https://blog.regehr.org/archives/1109\">Let’s Work on an LLVM Superoptimizer</a></li>\n<li><a href=\"https://blog.regehr.org/archives/1146\">Early Superoptimizer Results</a></li>\n<li><a href=\"https://blog.regehr.org/archives/1252\">A Few Synthesizing Superoptimizer Results</a></li>\n<li><a href=\"https://blog.regehr.org/archives/1636\">Synthesizing Constants</a></li>\n</ul>\n<p>and papers:</p>\n<ul>\n<li><a href=\"https://arxiv.org/pdf/1711.04422\">A Synthesizing Superoptimizer</a></li>\n<li><a href=\"https://dl.acm.org/doi/pdf/10.1145/3649837\">Hydra: Generalizing Peephole Optimizations with Program Synthesis</a></li>\n</ul>\n<p>I remembered recently that I had seen the approach of optimizing the traces of\na tracing JIT with Z3 a long time ago, as part of the (now long dead, I think)\n<a href=\"https://web.archive.org/web/20160304055149/http://research.microsoft.com/en-us/projects/spur/\">SPUR\nproject</a>.\nThere's a <a href=\"https://web.archive.org/web/20161029162737/http://csl.stanford.edu/~christos/pldi2010.fit/tillmann.provers4jit.pdf\">workshop\npaper</a>\nfrom 2010 about this. SPUR was trying to use Z3 built into the actual JIT (as\nopposed to using Z3 only to find places where the regular optimizers could be\nimproved). In addition to bitvectors, SPUR also used the Z3 support for arrays\nto model the C# heap and remove redundant stores. This is still another future\nextension for all the Z3 work I've been doing in the context of the PyPy JIT.</p>"
        }
      ],
      "description": "<p>In my last post I've described <a href=\"https://www.pypy.org/posts/2024/07/finding-simple-rewrite-rules-jit-z3.html\">how to use Z3 to find simple local peephole\noptimization patterns</a>\nfor the integer operations in PyPy's JIT. An example is <code>int_and(x, 0) -&gt;\n0</code>. In this post I want to scale up the problem of identifying possible\noptimizations to much bigger instruction sequences, also using Z3. For that, I\nam starting with the JIT traces of <strong>real benchmarks</strong>, after they have been\noptimized by the optimizer of PyPy's JIT. Then we can ask Z3 to find\ninefficient integer operations in those traces.</p>\n<p>Starting from the optimized traces of real programs has some big\nadvantages over the \"classical\" superoptimization approach of generating and\nthen trying all possible sequences of instructions. It avoids the\ncombinatorial explosion that happens with the latter approach. Also, starting\nfrom the traces of benchmarks or (even better) actual programs makes sure that\nwe actually care about the missing optimizations\nthat are found in this way. And because the traces are analyzed after they have\nbeen optimized by PyPy's optimizer, we only get reports for <em>missing</em>\noptimizations, that the JIT isn't able to do (yet).</p>\n<p>The techniques and experiments I describe in this post are again the result of\na bunch of discussions with John Regehr at a conference a few weeks ago, as\nwell as reading his blog posts and papers. Thanks John! Also thanks to <a href=\"https://bernsteinbear.com/\">Max\nBernstein</a> for super helpful feedback on the drafts\nof this blog post (and for poking me to write things in general).</p>\n<h3 id=\"high-level-approach\">High-Level Approach</h3>\n<p>The approach that I took works as follows:</p>\n<ul>\n<li>Run benchmarks or other interesting programs and then dump the IR of the JIT\n  traces into a file. The traces have at that point been already optimized by\n  the PyPy JIT's optimizer.</li>\n<li>For every trace, ignore all the operations on non-integer variables.</li>\n<li>Translate every integer operation into a Z3 formula.</li>\n<li>For every operation, use Z3 to find out whether the operation is redundant\n  (how that is done is described below).</li>\n<li>If the operation is redundant, the trace is less efficient than it could have\n  been, because the optimizer could also have removed the operation. Report the\n  inefficiency.</li>\n<li>Minimize the inefficient programs by removing as many operations as possible\n  to make the problem easier to understand.</li>\n</ul>\n<p>In the post I will describe the details and show some pseudocode of the\napproach. I'll also make the proper code public eventually (but it needs a\nhealthy dose of cleanups first).</p>\n<h3 id=\"dumping-pypy-traces\">Dumping PyPy Traces</h3>\n<p>PyPy will write its JIT traces into the file <code>out</code> if the environment variable\n<a href=\"https://doc.pypy.org/en/latest/man/pypy.1.html\"><code>PYPYLOG</code></a> is set as follows:</p>\n<div class=\"code\"><pre class=\"code literal-block\">PYPYLOG=jit-log-opt:out pypy &lt;program.py&gt;\n</pre></div>\n\n<p>This environment variable works for PyPy, but also for other virtual machines\nbuilt with RPython.</p>\n<p>(This is really a side point for the rest of the blog post, but since the\nquestion came up I wanted to clarify it: Operations on integers in the Python\nprogram that the JIT is running don't all correspond 1-to-1 with the <code>int_...</code>\noperations in the traces. The <code>int_...</code> trace operations always operate on\nmachine words. The Python <code>int</code> type supports arbitrarily large integers. PyPy\nwill optimistically try to lower the operations on Python integers into machine\nword operations, but adds the necessary guards into the trace to make sure that\noverflow outside of the range of machine words is caught. In case one of these\nguards fails the interpreter switches to a big integer heap-allocated\nrepresentation.)</p>\n<h3 id=\"encoding-traces-as-z3-formulas\">Encoding Traces as Z3 formulas</h3>\n<p>The last blog post already contained the code to encode the results of\nindividual trace operations into Z3 formulas, so we don't need to repeat that\nhere. To encode traces of operations we introduce a Z3 variable for every\noperation in the trace and then call the <code>z3_expression</code> function for every\nsingle one of the operations in the trace.</p>\n<p>For example, for the following trace:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">[i1]</span>\n<span class=\"na\">i2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">uint_rshift(i1, 32)</span>\n<span class=\"na\">i3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">int_and(i2, 65535)</span>\n<span class=\"na\">i4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">uint_rshift(i1, 48)</span>\n<span class=\"na\">i5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">int_lshift(i4, 16)</span>\n<span class=\"na\">i6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">int_or(i5, i3)</span>\n<span class=\"na\">jump(i6, i2) # equal</span>\n</pre></div>\n\n<p>We would get the Z3 formula:</p>\n<div class=\"code\"><pre class=\"code literal-block\">z3.And(i2 == LShR(i1, 32),\n       i3 == i2 &amp; 65535,\n       i4 == LShR(i1, 48),\n       i5 == i4 &lt;&lt; 16)\n</pre></div>\n\n<p>Usually we won't ask for the formula of the whole trace at once. Instead we go\nthrough the trace operation by operation and try to find inefficiencies in the\ncurrent one we are looking at. Roughly like this (pseudo-)code:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">newvar</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_inefficiencies</span><span class=\"p\">(</span><span class=\"n\">trace</span><span class=\"p\">):</span>\n    <span class=\"n\">solver</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Solver</span><span class=\"p\">()</span>\n    <span class=\"n\">var_to_z3var</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">input_argument</span> <span class=\"ow\">in</span> <span class=\"n\">trace</span><span class=\"o\">.</span><span class=\"n\">inputargs</span><span class=\"p\">:</span>\n        <span class=\"n\">var_to_z3var</span><span class=\"p\">[</span><span class=\"n\">input_argument</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">newz3var</span><span class=\"p\">(</span><span class=\"n\">input_argument</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"n\">trace</span><span class=\"p\">:</span>\n        <span class=\"n\">var_to_z3var</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">z3resultvar</span> <span class=\"o\">=</span> <span class=\"n\">newz3var</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">resultvarname</span><span class=\"p\">)</span>\n        <span class=\"n\">arg0</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">z3arg0</span> <span class=\"o\">=</span> <span class=\"n\">var_to_z3var</span><span class=\"p\">[</span><span class=\"n\">arg0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">arg1</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">z3arg1</span> <span class=\"o\">=</span> <span class=\"n\">var_to_z3var</span><span class=\"p\">[</span><span class=\"n\">arg1</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">z3arg1</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">z3arg0</span><span class=\"p\">,</span> <span class=\"n\">z3arg1</span><span class=\"p\">)</span>\n        <span class=\"c1\"># checking for inefficiencies, see the next sections</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">if</span> <span class=\"o\">...</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">\"inefficient\"</span><span class=\"p\">,</span> <span class=\"n\">op</span>\n\n        <span class=\"c1\"># not inefficient, assert op into the solver and continue with the next op</span>\n        <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">z3resultvar</span> <span class=\"o\">==</span> <span class=\"n\">res</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"kc\">None</span> <span class=\"c1\"># no inefficiency found</span>\n</pre></div>\n\n<h3 id=\"identifying-constant-booleans-with-z3\">Identifying constant booleans with Z3</h3>\n<p>To get started finding inefficiencies in a trace, we can\nfirst focus on boolean variables. For every operation in the trace that\nreturns a bool we can ask Z3 to prove that this variable must be always True or\nalways False. Most of the time, neither of these proofs will succeed. But if Z3\nmanages to prove one of them, we know have found an ineffiency: instead of\ncomputing the boolean result (eg by executing a comparison) the JIT's optimizer\ncould have replaced the operation with the corresponding boolean constant.</p>\n<p>Here's an example of an inefficiency found that way: if <code>x &lt; y</code> and <code>y &lt; z</code> are\nboth true, PyPy's JIT could conclude that <code>x &lt; z</code> must also\nbe true. However, currently the JIT cannot make that conclusion because it\nonly reasons about the concrete ranges (lower and upper bounds) for every\ninteger variable, but it has no way to remember anything about relationships\nbetween different variables. This kind of reasoning would quite often be useful\nto remove list/string bounds checks. Here's a <a href=\"https://www.youtube.com/watch?app=desktop&amp;v=1hm5ZVmBEvo\">talk about how LLVM does\nthis</a> (but it might be\ntoo heavyweight for a JIT setting).</p>\n<p>Here are some more examples found that way:</p>\n<ul>\n<li><code>x - 1 == x</code> is always False</li>\n<li><code>x - (x == -1) == -1</code> is always False. The pattern <code>x - (x == -1)</code> happens a\n  lot in PyPy's hash computations: To be compatible with the CPython hashes we\n  need to make sure that no object's hash is -1 (CPython uses -1 as an error\n  value on the C level).</li>\n</ul>\n<p>Here's pseudo-code for how to implement checking boolean operations for\ninefficiencies:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">find_inefficiencies</span><span class=\"p\">(</span><span class=\"n\">trace</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">for</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"n\">trace</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">z3arg0</span><span class=\"p\">,</span> <span class=\"n\">z3arg1</span><span class=\"p\">)</span>\n        <span class=\"c1\"># check for boolean constant result</span>\n        <span class=\"k\">if</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">has_boolean_result</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">res</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"s2\">\"inefficient\"</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"mi\">0</span>\n            <span class=\"k\">if</span> <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">res</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"s2\">\"inefficient\"</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n        <span class=\"c1\"># checking for other inefficiencies, see the next sections</span>\n        <span class=\"o\">...</span>\n\n        <span class=\"c1\"># not inefficient, add op to the solver and continue with the next op</span>\n        <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">z3resultvar</span> <span class=\"o\">==</span> <span class=\"n\">res</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"kc\">None</span> <span class=\"c1\"># no inefficiency found</span>\n</pre></div>\n\n<h3 id=\"identifying-redundant-operations\">Identifying redundant operations</h3>\n<p>A more interesting class of redundancy is to try to find two operations in a\ntrace that compute the same result. We can do that by asking Z3 to prove for\neach pair of different operations in the trace to prove that the result is\nalways the same. If a previous operation returns the same result, the JIT could\nhave re-used that result instead of re-computing it, saving time. Doing this\nsearch for equivalent operations with Z3 is quadratic in the number of\noperations, but since traces have a maximum length it is not too bad in\npractice.</p>\n<p>This is the real workhorse of my script so far, it's what finds most of the\ninefficiencies. Here's a few examples:</p>\n<ul>\n<li>The very first and super useful example the script found is <code>int_eq(b, 1) ==\n  b</code> if <code>b</code> is known to be a boolean (ie and integer 0 or 1). I have already\n  implemented this optimization in the JIT.</li>\n<li>Similarly, <code>int_and(b, 1) == b</code> for booleans.</li>\n<li><code>(x &lt;&lt; 4) &amp; -0xf == x &lt;&lt; 4</code></li>\n<li><code>((x &gt;&gt; 63) &lt;&lt; 1) &lt;&lt; 2) &gt;&gt; 3 == x &gt;&gt; 63</code>. In general the JIT is quite bad at\n  optimizing repeated shifts (the infrastructure for doing better with that is\n  already in place, so this will be a relatively easy fix).</li>\n<li><code>(x &amp; 0xffffffff) | ((x &gt;&gt; 32) &lt;&lt; 32) == x</code>. Having the JIT optimize this\n  would maybe require first recognizing that <code>(x &gt;&gt; 32) &lt;&lt; 32</code> can be expressed\n  as a mask: <code>(x &amp; 0xffffffff00000000)</code>, and then using <code>(x &amp; c1) | (x &amp; c2) ==\n  x &amp; (c1 | c2)</code></li>\n<li>A commonly occurring pattern is variations of this one:\n  <code>((x &amp; 1345) ^ 2048) - 2048 == x &amp; 1345</code> (with different constants, of\n  course). xor is add without carry, and <code>x &amp; 1345</code> does not have the bit\n  <code>2048</code> set. Therefore the <code>^ 2048</code> is equivalent to <code>+ 2048</code>, which the <code>-\n  2048</code> cancels. More generally, if <code>a &amp; b == 0</code>, then <code>a + b == a | b == a ^ b</code>.\n  I don't understand at all why this appears so often in the traces, but I\n  see variations of it a lot. LLVM can optimize this, but <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=115829\">GCC\n  can't</a>, thanks to\n  <a href=\"https://hachyderm.io/@pinskia/112752641328799157\">Andrew Pinski for filing the\n  bug</a>!</li>\n</ul>\n<p>And here's some implementation pseudo-code again:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">find_inefficiencies</span><span class=\"p\">(</span><span class=\"n\">trace</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">for</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"n\">trace</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">z3arg0</span><span class=\"p\">,</span> <span class=\"n\">z3arg1</span><span class=\"p\">)</span>\n        <span class=\"c1\"># check for boolean constant result</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\"># searching for redundant operations</span>\n        <span class=\"k\">for</span> <span class=\"n\">previous_op</span> <span class=\"ow\">in</span> <span class=\"n\">trace</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">previous_op</span> <span class=\"ow\">is</span> <span class=\"n\">op</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span> <span class=\"c1\"># done, reached the current op</span>\n            <span class=\"n\">previous_op_z3var</span> <span class=\"o\">=</span> <span class=\"n\">var_to_z3var</span><span class=\"p\">[</span><span class=\"n\">previous_op</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">solver</span><span class=\"p\">,</span> <span class=\"n\">previous_op_z3var</span> <span class=\"o\">==</span> <span class=\"n\">res</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"s2\">\"inefficient\"</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">previous_op</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\"># more code here later</span>\n        <span class=\"o\">...</span>\n\n        <span class=\"c1\"># not inefficient, add op to the solver and continue with the next op</span>\n        <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">z3resultvar</span> <span class=\"o\">==</span> <span class=\"n\">res</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"kc\">None</span> <span class=\"c1\"># no inefficiency found</span>\n</pre></div>\n\n<h3 id=\"synthesizing-more-complicated-constants-with-exists-forall\">Synthesizing more complicated constants with exists-forall</h3>\n<p>To find out whether some integer operations always return a constant result, we\ncan't simply use the same trick as for those operations that return boolean\nresults, because enumerating 2⁶⁴ possible constants and checking them all\nwould take too long. Like in the last post, we can use <code>z3.ForAll</code> to find out\nwhether Z3 can synthesize a constant for the result of an operation for us.\nIf such a constant exists, the JIT could have removed the operation,\nand replaced it with the constant that Z3 provides.</p>\n<p>Here a few examples of inefficiencies found this way:</p>\n<ul>\n<li><code>(x ^ 1) ^ x == 1</code> (or, more generally: <code>(x ^ y) ^ x == y</code>)</li>\n<li>if <code>x | y == 0</code>, it follows that <code>x == 0</code> and <code>y == 0</code></li>\n<li>if <code>x != MAXINT</code>, then <code>x + 1 &gt; x</code></li>\n</ul>\n<p>Implementing this is actually slightly annoying. The <code>solver.add</code> calls for\nnon-inefficient ops add assertions to the solver, which are now confusing the\n<code>z3.ForAll</code> query. We could remove all assertion from the solver, then do the\n<code>ForAll</code> query, then add the assertions back. What I ended doing instead was\ninstantiating a second solver object that I'm using for the <code>ForAll</code> queries,\nthat remains empty the whole time.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">find_inefficiencies</span><span class=\"p\">(</span><span class=\"n\">trace</span><span class=\"p\">):</span>\n    <span class=\"n\">solver</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Solver</span><span class=\"p\">()</span>\n    <span class=\"n\">empty_solver</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Solver</span><span class=\"p\">()</span>\n    <span class=\"n\">var_to_z3var</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">for</span> <span class=\"n\">op</span> <span class=\"ow\">in</span> <span class=\"n\">trace</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">z3arg0</span><span class=\"p\">,</span> <span class=\"n\">z3arg1</span><span class=\"p\">)</span>\n        <span class=\"c1\"># check for boolean constant result</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\"># searching for redundant operations</span>\n        <span class=\"o\">...</span>\n        <span class=\"c1\"># checking for constant results</span>\n        <span class=\"n\">constvar</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s1\">'find_const'</span><span class=\"p\">,</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n        <span class=\"n\">condition</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">ForAll</span><span class=\"p\">(</span>\n            <span class=\"n\">var_to_z3var</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(),</span>\n            <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Implies</span><span class=\"p\">(</span>\n                <span class=\"o\">*</span><span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">assertions</span><span class=\"p\">(),</span>\n                <span class=\"n\">expr</span> <span class=\"o\">==</span> <span class=\"n\">constvar</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">empty_solver</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">condition</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">sat</span><span class=\"p\">:</span>\n            <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">empty_solver</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">()</span>\n            <span class=\"n\">const</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">[</span><span class=\"n\">constvar</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">as_signed_long</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"s2\">\"inefficient\"</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">const</span>\n\n        <span class=\"c1\"># not inefficient, add op to the solver and continue with the next op</span>\n        <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">z3resultvar</span> <span class=\"o\">==</span> <span class=\"n\">res</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"kc\">None</span> <span class=\"c1\"># no inefficiency found</span>\n</pre></div>\n\n<h3 id=\"minimization\">Minimization</h3>\n<p>Analyzing an inefficiency by hand in the context of a larger trace is quite\ntedious. Therefore I've implemented a (super inefficient) script to try to make\nthe examples smaller. Here's how that works:</p>\n<ul>\n<li>First throw out all the operations that occur <em>after</em> the inefficient operation\n  in the trace.</li>\n<li>Then we remove all \"dead\" operations, ie operations that don't have their\n  results used (all the operations that we can analyze with Z3 are without side\n  effects).</li>\n<li>Now we try to remove every guard in the trace one by one and check\n  afterwards, whether the resulting trace still has an inefficiency.</li>\n<li>We also try to replace every single operation with a new argument to the\n  trace, to see whether the inefficiency is still present.</li>\n</ul>\n<p>The minimization process is sort of inefficient and I should probably be using\n <a href=\"https://github.com/DRMacIver/shrinkray\">shrinkray</a> or\n <a href=\"https://github.com/csmith-project/creduce\">C-Reduce</a> instead. However, it\n seems to work well in practice and the runtime isn't too bad.</p>\n<h3 id=\"results\">Results</h3>\n<p>So far I am using the JIT traces of three programs: 1) Booting Linux on the\n<a href=\"https://docs.pydrofoil.org\">Pydrofoil</a> RISC-V emulator, 2) booting Linux on the Pydrofoil ARM emulator, and 3)\nrunning the PyPy bootstrap process on top of PyPy.</p>\n<p>I picked these programs because most Python programs don't contain interesting\namounts of integer operations, and the traces of the emulators\ncontain a lot of them. I also used the bootstrap process because I still wanted\nto try a big Python program and personally care about the runtime of this\nprogram a lot.</p>\n<p>The script identifies 94\ninefficiencies in the traces, a lot of them come from repeating\npatterns. My next steps will be to manually inspect them all, categorize them, and\nimplement easy optimizations identified that way. I also want a way to sort the\nexamples by execution count in the benchmarks, to get a feeling for which of\nthem are most important.</p>\n<p>I didn't investigate the full set of <a href=\"https://speed.pypy.org\">Python\nbenchmarks</a> that PyPy uses yet, because I don't expect\nthem to contain interesting amounts of integer operations, but maybe I am wrong\nabout that? Will have to try eventually.</p>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>This was again much easier to do than I would have expected! Given that I had\nthe translation of trace ops to Z3 already in place, it was a matter of about a\nday's of programming to use this infrastructure to find the first problems and\nminimizing them.</p>\n<p>Reusing the results of existing operations or replacing operations by constants\ncan be seen as \"zero-instruction superoptimization\". I'll probably be rather\nbusy for a while to add the missing optimizations identified by my simple\nscript. But later extensions to actually synthesize one or several operations\nin the attempt to optimize the traces more and find more opportunities should\nbe possible.</p>\n<p>Finding inefficiencies in traces with Z3 is significantly less\nannoying and also less error-prone than just manually inspecting traces and\ntrying to spot optimization opportunities.</p>\n<h3 id=\"random-notes-and-sources\">Random Notes and Sources</h3>\n<p>Again, John's blog posts:</p>\n<ul>\n<li><a href=\"https://blog.regehr.org/archives/1109\">Let’s Work on an LLVM Superoptimizer</a></li>\n<li><a href=\"https://blog.regehr.org/archives/1146\">Early Superoptimizer Results</a></li>\n<li><a href=\"https://blog.regehr.org/archives/1252\">A Few Synthesizing Superoptimizer Results</a></li>\n<li><a href=\"https://blog.regehr.org/archives/1636\">Synthesizing Constants</a></li>\n</ul>\n<p>and papers:</p>\n<ul>\n<li><a href=\"https://arxiv.org/pdf/1711.04422\">A Synthesizing Superoptimizer</a></li>\n<li><a href=\"https://dl.acm.org/doi/pdf/10.1145/3649837\">Hydra: Generalizing Peephole Optimizations with Program Synthesis</a></li>\n</ul>\n<p>I remembered recently that I had seen the approach of optimizing the traces of\na tracing JIT with Z3 a long time ago, as part of the (now long dead, I think)\n<a href=\"https://web.archive.org/web/20160304055149/http://research.microsoft.com/en-us/projects/spur/\">SPUR\nproject</a>.\nThere's a <a href=\"https://web.archive.org/web/20161029162737/http://csl.stanford.edu/~christos/pldi2010.fit/tillmann.provers4jit.pdf\">workshop\npaper</a>\nfrom 2010 about this. SPUR was trying to use Z3 built into the actual JIT (as\nopposed to using Z3 only to find places where the regular optimizers could be\nimproved). In addition to bitvectors, SPUR also used the Z3 support for arrays\nto model the C# heap and remove redundant stores. This is still another future\nextension for all the Z3 work I've been doing in the context of the PyPy JIT.</p>",
      "id": "https://www.pypy.org/posts/2024/07/mining-jit-traces-missing-optimizations-z3.html",
      "link": "https://www.pypy.org/posts/2024/07/mining-jit-traces-missing-optimizations-z3.html",
      "links": [],
      "published": "2024-07-19T17:01:09+00:00",
      "tags": [
        {
          "label": null,
          "scheme": null,
          "term": "jit"
        },
        {
          "label": null,
          "scheme": null,
          "term": "z3"
        }
      ],
      "title": "Mining JIT traces for missing optimizations with Z3"
    },
    {
      "author": "CF Bolz-Tereick",
      "content": [
        {
          "base": null,
          "language": null,
          "type": "text/html",
          "value": "<p>In June I was at the <a href=\"https://pldi24.sigplan.org/\">PLDI conference</a> in\nCopenhagen to present a <a href=\"https://dl.acm.org/doi/10.1145/3652588.3663316\">paper</a>\nI co-authored with <a href=\"https://bernsteinbear.com/\">Max Bernstein</a>. I also finally\nmet <a href=\"https://blog.regehr.org/\">John Regehr</a>, who I'd been talking on social\nmedia for ages but had never met. John has been working on compiler correctness\nand better techniques for building compilers and optimizers since a very long\ntime. The blog post <a href=\"https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html\">Finding JIT Optimizer Bugs using SMT Solvers and\nFuzzing</a>\nwas heavily inspired by this work. We talked a lot about his and his groups\nwork on using Z3 for\n<a href=\"https://en.wikipedia.org/wiki/Superoptimization\">superoptimization</a> and for\nfinding missing optimizations. I have applied some of the things John told me\nabout to the traces of PyPy's JIT, and wanted to blog about that. However, my\ndraft felt quite hard to understand. Therefore I have now written this current\npost, to at least try to provide a somewhat gentler on-ramp to the topic.</p>\n<p>In <em>this</em> post we will use the Python-API to Z3 to find local peephole rewrite\nrules for the operations in the intermediate representation of PyPy's tracing\nJIT. The code for this is simple enough that we can go through all of it.</p>\n<p>The PyPy JIT produces traces of machine level instructions, which are optimized\nand then turned into machine code. The optimizer uses a number of approaches to\nmake the traces more efficient. For integer operations it applies a number of\narithmetic simplification rules rules, for example <code>int_add(x, 0) -&gt; x</code>. When\nimplementing these rules in the JIT there are <strong>two problems</strong>: How do we know\nthat the rules are correct? And how do we know that we haven't forgotten any\nrules? We'll try to answer both of these, but the first one in particular.</p>\n<p>We'll be using Z3, a satisfiability module theories (SMT) solver which has good\nbitvector support and most importantly an excellent Python API. We can use the\nsolver to reason about bitvectors, which are how we will model machine\nintegers.</p>\n<p>To find rewrite rules, we will consider the binary operations (i.e. those\ntaking two arguments) in PyPy traces that take and produce integers. The\ncompletely general form <code>op(x, y)</code> is not simplifiable on its own. But if\neither <code>x == y</code>\nor if one of the arguments is a constant, we can potentially simplify the\noperation into a simpler form. The results are either the variable <code>x</code>, or a\n(potentially different) constant. We'll ignore constant-folding where both\narguments of the binary operation are constants. The possible results for a\nsimplifiable binary operation are the variable <code>x</code> or another constant. This\nleaves the following patterns as possibilities:</p>\n<ul>\n<li><code>op(x, x) == x</code></li>\n<li><code>op(x, x) == c1</code></li>\n<li><code>op(x, c1) == x</code></li>\n<li><code>op(c1, x) == x</code></li>\n<li><code>op(x, c1) == c2</code></li>\n<li><code>op(c1, x) == c2</code></li>\n</ul>\n<p>Our approach will be to take every single supported binary integer operation,\ninstantiate all of these patterns, and try to ask Z3 whether the resulting\nsimplification is valid for all values of <code>x</code>.</p>\n<h3 id=\"quick-intro-to-the-z3-python-api\">Quick intro to the Z3 Python-API</h3>\n<p>Here's a terminal session showing the use of the Z3 Python API:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"go\">&gt;&gt;&gt;&gt; import z3</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; # construct a Z3 bitvector variable of width 8, with name x:</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; x = z3.BitVec('x', 8)</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; # construct a more complicated formula by using operator overloading:</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; x + x</span>\n<span class=\"go\">x + x</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; x + 1</span>\n<span class=\"go\">x + 1</span>\n</pre></div>\n\n<p>Z3 checks the \"satisfiability\" of a formula. This means that it tries to find\nan example set of concrete values for the variables that occur in a formula,\nsuch that the formula becomes true. Examples:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"go\">&gt;&gt;&gt;&gt; solver = z3.Solver()</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; solver.check(x * x == 3)</span>\n<span class=\"go\">unsat</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; # meaning no x fulfils this property</span>\n<span class=\"go\">&gt;&gt;&gt;&gt;</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; solver.check(x * x == 9)</span>\n<span class=\"go\">sat</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; model = solver.model()</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; model</span>\n<span class=\"go\">[x = 253]</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; model[x].as_signed_long()</span>\n<span class=\"go\">-3</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; # 253 is the same as -3 in two's complement arithmetic with 8 bits</span>\n</pre></div>\n\n<p>In order to use Z3 to prove something, we can ask Z3 to find counterexamples\nfor the statement, meaning concrete values that would make the negation of the\nstatement true:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"go\">&gt;&gt;&gt;&gt; solver.check(z3.Not(x ^ -1 == ~x))</span>\n<span class=\"go\">unsat</span>\n</pre></div>\n\n<p>The result <code>unsat</code> means that we just proved that <code>x ^ -1 == ~x</code> is true for\nall <code>x</code>, because there is no value for <code>x</code> that makes <code>not (x ^ -1 == ~x)</code>\ntrue (this works because -1 has all the bits set).</p>\n<p>If we try to prove something incorrect in this way, the following happens:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"go\">&gt;&gt;&gt;&gt; solver.check(z3.Not(x ^ -1 == x))</span>\n<span class=\"go\">sat</span>\n</pre></div>\n\n<p><code>sat</code> shows that <code>x ^ -1 == x</code> is (unsurprisingly) not always true, and we can\nask for a counterexample:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"go\">&gt;&gt;&gt;&gt; solver.model()</span>\n<span class=\"go\">[x = 0]</span>\n</pre></div>\n\n<p>This way of proving this works because the <code>check</code> calls try to solve an\n(implicit) \"exists\" quantifier, over all the Z3 variables used in the formula.\n<code>check</code> will either return <code>z3.unsat</code>, which means that no concrete values make\nthe formula true; or <code>z3.sat</code>, which means that you can get some concrete\nvalues that make the formula true by calling <code>solver.model()</code>.</p>\n<p>In math terms we prove things using <code>check</code> by de-Morgan's rules for quantifiers:</p>\n<p>$$ \\lnot \\exists x: \\lnot f(x) \\implies \\forall x: f(x) $$</p>\n<p>Now that we've seen the basics of using the Z3 API on a few small examples,\nwe'll use it in a bigger program.</p>\n<h3 id=\"encoding-the-integer-operations-of-rpythons-jit-into-z3-formulas\">Encoding the integer operations of RPython's JIT into Z3 formulas</h3>\n<p>Now we'll use the API to reason about the integer operations of the PyPy JIT\nintermediate representation (IR). The binary integer operations are:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">opnames2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"s2\">\"int_add\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_sub\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_mul\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_and\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_or\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_xor\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_eq\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_ne\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_lt\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_le\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_gt\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_ge\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"uint_lt\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"uint_le\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"uint_gt\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"uint_ge\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_lshift\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_rshift\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"uint_rshift\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"uint_mul_high\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_pydiv\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_pymod\"</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre></div>\n\n<p>There's not much special about the integer operations. Like in LLVM, most of\nthem are signedness-independent: <code>int_add</code>, <code>int_sub</code>, <code>int_mul</code>, ... work\ncorrectly for unsigned integers but also for\n<a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\">two's-complement</a> signed\nintegers. Exceptions for that are order comparisons like <code>int_lt</code> etc. for\nwhich we have unsigned variants <code>uint_lt</code> etc. All operations that produce a\nboolean result return a full-width integer <code>0</code> or <code>1</code> (the PyPy JIT supports\nonly word-sized integers in its intermediate representation)</p>\n<p>In order to reason about the IR operations, some ground work:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"kn\">import</span> <span class=\"nn\">z3</span>\n\n<span class=\"n\">INTEGER_WIDTH</span> <span class=\"o\">=</span> <span class=\"mi\">64</span>\n<span class=\"n\">solver</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Solver</span><span class=\"p\">()</span>\n<span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">\"timeout\"</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">)</span> <span class=\"c1\"># milliseconds, ie 10s</span>\n<span class=\"n\">xvar</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n<span class=\"n\">constvar</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s1\">'const'</span><span class=\"p\">,</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n<span class=\"n\">constvar2</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s1\">'const2'</span><span class=\"p\">,</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n<span class=\"n\">TRUEBV</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVecVal</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n<span class=\"n\">FALSEBV</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVecVal</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>And here's the a function to turn an integer IR operation of PyPy's JIT into Z3\nformulas:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\" computes a tuple of (result, valid_if) of Z3 formulas. `result` is the</span>\n<span class=\"sd\">    formula representing the result of the operation, given argument formulas</span>\n<span class=\"sd\">    arg0 and arg1. `valid_if` is a pre-condition that must be true for the</span>\n<span class=\"sd\">    result to be meaningful. \"\"\"</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"kc\">True</span> <span class=\"c1\"># the precondition is mostly True, with few exceptions</span>\n    <span class=\"k\">if</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_add\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">arg0</span> <span class=\"o\">+</span> <span class=\"n\">arg1</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_sub\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">arg0</span> <span class=\"o\">-</span> <span class=\"n\">arg1</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_mul\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">arg0</span> <span class=\"o\">*</span> <span class=\"n\">arg1</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_and\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">arg0</span> <span class=\"o\">&amp;</span> <span class=\"n\">arg1</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_or\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">arg0</span> <span class=\"o\">|</span> <span class=\"n\">arg1</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_xor\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">arg0</span> <span class=\"o\">^</span> <span class=\"n\">arg1</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_eq\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">arg0</span> <span class=\"o\">==</span> <span class=\"n\">arg1</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_ne\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">arg0</span> <span class=\"o\">!=</span> <span class=\"n\">arg1</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_lt\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">arg0</span> <span class=\"o\">&lt;</span> <span class=\"n\">arg1</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_le\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">arg0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">arg1</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_gt\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">arg0</span> <span class=\"o\">&gt;</span> <span class=\"n\">arg1</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_ge\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">arg0</span> <span class=\"o\">&gt;=</span> <span class=\"n\">arg1</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"uint_lt\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">ULT</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">))</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"uint_le\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">ULE</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">))</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"uint_gt\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">UGT</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">))</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"uint_ge\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">UGE</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">))</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_lshift\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">arg0</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">arg1</span>\n        <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">arg1</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span> <span class=\"o\">&lt;</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_rshift\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">arg0</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">arg1</span>\n        <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">arg1</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span> <span class=\"o\">&lt;</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"uint_rshift\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">LShR</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">)</span>\n        <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">arg1</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span> <span class=\"o\">&lt;</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"uint_mul_high\"</span><span class=\"p\">:</span>\n        <span class=\"c1\"># zero-extend args to 2*INTEGER_WIDTH bit, then multiply and extract</span>\n        <span class=\"c1\"># highest INTEGER_WIDTH bits</span>\n        <span class=\"n\">zarg0</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">ZeroExt</span><span class=\"p\">(</span><span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">,</span> <span class=\"n\">arg0</span><span class=\"p\">)</span>\n        <span class=\"n\">zarg1</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">ZeroExt</span><span class=\"p\">(</span><span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Extract</span><span class=\"p\">(</span><span class=\"n\">INTEGER_WIDTH</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">,</span> <span class=\"n\">zarg0</span> <span class=\"o\">*</span> <span class=\"n\">zarg1</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_pydiv\"</span><span class=\"p\">:</span>\n        <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">arg1</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">arg0</span> <span class=\"o\">/</span> <span class=\"n\">arg1</span>\n        <span class=\"n\">psubx</span> <span class=\"o\">=</span> <span class=\"n\">r</span> <span class=\"o\">*</span> <span class=\"n\">arg1</span> <span class=\"o\">-</span> <span class=\"n\">arg0</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">If</span><span class=\"p\">(</span><span class=\"n\">arg1</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">psubx</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">psubx</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">INTEGER_WIDTH</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_pymod\"</span><span class=\"p\">:</span>\n        <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">arg1</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">arg0</span> <span class=\"o\">%</span> <span class=\"n\">arg1</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">arg1</span> <span class=\"o\">&amp;</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">If</span><span class=\"p\">(</span><span class=\"n\">arg1</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">INTEGER_WIDTH</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_is_true\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">arg0</span> <span class=\"o\">!=</span> <span class=\"n\">FALSEBV</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_is_zero\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">arg0</span> <span class=\"o\">==</span> <span class=\"n\">FALSEBV</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_neg\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">arg0</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_invert\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"o\">~</span><span class=\"n\">arg0</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"unknown operation \"</span> <span class=\"o\">+</span> <span class=\"n\">opname</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">cond</span><span class=\"p\">(</span><span class=\"n\">z3expr</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\" helper function to turn a Z3 boolean result z3expr into a 1 or 0</span>\n<span class=\"sd\">    bitvector, using z3.If \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">If</span><span class=\"p\">(</span><span class=\"n\">z3expr</span><span class=\"p\">,</span> <span class=\"n\">TRUEBV</span><span class=\"p\">,</span> <span class=\"n\">FALSEBV</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>We map the semantics of a PyPy JIT operation to Z3 with the <code>z3_expression</code>\nfunction. It takes the name of a JIT operation and its two (or one) arguments\ninto a pair of Z3 formulas, <code>result</code> and <code>valid_if</code>. The resulting formulas are\nconstructed with the operator overloading of Z3 variables/formulas.</p>\n<p>The first element <code>result</code> of the result of <code>z3_expression</code> represents the result\nof performing the operation. <code>valid_if</code> is a bool that represents a condition that\nneeds to be <code>True</code> in order for the result of the operation to be defined. E.g.\n<code>int_pydiv(a, b)</code> is only valid if <code>b != 0</code>. Most operations are always valid,\nso they return <code>True</code> as that condition (we'll ignore <code>valid_if</code> for a bit, but it\nwill become more relevant further down in the post).</p>\n<p>We can define a helper function to prove things by finding counterexamples:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">prove</span><span class=\"p\">(</span><span class=\"n\">cond</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\" Try to prove a condition cond by searching for counterexamples of its negation. \"\"\"</span>\n    <span class=\"n\">z3res</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Not</span><span class=\"p\">(</span><span class=\"n\">cond</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"n\">z3res</span> <span class=\"o\">==</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">unsat</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n    <span class=\"k\">elif</span> <span class=\"n\">z3res</span> <span class=\"o\">==</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">unknown</span><span class=\"p\">:</span> <span class=\"c1\"># eg on timeout</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"k\">elif</span> <span class=\"n\">z3res</span> <span class=\"o\">==</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">sat</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"k\">assert</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"should be unreachable\"</span>\n</pre></div>\n\n<h3 id=\"finding-rewrite-rules\">Finding rewrite rules</h3>\n<p>Now we can start finding our first rewrite rules, following the first pattern\n<code>op(x, x) -&gt; x</code>. We do this by iterating over all the supported binary\noperation names, getting the z3 expression for <code>op(x, x)</code> and then asking Z3 to\nprove <code>op(x, x) == x</code>.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">for</span> <span class=\"n\">opname</span> <span class=\"ow\">in</span> <span class=\"n\">opnames2</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">xvar</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">opname</span><span class=\"si\">}</span><span class=\"s2\">(x, x) -&gt; x, </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>This yields the simplifications:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_or</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n</pre></div>\n\n<h3 id=\"synthesizing-constants\">Synthesizing constants</h3>\n<p>Supporting the next patterns is harder: <code>op(x, x) == c1</code>, <code>op(x, c1) == x</code>, and\n<code>op(c1, x) == x</code>. We don't know which constants to pick to try to get Z3 to\nprove the equality. We could iterate over common constants like <code>0</code>, <code>1</code>,\n<code>MAXINT</code>, etc, or even over all the 256 values for a bitvector of length 8.\nHowever, we will instead ask Z3 to find the constants for us too.</p>\n<p>This can be done by using quantifiers, in this case <code>z3.ForAll</code>. The query we\npose to Z3 is \"does there exist a constant <code>c1</code> such that for all <code>x</code> the\nfollowing is true: <code>op(x, c1) == x</code>? Note that the constant <code>c1</code> is not\nnecessarily unique, there could be many of them. We generate several matching\nconstant, and add that they must be different to the condition of the second\nand further queries.</p>\n<p>We can express this in a helper function:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">find_constant</span><span class=\"p\">(</span><span class=\"n\">z3expr</span><span class=\"p\">,</span> <span class=\"n\">number_of_results</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n    <span class=\"n\">condition</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">ForAll</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"n\">xvar</span><span class=\"p\">],</span>\n        <span class=\"n\">z3expr</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">number_of_results</span><span class=\"p\">):</span>\n        <span class=\"n\">checkres</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">condition</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">checkres</span> <span class=\"o\">==</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">sat</span><span class=\"p\">:</span>\n            <span class=\"c1\"># if a solver check succeeds, we can ask for a model, which is</span>\n            <span class=\"c1\"># concrete values for the variables constvar</span>\n            <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">()</span>\n            <span class=\"n\">const</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">[</span><span class=\"n\">constvar</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">as_signed_long</span><span class=\"p\">()</span>\n            <span class=\"k\">yield</span> <span class=\"n\">const</span>\n            <span class=\"c1\"># make sure we don't generate the same constant again on the</span>\n            <span class=\"c1\"># next call</span>\n            <span class=\"n\">condition</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">constvar</span> <span class=\"o\">!=</span> <span class=\"n\">const</span><span class=\"p\">,</span> <span class=\"n\">condition</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># no (more) constants found</span>\n            <span class=\"k\">break</span>\n</pre></div>\n\n<p>We can use this new function for the three mentioned patterns:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"c1\"># try to find constants for op(x, x) == c</span>\n<span class=\"k\">for</span> <span class=\"n\">opname</span> <span class=\"ow\">in</span> <span class=\"n\">opnames2</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">const</span> <span class=\"ow\">in</span> <span class=\"n\">find_constant</span><span class=\"p\">(</span><span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">constvar</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">opname</span><span class=\"si\">}</span><span class=\"s2\">(x, x) -&gt; </span><span class=\"si\">{</span><span class=\"n\">const</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># try to find constants for op(x, c) == x and op(c, x) == x</span>\n<span class=\"k\">for</span> <span class=\"n\">opname</span> <span class=\"ow\">in</span> <span class=\"n\">opnames2</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">,</span> <span class=\"n\">constvar</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">const</span> <span class=\"ow\">in</span> <span class=\"n\">find_constant</span><span class=\"p\">(</span><span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">xvar</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">opname</span><span class=\"si\">}</span><span class=\"s2\">(x, </span><span class=\"si\">{</span><span class=\"n\">const</span><span class=\"si\">}</span><span class=\"s2\">) -&gt; x\"</span><span class=\"p\">)</span>\n    <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">constvar</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">const</span> <span class=\"ow\">in</span> <span class=\"n\">find_constant</span><span class=\"p\">(</span><span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">xvar</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">opname</span><span class=\"si\">}</span><span class=\"s2\">(</span><span class=\"si\">{</span><span class=\"n\">const</span><span class=\"si\">}</span><span class=\"s2\">, x) -&gt; x\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># this code is not quite correct, we'll correct it later</span>\n</pre></div>\n\n<p>Together this yields the following new simplifications:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"cp\"># careful, these are not all correct!</span>\n<span class=\"n\">int_sub</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_xor</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_eq</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">int_ne</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_lt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_le</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">int_gt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_ge</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">uint_lt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_le</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">uint_gt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_ge</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">uint_rshift</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_pymod</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_add</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_sub</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_mul</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_mul</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_or</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_or</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_xor</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_xor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_lshift</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_rshift</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">uint_rshift</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_pydiv</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_pymod</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n</pre></div>\n\n<p>Most of these look good at first glance, but the last one reveals a problem:\nwe've been ignoring the <code>valid_if</code> expression up to now. We can stop doing that by\nchanging the code like this, which adds <code>z3.And(valid_if, ...)</code> to the argument of\nthe calls to <code>find_constant</code>:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"c1\"># try to find constants for op(x, x) == c, op(x, c) == x and op(c, x) == x</span>\n<span class=\"k\">for</span> <span class=\"n\">opname</span> <span class=\"ow\">in</span> <span class=\"n\">opnames2</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">const</span> <span class=\"ow\">in</span> <span class=\"n\">find_constant</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">valid_if</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">constvar</span><span class=\"p\">)):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">opname</span><span class=\"si\">}</span><span class=\"s2\">(x, x) -&gt; </span><span class=\"si\">{</span><span class=\"n\">const</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># try to find constants for op(x, c) == x and op(c, x) == x</span>\n<span class=\"k\">for</span> <span class=\"n\">opname</span> <span class=\"ow\">in</span> <span class=\"n\">opnames2</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">,</span> <span class=\"n\">constvar</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">const</span> <span class=\"ow\">in</span> <span class=\"n\">find_constant</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">xvar</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span><span class=\"p\">)):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">opname</span><span class=\"si\">}</span><span class=\"s2\">(x, </span><span class=\"si\">{</span><span class=\"n\">const</span><span class=\"si\">}</span><span class=\"s2\">) -&gt; x\"</span><span class=\"p\">)</span>\n    <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">constvar</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">const</span> <span class=\"ow\">in</span> <span class=\"n\">find_constant</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">xvar</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span><span class=\"p\">)):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">opname</span><span class=\"si\">}</span><span class=\"s2\">(</span><span class=\"si\">{</span><span class=\"n\">const</span><span class=\"si\">}</span><span class=\"s2\">, x) -&gt; x\"</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>And we get this list instead:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">int_sub</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_xor</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_eq</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">int_ne</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_lt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_le</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">int_gt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_ge</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">uint_lt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_le</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">uint_gt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_ge</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">int_add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_add</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_sub</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_mul</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_mul</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_or</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_or</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_xor</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_xor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_lshift</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_rshift</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">uint_rshift</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_pydiv</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n</pre></div>\n\n<h3 id=\"synthesizing-two-constants\">Synthesizing two constants</h3>\n<p>For the patterns <code>op(x, c1) == c2</code> and <code>op(c1, x) == c2</code> we need to synthesize\ntwo constants. We can again write a helper method for that:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">find_2consts</span><span class=\"p\">(</span><span class=\"n\">z3expr</span><span class=\"p\">,</span> <span class=\"n\">number_of_results</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n    <span class=\"n\">condition</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">ForAll</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"n\">xvar</span><span class=\"p\">],</span>\n        <span class=\"n\">z3expr</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">number_of_results</span><span class=\"p\">):</span>\n        <span class=\"n\">checkres</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">condition</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">checkres</span> <span class=\"o\">==</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">sat</span><span class=\"p\">:</span>\n            <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">()</span>\n            <span class=\"n\">const</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">[</span><span class=\"n\">constvar</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">as_signed_long</span><span class=\"p\">()</span>\n            <span class=\"n\">const2</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">[</span><span class=\"n\">constvar2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">as_signed_long</span><span class=\"p\">()</span>\n            <span class=\"k\">yield</span> <span class=\"n\">const</span><span class=\"p\">,</span> <span class=\"n\">const2</span>\n            <span class=\"n\">condition</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Or</span><span class=\"p\">(</span><span class=\"n\">constvar</span> <span class=\"o\">!=</span> <span class=\"n\">const</span><span class=\"p\">,</span> <span class=\"n\">constvar2</span> <span class=\"o\">!=</span> <span class=\"n\">const2</span><span class=\"p\">),</span> <span class=\"n\">condition</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n</pre></div>\n\n<p>And then use it like this:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">for</span> <span class=\"n\">opname</span> <span class=\"ow\">in</span> <span class=\"n\">opnames2</span><span class=\"p\">:</span>\n    <span class=\"c1\"># try to find constants c1, c2 such that op(c1, x) -&gt; c2</span>\n    <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">constvar</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">)</span>\n    <span class=\"n\">consts</span> <span class=\"o\">=</span> <span class=\"n\">find_2consts</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">valid_if</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">constvar2</span><span class=\"p\">))</span>\n    <span class=\"k\">for</span> <span class=\"n\">const</span><span class=\"p\">,</span> <span class=\"n\">const2</span> <span class=\"ow\">in</span> <span class=\"n\">consts</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">opname</span><span class=\"si\">}</span><span class=\"s2\">(</span><span class=\"si\">{</span><span class=\"n\">const</span><span class=\"si\">}</span><span class=\"s2\">, x) -&gt; </span><span class=\"si\">{</span><span class=\"n\">const2</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># try to find constants c1, c2 such that op(x, c1) -&gt; c2</span>\n    <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">,</span> <span class=\"n\">constvar</span><span class=\"p\">)</span>\n    <span class=\"n\">consts</span> <span class=\"o\">=</span> <span class=\"n\">find_2consts</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">valid_if</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">constvar2</span><span class=\"p\">))</span>\n    <span class=\"k\">for</span> <span class=\"n\">const</span><span class=\"p\">,</span> <span class=\"n\">const2</span> <span class=\"ow\">in</span> <span class=\"n\">consts</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"s2\">(x, </span><span class=\"si\">%s</span><span class=\"s2\">) -&gt; </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"p\">,</span> <span class=\"n\">const2</span><span class=\"p\">))</span>\n</pre></div>\n\n<p>Which yields some straightforward simplifications:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">int_mul</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_mul</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_lt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_le</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">uint_gt</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_ge</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">int_lshift</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_rshift</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_rshift</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_mul_high</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_mul_high</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_mul_high</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_mul_high</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_pymod</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_pymod</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</pre></div>\n\n<p>A few require a bit more thinking:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">int_or</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"n\">int_or</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n</pre></div>\n\n<p>The are true because in two's complement, <code>-1</code> has all bits set.</p>\n<p>The following ones require recognizing that <code>-9223372036854775808 == -2**63</code> is\nthe most negative signed 64-bit integer, and <code>9223372036854775807 == 2 ** 63 -\n1</code> is the most positive one:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">int_lt</span><span class=\"p\">(</span><span class=\"mi\">9223372036854775807</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_lt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">9223372036854775808</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_le</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">9223372036854775808</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">int_le</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9223372036854775807</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">int_gt</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">9223372036854775808</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_gt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9223372036854775807</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_ge</span><span class=\"p\">(</span><span class=\"mi\">9223372036854775807</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">int_ge</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">9223372036854775808</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</pre></div>\n\n<p>The following ones are true because the bitpattern for <code>-1</code> is the largest\nunsigned number:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">uint_lt</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_le</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">uint_gt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_ge</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</pre></div>\n\n<h3 id=\"strength-reductions\">Strength Reductions</h3>\n<p>All the patterns so far only had a variable or a constant on the target of the\nrewrite. We can also use the machinery to do strengh-reductions where we\ngenerate a single-argument operation <code>op1(x)</code> for input operations <code>op(x, c1)</code>\nor <code>op(c1, x)</code>. To achieve this, we try all combinations of binary and unary\noperations. (We won't consider strength reductions where a binary operation\ngets turned into a \"cheaper\" other binary operation here.)</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">opnames1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"s2\">\"int_is_true\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_is_zero\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_neg\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_invert\"</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">opname</span> <span class=\"ow\">in</span> <span class=\"n\">opnames2</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">opname1</span> <span class=\"ow\">in</span> <span class=\"n\">opnames1</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">,</span> <span class=\"n\">constvar</span><span class=\"p\">)</span>\n        <span class=\"c1\"># try to find a constant op(x, c) == g(x)</span>\n        <span class=\"n\">result1</span><span class=\"p\">,</span> <span class=\"n\">valid_if1</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname1</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">)</span>\n        <span class=\"n\">consts</span> <span class=\"o\">=</span> <span class=\"n\">find_constant</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">valid_if</span><span class=\"p\">,</span> <span class=\"n\">valid_if1</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">result1</span><span class=\"p\">))</span>\n        <span class=\"k\">for</span> <span class=\"n\">const</span> <span class=\"ow\">in</span> <span class=\"n\">consts</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">opname</span><span class=\"si\">}</span><span class=\"s2\">(x, </span><span class=\"si\">{</span><span class=\"n\">const</span><span class=\"si\">}</span><span class=\"s2\">) -&gt; </span><span class=\"si\">{</span><span class=\"n\">opname1</span><span class=\"si\">}</span><span class=\"s2\">(x)\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># try to find a constant op(c, x) == g(x)</span>\n        <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">constvar</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">)</span>\n        <span class=\"n\">result1</span><span class=\"p\">,</span> <span class=\"n\">valid_if1</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname1</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">)</span>\n        <span class=\"n\">consts</span> <span class=\"o\">=</span> <span class=\"n\">find_constant</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">valid_if</span><span class=\"p\">,</span> <span class=\"n\">valid_if1</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">result1</span><span class=\"p\">))</span>\n        <span class=\"k\">for</span> <span class=\"n\">const</span> <span class=\"ow\">in</span> <span class=\"n\">consts</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">opname</span><span class=\"si\">}</span><span class=\"s2\">(</span><span class=\"si\">{</span><span class=\"n\">const</span><span class=\"si\">}</span><span class=\"s2\">, x) -&gt; </span><span class=\"si\">{</span><span class=\"n\">opname1</span><span class=\"si\">}</span><span class=\"s2\">(x)\"</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Which yields the following new simplifications:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">int_sub</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_neg</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">int_sub</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_invert</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">int_mul</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_neg</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">int_mul</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_neg</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">int_xor</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_invert</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">int_xor</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_invert</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">int_eq</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_zero</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">int_eq</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_zero</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">int_ne</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_true</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">int_ne</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_true</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">uint_lt</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_true</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">uint_lt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_zero</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">uint_le</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_true</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">uint_le</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_zero</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">uint_gt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_true</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">uint_gt</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_zero</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">uint_ge</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_true</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">uint_ge</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_zero</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">int_pydiv</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_neg</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</pre></div>\n\n<h3 id=\"conclusions\">Conclusions</h3>\n<p>With not very little code we managed to generate a whole lot of local\nsimplifications for integer operations in the IR of PyPy's JIT. The rules\ndiscovered that way are \"simple\", in the sense that they only require looking\nat a single instruction, and not where the arguments of that instruction came\nfrom. They also don't require any knowledge about the properties of the\narguments of the instructions (e.g. that they are positive).</p>\n<p>The rewrites in this post have mostly been in PyPy's JIT already. But now we\nmechanically confirmed that they are correct. I've also added the remaining\nuseful looking ones, in particular <code>int_eq(x, 0) -&gt; int_is_zero(x)</code> etc.</p>\n<p>If we wanted to scale this approach up, we would have to work much harder!\nThere are a bunch of problems that come with generalizing the approach to\nlooking at sequences of instructions:</p>\n<ul>\n<li>\n<p>Combinatorial explosion: if we look at sequences of instructions, we very\n  quickly get a combinatorial explosion and it becomes untractable to try all\n  combinations.</p>\n</li>\n<li>\n<p>Finding non-minimal patterns: Some complicated simplifications can be\n  instances of simpler ones. For example, because <code>int_add(x, 0) -&gt; x</code>, it's\n  also true that <code>int_add(int_sub(x, y), 0) -&gt; int_sub(x, y)</code>. If we simply\n  generate all possible sequences, we will find the latter simplification rule,\n  which we would usually not care about.</p>\n</li>\n<li>\n<p>Unclear usefulness: if we simply generate all rewrites up to a certain number\n  of instructions, we will get a lot of patterns that are useless in the sense\n  that they typically aren't found in realistic programs. It would be much\n  better to somehow focus on the patterns that real benchmarks are using.</p>\n</li>\n</ul>\n<p>In the <a href=\"https://www.pypy.org/posts/2024/07/mining-jit-traces-missing-optimizations-z3.html\">next blog post</a> I'll discuss an alternative approach to simply generating\nall possible sequences of instructions, that tries to address these problems.\nThis works by analyzing the real traces of benchmarks and mining those for\ninefficiencies, which only shows problems that occur in actual programs.</p>\n<h3 id=\"sources\">Sources</h3>\n<p>I've been re-reading a lot of blog posts from John's blog:</p>\n<ul>\n<li><a href=\"https://blog.regehr.org/archives/1109\">Let’s Work on an LLVM Superoptimizer</a></li>\n<li><a href=\"https://blog.regehr.org/archives/1146\">Early Superoptimizer Results</a></li>\n<li><a href=\"https://blog.regehr.org/archives/1252\">A Few Synthesizing Superoptimizer Results</a></li>\n<li><a href=\"https://blog.regehr.org/archives/1636\">Synthesizing Constants</a></li>\n</ul>\n<p>but also papers:</p>\n<ul>\n<li><a href=\"https://arxiv.org/pdf/1711.04422\">A Synthesizing Superoptimizer</a></li>\n<li><a href=\"https://dl.acm.org/doi/pdf/10.1145/3649837\">Hydra: Generalizing Peephole Optimizations with Program Synthesis</a></li>\n</ul>\n<p>Another of my favorite blogs has been <a href=\"https://www.philipzucker.com/\">Philipp Zucker's\nblog</a> in the last year or two, lots of excellent\nposts about/using Z3 on there.</p>"
        }
      ],
      "description": "<p>In June I was at the <a href=\"https://pldi24.sigplan.org/\">PLDI conference</a> in\nCopenhagen to present a <a href=\"https://dl.acm.org/doi/10.1145/3652588.3663316\">paper</a>\nI co-authored with <a href=\"https://bernsteinbear.com/\">Max Bernstein</a>. I also finally\nmet <a href=\"https://blog.regehr.org/\">John Regehr</a>, who I'd been talking on social\nmedia for ages but had never met. John has been working on compiler correctness\nand better techniques for building compilers and optimizers since a very long\ntime. The blog post <a href=\"https://www.pypy.org/posts/2022/12/jit-bug-finding-smt-fuzzing.html\">Finding JIT Optimizer Bugs using SMT Solvers and\nFuzzing</a>\nwas heavily inspired by this work. We talked a lot about his and his groups\nwork on using Z3 for\n<a href=\"https://en.wikipedia.org/wiki/Superoptimization\">superoptimization</a> and for\nfinding missing optimizations. I have applied some of the things John told me\nabout to the traces of PyPy's JIT, and wanted to blog about that. However, my\ndraft felt quite hard to understand. Therefore I have now written this current\npost, to at least try to provide a somewhat gentler on-ramp to the topic.</p>\n<p>In <em>this</em> post we will use the Python-API to Z3 to find local peephole rewrite\nrules for the operations in the intermediate representation of PyPy's tracing\nJIT. The code for this is simple enough that we can go through all of it.</p>\n<p>The PyPy JIT produces traces of machine level instructions, which are optimized\nand then turned into machine code. The optimizer uses a number of approaches to\nmake the traces more efficient. For integer operations it applies a number of\narithmetic simplification rules rules, for example <code>int_add(x, 0) -&gt; x</code>. When\nimplementing these rules in the JIT there are <strong>two problems</strong>: How do we know\nthat the rules are correct? And how do we know that we haven't forgotten any\nrules? We'll try to answer both of these, but the first one in particular.</p>\n<p>We'll be using Z3, a satisfiability module theories (SMT) solver which has good\nbitvector support and most importantly an excellent Python API. We can use the\nsolver to reason about bitvectors, which are how we will model machine\nintegers.</p>\n<p>To find rewrite rules, we will consider the binary operations (i.e. those\ntaking two arguments) in PyPy traces that take and produce integers. The\ncompletely general form <code>op(x, y)</code> is not simplifiable on its own. But if\neither <code>x == y</code>\nor if one of the arguments is a constant, we can potentially simplify the\noperation into a simpler form. The results are either the variable <code>x</code>, or a\n(potentially different) constant. We'll ignore constant-folding where both\narguments of the binary operation are constants. The possible results for a\nsimplifiable binary operation are the variable <code>x</code> or another constant. This\nleaves the following patterns as possibilities:</p>\n<ul>\n<li><code>op(x, x) == x</code></li>\n<li><code>op(x, x) == c1</code></li>\n<li><code>op(x, c1) == x</code></li>\n<li><code>op(c1, x) == x</code></li>\n<li><code>op(x, c1) == c2</code></li>\n<li><code>op(c1, x) == c2</code></li>\n</ul>\n<p>Our approach will be to take every single supported binary integer operation,\ninstantiate all of these patterns, and try to ask Z3 whether the resulting\nsimplification is valid for all values of <code>x</code>.</p>\n<h3 id=\"quick-intro-to-the-z3-python-api\">Quick intro to the Z3 Python-API</h3>\n<p>Here's a terminal session showing the use of the Z3 Python API:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"go\">&gt;&gt;&gt;&gt; import z3</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; # construct a Z3 bitvector variable of width 8, with name x:</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; x = z3.BitVec('x', 8)</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; # construct a more complicated formula by using operator overloading:</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; x + x</span>\n<span class=\"go\">x + x</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; x + 1</span>\n<span class=\"go\">x + 1</span>\n</pre></div>\n\n<p>Z3 checks the \"satisfiability\" of a formula. This means that it tries to find\nan example set of concrete values for the variables that occur in a formula,\nsuch that the formula becomes true. Examples:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"go\">&gt;&gt;&gt;&gt; solver = z3.Solver()</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; solver.check(x * x == 3)</span>\n<span class=\"go\">unsat</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; # meaning no x fulfils this property</span>\n<span class=\"go\">&gt;&gt;&gt;&gt;</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; solver.check(x * x == 9)</span>\n<span class=\"go\">sat</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; model = solver.model()</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; model</span>\n<span class=\"go\">[x = 253]</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; model[x].as_signed_long()</span>\n<span class=\"go\">-3</span>\n<span class=\"go\">&gt;&gt;&gt;&gt; # 253 is the same as -3 in two's complement arithmetic with 8 bits</span>\n</pre></div>\n\n<p>In order to use Z3 to prove something, we can ask Z3 to find counterexamples\nfor the statement, meaning concrete values that would make the negation of the\nstatement true:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"go\">&gt;&gt;&gt;&gt; solver.check(z3.Not(x ^ -1 == ~x))</span>\n<span class=\"go\">unsat</span>\n</pre></div>\n\n<p>The result <code>unsat</code> means that we just proved that <code>x ^ -1 == ~x</code> is true for\nall <code>x</code>, because there is no value for <code>x</code> that makes <code>not (x ^ -1 == ~x)</code>\ntrue (this works because -1 has all the bits set).</p>\n<p>If we try to prove something incorrect in this way, the following happens:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"go\">&gt;&gt;&gt;&gt; solver.check(z3.Not(x ^ -1 == x))</span>\n<span class=\"go\">sat</span>\n</pre></div>\n\n<p><code>sat</code> shows that <code>x ^ -1 == x</code> is (unsurprisingly) not always true, and we can\nask for a counterexample:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"go\">&gt;&gt;&gt;&gt; solver.model()</span>\n<span class=\"go\">[x = 0]</span>\n</pre></div>\n\n<p>This way of proving this works because the <code>check</code> calls try to solve an\n(implicit) \"exists\" quantifier, over all the Z3 variables used in the formula.\n<code>check</code> will either return <code>z3.unsat</code>, which means that no concrete values make\nthe formula true; or <code>z3.sat</code>, which means that you can get some concrete\nvalues that make the formula true by calling <code>solver.model()</code>.</p>\n<p>In math terms we prove things using <code>check</code> by de-Morgan's rules for quantifiers:</p>\n<p>$$ \\lnot \\exists x: \\lnot f(x) \\implies \\forall x: f(x) $$</p>\n<p>Now that we've seen the basics of using the Z3 API on a few small examples,\nwe'll use it in a bigger program.</p>\n<h3 id=\"encoding-the-integer-operations-of-rpythons-jit-into-z3-formulas\">Encoding the integer operations of RPython's JIT into Z3 formulas</h3>\n<p>Now we'll use the API to reason about the integer operations of the PyPy JIT\nintermediate representation (IR). The binary integer operations are:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">opnames2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"s2\">\"int_add\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_sub\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_mul\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_and\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_or\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_xor\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_eq\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_ne\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_lt\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_le\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_gt\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_ge\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"uint_lt\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"uint_le\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"uint_gt\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"uint_ge\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_lshift\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_rshift\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"uint_rshift\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"uint_mul_high\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_pydiv\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_pymod\"</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre></div>\n\n<p>There's not much special about the integer operations. Like in LLVM, most of\nthem are signedness-independent: <code>int_add</code>, <code>int_sub</code>, <code>int_mul</code>, ... work\ncorrectly for unsigned integers but also for\n<a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\">two's-complement</a> signed\nintegers. Exceptions for that are order comparisons like <code>int_lt</code> etc. for\nwhich we have unsigned variants <code>uint_lt</code> etc. All operations that produce a\nboolean result return a full-width integer <code>0</code> or <code>1</code> (the PyPy JIT supports\nonly word-sized integers in its intermediate representation)</p>\n<p>In order to reason about the IR operations, some ground work:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"kn\">import</span> <span class=\"nn\">z3</span>\n\n<span class=\"n\">INTEGER_WIDTH</span> <span class=\"o\">=</span> <span class=\"mi\">64</span>\n<span class=\"n\">solver</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Solver</span><span class=\"p\">()</span>\n<span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s2\">\"timeout\"</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">)</span> <span class=\"c1\"># milliseconds, ie 10s</span>\n<span class=\"n\">xvar</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n<span class=\"n\">constvar</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s1\">'const'</span><span class=\"p\">,</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n<span class=\"n\">constvar2</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVec</span><span class=\"p\">(</span><span class=\"s1\">'const2'</span><span class=\"p\">,</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n<span class=\"n\">TRUEBV</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVecVal</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n<span class=\"n\">FALSEBV</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">BitVecVal</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>And here's the a function to turn an integer IR operation of PyPy's JIT into Z3\nformulas:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\" computes a tuple of (result, valid_if) of Z3 formulas. `result` is the</span>\n<span class=\"sd\">    formula representing the result of the operation, given argument formulas</span>\n<span class=\"sd\">    arg0 and arg1. `valid_if` is a pre-condition that must be true for the</span>\n<span class=\"sd\">    result to be meaningful. \"\"\"</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"kc\">True</span> <span class=\"c1\"># the precondition is mostly True, with few exceptions</span>\n    <span class=\"k\">if</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_add\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">arg0</span> <span class=\"o\">+</span> <span class=\"n\">arg1</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_sub\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">arg0</span> <span class=\"o\">-</span> <span class=\"n\">arg1</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_mul\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">arg0</span> <span class=\"o\">*</span> <span class=\"n\">arg1</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_and\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">arg0</span> <span class=\"o\">&amp;</span> <span class=\"n\">arg1</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_or\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">arg0</span> <span class=\"o\">|</span> <span class=\"n\">arg1</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_xor\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">arg0</span> <span class=\"o\">^</span> <span class=\"n\">arg1</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_eq\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">arg0</span> <span class=\"o\">==</span> <span class=\"n\">arg1</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_ne\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">arg0</span> <span class=\"o\">!=</span> <span class=\"n\">arg1</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_lt\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">arg0</span> <span class=\"o\">&lt;</span> <span class=\"n\">arg1</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_le\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">arg0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">arg1</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_gt\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">arg0</span> <span class=\"o\">&gt;</span> <span class=\"n\">arg1</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_ge\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">arg0</span> <span class=\"o\">&gt;=</span> <span class=\"n\">arg1</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"uint_lt\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">ULT</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">))</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"uint_le\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">ULE</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">))</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"uint_gt\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">UGT</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">))</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"uint_ge\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">UGE</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">))</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_lshift\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">arg0</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">arg1</span>\n        <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">arg1</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span> <span class=\"o\">&lt;</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_rshift\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">arg0</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">arg1</span>\n        <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">arg1</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span> <span class=\"o\">&lt;</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"uint_rshift\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">LShR</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">)</span>\n        <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">arg1</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span> <span class=\"o\">&lt;</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"uint_mul_high\"</span><span class=\"p\">:</span>\n        <span class=\"c1\"># zero-extend args to 2*INTEGER_WIDTH bit, then multiply and extract</span>\n        <span class=\"c1\"># highest INTEGER_WIDTH bits</span>\n        <span class=\"n\">zarg0</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">ZeroExt</span><span class=\"p\">(</span><span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">,</span> <span class=\"n\">arg0</span><span class=\"p\">)</span>\n        <span class=\"n\">zarg1</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">ZeroExt</span><span class=\"p\">(</span><span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Extract</span><span class=\"p\">(</span><span class=\"n\">INTEGER_WIDTH</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">INTEGER_WIDTH</span><span class=\"p\">,</span> <span class=\"n\">zarg0</span> <span class=\"o\">*</span> <span class=\"n\">zarg1</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_pydiv\"</span><span class=\"p\">:</span>\n        <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">arg1</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">arg0</span> <span class=\"o\">/</span> <span class=\"n\">arg1</span>\n        <span class=\"n\">psubx</span> <span class=\"o\">=</span> <span class=\"n\">r</span> <span class=\"o\">*</span> <span class=\"n\">arg1</span> <span class=\"o\">-</span> <span class=\"n\">arg0</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">If</span><span class=\"p\">(</span><span class=\"n\">arg1</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">psubx</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">psubx</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">INTEGER_WIDTH</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_pymod\"</span><span class=\"p\">:</span>\n        <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">arg1</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">arg0</span> <span class=\"o\">%</span> <span class=\"n\">arg1</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">arg1</span> <span class=\"o\">&amp;</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">If</span><span class=\"p\">(</span><span class=\"n\">arg1</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">INTEGER_WIDTH</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_is_true\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">arg0</span> <span class=\"o\">!=</span> <span class=\"n\">FALSEBV</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_is_zero\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cond</span><span class=\"p\">(</span><span class=\"n\">arg0</span> <span class=\"o\">==</span> <span class=\"n\">FALSEBV</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_neg\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">arg0</span>\n    <span class=\"k\">elif</span> <span class=\"n\">opname</span> <span class=\"o\">==</span> <span class=\"s2\">\"int_invert\"</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"o\">~</span><span class=\"n\">arg0</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"unknown operation \"</span> <span class=\"o\">+</span> <span class=\"n\">opname</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">cond</span><span class=\"p\">(</span><span class=\"n\">z3expr</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\" helper function to turn a Z3 boolean result z3expr into a 1 or 0</span>\n<span class=\"sd\">    bitvector, using z3.If \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">If</span><span class=\"p\">(</span><span class=\"n\">z3expr</span><span class=\"p\">,</span> <span class=\"n\">TRUEBV</span><span class=\"p\">,</span> <span class=\"n\">FALSEBV</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>We map the semantics of a PyPy JIT operation to Z3 with the <code>z3_expression</code>\nfunction. It takes the name of a JIT operation and its two (or one) arguments\ninto a pair of Z3 formulas, <code>result</code> and <code>valid_if</code>. The resulting formulas are\nconstructed with the operator overloading of Z3 variables/formulas.</p>\n<p>The first element <code>result</code> of the result of <code>z3_expression</code> represents the result\nof performing the operation. <code>valid_if</code> is a bool that represents a condition that\nneeds to be <code>True</code> in order for the result of the operation to be defined. E.g.\n<code>int_pydiv(a, b)</code> is only valid if <code>b != 0</code>. Most operations are always valid,\nso they return <code>True</code> as that condition (we'll ignore <code>valid_if</code> for a bit, but it\nwill become more relevant further down in the post).</p>\n<p>We can define a helper function to prove things by finding counterexamples:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">prove</span><span class=\"p\">(</span><span class=\"n\">cond</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\" Try to prove a condition cond by searching for counterexamples of its negation. \"\"\"</span>\n    <span class=\"n\">z3res</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Not</span><span class=\"p\">(</span><span class=\"n\">cond</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"n\">z3res</span> <span class=\"o\">==</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">unsat</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n    <span class=\"k\">elif</span> <span class=\"n\">z3res</span> <span class=\"o\">==</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">unknown</span><span class=\"p\">:</span> <span class=\"c1\"># eg on timeout</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"k\">elif</span> <span class=\"n\">z3res</span> <span class=\"o\">==</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">sat</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"k\">assert</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"should be unreachable\"</span>\n</pre></div>\n\n<h3 id=\"finding-rewrite-rules\">Finding rewrite rules</h3>\n<p>Now we can start finding our first rewrite rules, following the first pattern\n<code>op(x, x) -&gt; x</code>. We do this by iterating over all the supported binary\noperation names, getting the z3 expression for <code>op(x, x)</code> and then asking Z3 to\nprove <code>op(x, x) == x</code>.</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">for</span> <span class=\"n\">opname</span> <span class=\"ow\">in</span> <span class=\"n\">opnames2</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">prove</span><span class=\"p\">(</span><span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">xvar</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">opname</span><span class=\"si\">}</span><span class=\"s2\">(x, x) -&gt; x, </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>This yields the simplifications:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_or</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n</pre></div>\n\n<h3 id=\"synthesizing-constants\">Synthesizing constants</h3>\n<p>Supporting the next patterns is harder: <code>op(x, x) == c1</code>, <code>op(x, c1) == x</code>, and\n<code>op(c1, x) == x</code>. We don't know which constants to pick to try to get Z3 to\nprove the equality. We could iterate over common constants like <code>0</code>, <code>1</code>,\n<code>MAXINT</code>, etc, or even over all the 256 values for a bitvector of length 8.\nHowever, we will instead ask Z3 to find the constants for us too.</p>\n<p>This can be done by using quantifiers, in this case <code>z3.ForAll</code>. The query we\npose to Z3 is \"does there exist a constant <code>c1</code> such that for all <code>x</code> the\nfollowing is true: <code>op(x, c1) == x</code>? Note that the constant <code>c1</code> is not\nnecessarily unique, there could be many of them. We generate several matching\nconstant, and add that they must be different to the condition of the second\nand further queries.</p>\n<p>We can express this in a helper function:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">find_constant</span><span class=\"p\">(</span><span class=\"n\">z3expr</span><span class=\"p\">,</span> <span class=\"n\">number_of_results</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n    <span class=\"n\">condition</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">ForAll</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"n\">xvar</span><span class=\"p\">],</span>\n        <span class=\"n\">z3expr</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">number_of_results</span><span class=\"p\">):</span>\n        <span class=\"n\">checkres</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">condition</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">checkres</span> <span class=\"o\">==</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">sat</span><span class=\"p\">:</span>\n            <span class=\"c1\"># if a solver check succeeds, we can ask for a model, which is</span>\n            <span class=\"c1\"># concrete values for the variables constvar</span>\n            <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">()</span>\n            <span class=\"n\">const</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">[</span><span class=\"n\">constvar</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">as_signed_long</span><span class=\"p\">()</span>\n            <span class=\"k\">yield</span> <span class=\"n\">const</span>\n            <span class=\"c1\"># make sure we don't generate the same constant again on the</span>\n            <span class=\"c1\"># next call</span>\n            <span class=\"n\">condition</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">constvar</span> <span class=\"o\">!=</span> <span class=\"n\">const</span><span class=\"p\">,</span> <span class=\"n\">condition</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># no (more) constants found</span>\n            <span class=\"k\">break</span>\n</pre></div>\n\n<p>We can use this new function for the three mentioned patterns:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"c1\"># try to find constants for op(x, x) == c</span>\n<span class=\"k\">for</span> <span class=\"n\">opname</span> <span class=\"ow\">in</span> <span class=\"n\">opnames2</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">const</span> <span class=\"ow\">in</span> <span class=\"n\">find_constant</span><span class=\"p\">(</span><span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">constvar</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">opname</span><span class=\"si\">}</span><span class=\"s2\">(x, x) -&gt; </span><span class=\"si\">{</span><span class=\"n\">const</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># try to find constants for op(x, c) == x and op(c, x) == x</span>\n<span class=\"k\">for</span> <span class=\"n\">opname</span> <span class=\"ow\">in</span> <span class=\"n\">opnames2</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">,</span> <span class=\"n\">constvar</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">const</span> <span class=\"ow\">in</span> <span class=\"n\">find_constant</span><span class=\"p\">(</span><span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">xvar</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">opname</span><span class=\"si\">}</span><span class=\"s2\">(x, </span><span class=\"si\">{</span><span class=\"n\">const</span><span class=\"si\">}</span><span class=\"s2\">) -&gt; x\"</span><span class=\"p\">)</span>\n    <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">constvar</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">const</span> <span class=\"ow\">in</span> <span class=\"n\">find_constant</span><span class=\"p\">(</span><span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">xvar</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">opname</span><span class=\"si\">}</span><span class=\"s2\">(</span><span class=\"si\">{</span><span class=\"n\">const</span><span class=\"si\">}</span><span class=\"s2\">, x) -&gt; x\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># this code is not quite correct, we'll correct it later</span>\n</pre></div>\n\n<p>Together this yields the following new simplifications:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"cp\"># careful, these are not all correct!</span>\n<span class=\"n\">int_sub</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_xor</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_eq</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">int_ne</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_lt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_le</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">int_gt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_ge</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">uint_lt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_le</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">uint_gt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_ge</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">uint_rshift</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_pymod</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_add</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_sub</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_mul</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_mul</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_or</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_or</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_xor</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_xor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_lshift</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_rshift</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">uint_rshift</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_pydiv</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_pymod</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n</pre></div>\n\n<p>Most of these look good at first glance, but the last one reveals a problem:\nwe've been ignoring the <code>valid_if</code> expression up to now. We can stop doing that by\nchanging the code like this, which adds <code>z3.And(valid_if, ...)</code> to the argument of\nthe calls to <code>find_constant</code>:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"c1\"># try to find constants for op(x, x) == c, op(x, c) == x and op(c, x) == x</span>\n<span class=\"k\">for</span> <span class=\"n\">opname</span> <span class=\"ow\">in</span> <span class=\"n\">opnames2</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">const</span> <span class=\"ow\">in</span> <span class=\"n\">find_constant</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">valid_if</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">constvar</span><span class=\"p\">)):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">opname</span><span class=\"si\">}</span><span class=\"s2\">(x, x) -&gt; </span><span class=\"si\">{</span><span class=\"n\">const</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># try to find constants for op(x, c) == x and op(c, x) == x</span>\n<span class=\"k\">for</span> <span class=\"n\">opname</span> <span class=\"ow\">in</span> <span class=\"n\">opnames2</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">,</span> <span class=\"n\">constvar</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">const</span> <span class=\"ow\">in</span> <span class=\"n\">find_constant</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">xvar</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span><span class=\"p\">)):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">opname</span><span class=\"si\">}</span><span class=\"s2\">(x, </span><span class=\"si\">{</span><span class=\"n\">const</span><span class=\"si\">}</span><span class=\"s2\">) -&gt; x\"</span><span class=\"p\">)</span>\n    <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">constvar</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">const</span> <span class=\"ow\">in</span> <span class=\"n\">find_constant</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">xvar</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span><span class=\"p\">)):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">opname</span><span class=\"si\">}</span><span class=\"s2\">(</span><span class=\"si\">{</span><span class=\"n\">const</span><span class=\"si\">}</span><span class=\"s2\">, x) -&gt; x\"</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>And we get this list instead:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">int_sub</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_xor</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_eq</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">int_ne</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_lt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_le</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">int_gt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_ge</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">uint_lt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_le</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">uint_gt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_ge</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">int_add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_add</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_sub</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_mul</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_mul</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_or</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_or</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_xor</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_xor</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_lshift</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_rshift</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">uint_rshift</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"n\">int_pydiv</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">x</span>\n</pre></div>\n\n<h3 id=\"synthesizing-two-constants\">Synthesizing two constants</h3>\n<p>For the patterns <code>op(x, c1) == c2</code> and <code>op(c1, x) == c2</code> we need to synthesize\ntwo constants. We can again write a helper method for that:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">def</span> <span class=\"nf\">find_2consts</span><span class=\"p\">(</span><span class=\"n\">z3expr</span><span class=\"p\">,</span> <span class=\"n\">number_of_results</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n    <span class=\"n\">condition</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">ForAll</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"n\">xvar</span><span class=\"p\">],</span>\n        <span class=\"n\">z3expr</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">number_of_results</span><span class=\"p\">):</span>\n        <span class=\"n\">checkres</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">condition</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">checkres</span> <span class=\"o\">==</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">sat</span><span class=\"p\">:</span>\n            <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">()</span>\n            <span class=\"n\">const</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">[</span><span class=\"n\">constvar</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">as_signed_long</span><span class=\"p\">()</span>\n            <span class=\"n\">const2</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">[</span><span class=\"n\">constvar2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">as_signed_long</span><span class=\"p\">()</span>\n            <span class=\"k\">yield</span> <span class=\"n\">const</span><span class=\"p\">,</span> <span class=\"n\">const2</span>\n            <span class=\"n\">condition</span> <span class=\"o\">=</span> <span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">Or</span><span class=\"p\">(</span><span class=\"n\">constvar</span> <span class=\"o\">!=</span> <span class=\"n\">const</span><span class=\"p\">,</span> <span class=\"n\">constvar2</span> <span class=\"o\">!=</span> <span class=\"n\">const2</span><span class=\"p\">),</span> <span class=\"n\">condition</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n</pre></div>\n\n<p>And then use it like this:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"k\">for</span> <span class=\"n\">opname</span> <span class=\"ow\">in</span> <span class=\"n\">opnames2</span><span class=\"p\">:</span>\n    <span class=\"c1\"># try to find constants c1, c2 such that op(c1, x) -&gt; c2</span>\n    <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">constvar</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">)</span>\n    <span class=\"n\">consts</span> <span class=\"o\">=</span> <span class=\"n\">find_2consts</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">valid_if</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">constvar2</span><span class=\"p\">))</span>\n    <span class=\"k\">for</span> <span class=\"n\">const</span><span class=\"p\">,</span> <span class=\"n\">const2</span> <span class=\"ow\">in</span> <span class=\"n\">consts</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">opname</span><span class=\"si\">}</span><span class=\"s2\">(</span><span class=\"si\">{</span><span class=\"n\">const</span><span class=\"si\">}</span><span class=\"s2\">, x) -&gt; </span><span class=\"si\">{</span><span class=\"n\">const2</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># try to find constants c1, c2 such that op(x, c1) -&gt; c2</span>\n    <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">,</span> <span class=\"n\">constvar</span><span class=\"p\">)</span>\n    <span class=\"n\">consts</span> <span class=\"o\">=</span> <span class=\"n\">find_2consts</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">valid_if</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">constvar2</span><span class=\"p\">))</span>\n    <span class=\"k\">for</span> <span class=\"n\">const</span><span class=\"p\">,</span> <span class=\"n\">const2</span> <span class=\"ow\">in</span> <span class=\"n\">consts</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"s2\">(x, </span><span class=\"si\">%s</span><span class=\"s2\">) -&gt; </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">const</span><span class=\"p\">,</span> <span class=\"n\">const2</span><span class=\"p\">))</span>\n</pre></div>\n\n<p>Which yields some straightforward simplifications:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">int_mul</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_mul</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_and</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_lt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_le</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">uint_gt</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_ge</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">int_lshift</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_rshift</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_rshift</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_mul_high</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_mul_high</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_mul_high</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_mul_high</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_pymod</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_pymod</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</pre></div>\n\n<p>A few require a bit more thinking:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">int_or</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"n\">int_or</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n</pre></div>\n\n<p>The are true because in two's complement, <code>-1</code> has all bits set.</p>\n<p>The following ones require recognizing that <code>-9223372036854775808 == -2**63</code> is\nthe most negative signed 64-bit integer, and <code>9223372036854775807 == 2 ** 63 -\n1</code> is the most positive one:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">int_lt</span><span class=\"p\">(</span><span class=\"mi\">9223372036854775807</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_lt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">9223372036854775808</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_le</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">9223372036854775808</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">int_le</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9223372036854775807</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">int_gt</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">9223372036854775808</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_gt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">9223372036854775807</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">int_ge</span><span class=\"p\">(</span><span class=\"mi\">9223372036854775807</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">int_ge</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">9223372036854775808</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</pre></div>\n\n<p>The following ones are true because the bitpattern for <code>-1</code> is the largest\nunsigned number:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">uint_lt</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_le</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">uint_gt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">uint_ge</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</pre></div>\n\n<h3 id=\"strength-reductions\">Strength Reductions</h3>\n<p>All the patterns so far only had a variable or a constant on the target of the\nrewrite. We can also use the machinery to do strengh-reductions where we\ngenerate a single-argument operation <code>op1(x)</code> for input operations <code>op(x, c1)</code>\nor <code>op(c1, x)</code>. To achieve this, we try all combinations of binary and unary\noperations. (We won't consider strength reductions where a binary operation\ngets turned into a \"cheaper\" other binary operation here.)</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">opnames1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"s2\">\"int_is_true\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_is_zero\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_neg\"</span><span class=\"p\">,</span>\n<span class=\"s2\">\"int_invert\"</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">opname</span> <span class=\"ow\">in</span> <span class=\"n\">opnames2</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">opname1</span> <span class=\"ow\">in</span> <span class=\"n\">opnames1</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">,</span> <span class=\"n\">constvar</span><span class=\"p\">)</span>\n        <span class=\"c1\"># try to find a constant op(x, c) == g(x)</span>\n        <span class=\"n\">result1</span><span class=\"p\">,</span> <span class=\"n\">valid_if1</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname1</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">)</span>\n        <span class=\"n\">consts</span> <span class=\"o\">=</span> <span class=\"n\">find_constant</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">valid_if</span><span class=\"p\">,</span> <span class=\"n\">valid_if1</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">result1</span><span class=\"p\">))</span>\n        <span class=\"k\">for</span> <span class=\"n\">const</span> <span class=\"ow\">in</span> <span class=\"n\">consts</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">opname</span><span class=\"si\">}</span><span class=\"s2\">(x, </span><span class=\"si\">{</span><span class=\"n\">const</span><span class=\"si\">}</span><span class=\"s2\">) -&gt; </span><span class=\"si\">{</span><span class=\"n\">opname1</span><span class=\"si\">}</span><span class=\"s2\">(x)\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># try to find a constant op(c, x) == g(x)</span>\n        <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">valid_if</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname</span><span class=\"p\">,</span> <span class=\"n\">constvar</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">)</span>\n        <span class=\"n\">result1</span><span class=\"p\">,</span> <span class=\"n\">valid_if1</span> <span class=\"o\">=</span> <span class=\"n\">z3_expression</span><span class=\"p\">(</span><span class=\"n\">opname1</span><span class=\"p\">,</span> <span class=\"n\">xvar</span><span class=\"p\">)</span>\n        <span class=\"n\">consts</span> <span class=\"o\">=</span> <span class=\"n\">find_constant</span><span class=\"p\">(</span><span class=\"n\">z3</span><span class=\"o\">.</span><span class=\"n\">And</span><span class=\"p\">(</span><span class=\"n\">valid_if</span><span class=\"p\">,</span> <span class=\"n\">valid_if1</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">result1</span><span class=\"p\">))</span>\n        <span class=\"k\">for</span> <span class=\"n\">const</span> <span class=\"ow\">in</span> <span class=\"n\">consts</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">opname</span><span class=\"si\">}</span><span class=\"s2\">(</span><span class=\"si\">{</span><span class=\"n\">const</span><span class=\"si\">}</span><span class=\"s2\">, x) -&gt; </span><span class=\"si\">{</span><span class=\"n\">opname1</span><span class=\"si\">}</span><span class=\"s2\">(x)\"</span><span class=\"p\">)</span>\n</pre></div>\n\n<p>Which yields the following new simplifications:</p>\n<div class=\"code\"><pre class=\"code literal-block\"><span class=\"n\">int_sub</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_neg</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">int_sub</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_invert</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">int_mul</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_neg</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">int_mul</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_neg</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">int_xor</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_invert</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">int_xor</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_invert</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">int_eq</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_zero</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">int_eq</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_zero</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">int_ne</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_true</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">int_ne</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_true</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">uint_lt</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_true</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">uint_lt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_zero</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">uint_le</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_true</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">uint_le</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_zero</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">uint_gt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_true</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">uint_gt</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_zero</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">uint_ge</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_true</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">uint_ge</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_is_zero</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">int_pydiv</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">int_neg</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</pre></div>\n\n<h3 id=\"conclusions\">Conclusions</h3>\n<p>With not very little code we managed to generate a whole lot of local\nsimplifications for integer operations in the IR of PyPy's JIT. The rules\ndiscovered that way are \"simple\", in the sense that they only require looking\nat a single instruction, and not where the arguments of that instruction came\nfrom. They also don't require any knowledge about the properties of the\narguments of the instructions (e.g. that they are positive).</p>\n<p>The rewrites in this post have mostly been in PyPy's JIT already. But now we\nmechanically confirmed that they are correct. I've also added the remaining\nuseful looking ones, in particular <code>int_eq(x, 0) -&gt; int_is_zero(x)</code> etc.</p>\n<p>If we wanted to scale this approach up, we would have to work much harder!\nThere are a bunch of problems that come with generalizing the approach to\nlooking at sequences of instructions:</p>\n<ul>\n<li>\n<p>Combinatorial explosion: if we look at sequences of instructions, we very\n  quickly get a combinatorial explosion and it becomes untractable to try all\n  combinations.</p>\n</li>\n<li>\n<p>Finding non-minimal patterns: Some complicated simplifications can be\n  instances of simpler ones. For example, because <code>int_add(x, 0) -&gt; x</code>, it's\n  also true that <code>int_add(int_sub(x, y), 0) -&gt; int_sub(x, y)</code>. If we simply\n  generate all possible sequences, we will find the latter simplification rule,\n  which we would usually not care about.</p>\n</li>\n<li>\n<p>Unclear usefulness: if we simply generate all rewrites up to a certain number\n  of instructions, we will get a lot of patterns that are useless in the sense\n  that they typically aren't found in realistic programs. It would be much\n  better to somehow focus on the patterns that real benchmarks are using.</p>\n</li>\n</ul>\n<p>In the <a href=\"https://www.pypy.org/posts/2024/07/mining-jit-traces-missing-optimizations-z3.html\">next blog post</a> I'll discuss an alternative approach to simply generating\nall possible sequences of instructions, that tries to address these problems.\nThis works by analyzing the real traces of benchmarks and mining those for\ninefficiencies, which only shows problems that occur in actual programs.</p>\n<h3 id=\"sources\">Sources</h3>\n<p>I've been re-reading a lot of blog posts from John's blog:</p>\n<ul>\n<li><a href=\"https://blog.regehr.org/archives/1109\">Let’s Work on an LLVM Superoptimizer</a></li>\n<li><a href=\"https://blog.regehr.org/archives/1146\">Early Superoptimizer Results</a></li>\n<li><a href=\"https://blog.regehr.org/archives/1252\">A Few Synthesizing Superoptimizer Results</a></li>\n<li><a href=\"https://blog.regehr.org/archives/1636\">Synthesizing Constants</a></li>\n</ul>\n<p>but also papers:</p>\n<ul>\n<li><a href=\"https://arxiv.org/pdf/1711.04422\">A Synthesizing Superoptimizer</a></li>\n<li><a href=\"https://dl.acm.org/doi/pdf/10.1145/3649837\">Hydra: Generalizing Peephole Optimizations with Program Synthesis</a></li>\n</ul>\n<p>Another of my favorite blogs has been <a href=\"https://www.philipzucker.com/\">Philipp Zucker's\nblog</a> in the last year or two, lots of excellent\nposts about/using Z3 on there.</p>",
      "id": "https://www.pypy.org/posts/2024/07/finding-simple-rewrite-rules-jit-z3.html",
      "link": "https://www.pypy.org/posts/2024/07/finding-simple-rewrite-rules-jit-z3.html",
      "links": [],
      "published": "2024-07-12T19:14:09+00:00",
      "tags": [
        {
          "label": null,
          "scheme": null,
          "term": "jit"
        },
        {
          "label": null,
          "scheme": null,
          "term": "z3"
        }
      ],
      "title": "Finding Simple Rewrite Rules for the JIT with Z3"
    },
    {
      "author": "Christoph Jung",
      "content": [
        {
          "base": null,
          "language": null,
          "type": "text/html",
          "value": "<h3 id=\"introduction\">Introduction</h3>\n<p>If you ever wanted to profile your Python code on PyPy, you probably came across <a href=\"https://vmprof.readthedocs.io/en/latest/vmprof.html\">VMProf</a> — a statistical profiler for PyPy.</p>\n<p>VMProf's console output can already give some insights into where your code spends time,\nbut it is far from showing all the information captured while profiling.</p>\n<p>There have been some tools around to visualize VMProf's output.\nUnfortunately the vmprof.com user interface is no longer available and vmprof-server is not as easy to use, you may want to take a look at a local viewer or converter.\nThose so far could give you some general visualizations of your profile, but do not show any PyPy related context like PyPy's log output (<a href=\"https://rpython.readthedocs.io/en/latest/logging.html\">PyPyLog</a>, which is output when using the PYPYLOG environment variable to log JIT actions).</p>\n<p>To bring all of those features together in one tool, you may take a look at the vmprof-firefox-converter.</p>\n<p>Created in the context of my bachelor's thesis, the vmprof-firefox-converter is a tool for analyzing VMProf profiles with the <a href=\"https://profiler.firefox.com/\">Firefox profiler</a> user interface.\nInstead of building a new user interface from scratch, this allows us to reuse the user interface work Mozilla put into the Firefox profiler.\nThe Firefox profiler offers a timeline where you can zoom into profiles and work with different visualizations like a flame graph or a stack chart.\nTo understand why there is time spent inside a function, you can revisit the source code and even dive into the intermediate representation of functions executed by PyPy's just-in-time compiler.\nAdditionally, there is a visualization for PyPy's log output, to keep track whether PyPy spent time inside the interpreter, JIT or GC throughout the profiling time.</p>\n<h3 id=\"profiling-word-count\">Profiling word count</h3>\n<p>In this blog post, I want to show an example of how to use the vmprof-firefox-converter for a simple Python program.\nBased on Ben Hoyt's blog <a href=\"https://benhoyt.com/writings/count-words/\">Performance comparison: counting words in Python, Go, C++, C, AWK, Forth, and Rust</a> we will profile two python versions of a word counter running on PyPy. One being a bit more optimized. For this, VMProf will be used, but instead of just going with the console output, we will use the Firefox profiler user interface.</p>\n<p>At first, we are going to look at a simple way of counting words with <code>Collections.Counter</code>.\nThis will read one line from the standard input at a time and count the words with <code>counter.update()</code></p>\n<div class=\"code\"><pre class=\"code literal-block\">counts = collections.Counter()\nfor line in sys.stdin:\n    words = line.lower().split()\n    counts.update(words)\n\nfor word, count in counts.most_common():\n    print(word, count)\n</pre></div>\n\n<p>To start profiling, simply execute:\n<code>pypy -m vmprofconvert -run simple.py &lt;kjvbible_x10.txt</code></p>\n<p>This will run the above code with vmprof, automatically capture and convert the results and finally open the Firefox profiler. </p>\n<p>The input file is the king James version of the bible concatenated ten times.</p>\n<p>To get started, we take a look at the call stack.</p>\n<p><img src=\"https://github.com/Cskorpion/vmprof-firefox-converter/blob/main/images/blog/simple_call_stack_crp.png?raw=true\">\nHere we see that most of the time is spent in native code (marked as blue) e.g., the <code>counter.update()</code> or <code>split()</code> C implementation.</p>\n<p>Now let's proceed with the more optimized version.\nThis time we read 64 Kb of data from the standard input and count the words with <code>counter.update()</code>.</p>\n<div class=\"code\"><pre class=\"code literal-block\">counts = collections.Counter()\nremaining = ''\nwhile True:\n    chunk = remaining + sys.stdin.read(64*1024)\n    if not chunk:\n        break\n    last_lf = chunk.rfind('\\n')  # process to last LF character\n    if last_lf == -1:\n        remaining = ''\n    else:\n        remaining = chunk[last_lf+1:]\n        chunk = chunk[:last_lf]\n    counts.update(chunk.lower().split())\n\nfor word, count in counts.most_common():\n    print(word, count)\n</pre></div>\n\n<p>As we did before, we are going to take a peek at the call stack.</p>\n<p><img src=\"https://github.com/Cskorpion/vmprof-firefox-converter/blob/main/images/blog/optimized_call_stack_crp.png?raw=true\"> </p>\n<p>Now there is more time spent in native code, caused by larger chunks of text passed to  <code>counter.update()</code>.</p>\n<p>This becomes even more clear by comparing the stack charts.</p>\n<p><img src=\"https://github.com/Cskorpion/vmprof-firefox-converter/blob/main/images/blog/simple_stack_chart.png?raw=true\"></p>\n<p>Here, in the unoptimized case, we only read in one line at each loop iteration.\nThis results in small \"spikes\" in the stack chart. </p>\n<p>But let's take an even closer look.</p>\n<p><img src=\"https://github.com/Cskorpion/vmprof-firefox-converter/blob/main/images/blog/simple_stack_chart_zoom.png?raw=true\"></p>\n<p>Zoomed in, we see the call stack alternating between <code>_count_elements()</code> and (unfortunately unsymbolized) native calls coming from reading and splitting the input text (e.g., <code>decode()</code>).</p>\n<p>Let us now take a look at the optimized case.</p>\n<p><img src=\"https://github.com/Cskorpion/vmprof-firefox-converter/blob/main/images/blog/optimized_stack_chart.png?raw=true\"></p>\n<p>And if we look closer at the same interval as before, we see some spikes, but slightly different.</p>\n<p><img src=\"https://github.com/Cskorpion/vmprof-firefox-converter/blob/main/images/blog/optimized_stack_chart_zoom.png?raw=true\"></p>\n<p>Even though we do not want to compare the (amount of) milliseconds directly, we clearly see that the spikes are wider, i.e. the time spent in those function calls is longer.\nYou may already know where this comes from.\nWe read a 64 Kb chunk of data from std in and pass that to <code>counter.update()</code>, so both these tasks do more work and take longer.\nBigger chunks mean there is less alternating between reading and counting, so there is more time spent doing work than \"doing\" loop iterations.</p>\n<h3 id=\"getting-started\">Getting started</h3>\n<p>You can get the converter from <a href=\"https://github.com/Cskorpion/vmprof-firefox-converter\">GitHub</a>.</p>\n<p>Both VMProf and the vmprof-firefox-converter were created for profiling PyPy, but you can also use them with CPython. </p>\n<p>This project is still somewhat experimental, so if you want to try it out, please let us know whether it worked for you.</p>"
        }
      ],
      "description": "<h3 id=\"introduction\">Introduction</h3>\n<p>If you ever wanted to profile your Python code on PyPy, you probably came across <a href=\"https://vmprof.readthedocs.io/en/latest/vmprof.html\">VMProf</a> — a statistical profiler for PyPy.</p>\n<p>VMProf's console output can already give some insights into where your code spends time,\nbut it is far from showing all the information captured while profiling.</p>\n<p>There have been some tools around to visualize VMProf's output.\nUnfortunately the vmprof.com user interface is no longer available and vmprof-server is not as easy to use, you may want to take a look at a local viewer or converter.\nThose so far could give you some general visualizations of your profile, but do not show any PyPy related context like PyPy's log output (<a href=\"https://rpython.readthedocs.io/en/latest/logging.html\">PyPyLog</a>, which is output when using the PYPYLOG environment variable to log JIT actions).</p>\n<p>To bring all of those features together in one tool, you may take a look at the vmprof-firefox-converter.</p>\n<p>Created in the context of my bachelor's thesis, the vmprof-firefox-converter is a tool for analyzing VMProf profiles with the <a href=\"https://profiler.firefox.com/\">Firefox profiler</a> user interface.\nInstead of building a new user interface from scratch, this allows us to reuse the user interface work Mozilla put into the Firefox profiler.\nThe Firefox profiler offers a timeline where you can zoom into profiles and work with different visualizations like a flame graph or a stack chart.\nTo understand why there is time spent inside a function, you can revisit the source code and even dive into the intermediate representation of functions executed by PyPy's just-in-time compiler.\nAdditionally, there is a visualization for PyPy's log output, to keep track whether PyPy spent time inside the interpreter, JIT or GC throughout the profiling time.</p>\n<h3 id=\"profiling-word-count\">Profiling word count</h3>\n<p>In this blog post, I want to show an example of how to use the vmprof-firefox-converter for a simple Python program.\nBased on Ben Hoyt's blog <a href=\"https://benhoyt.com/writings/count-words/\">Performance comparison: counting words in Python, Go, C++, C, AWK, Forth, and Rust</a> we will profile two python versions of a word counter running on PyPy. One being a bit more optimized. For this, VMProf will be used, but instead of just going with the console output, we will use the Firefox profiler user interface.</p>\n<p>At first, we are going to look at a simple way of counting words with <code>Collections.Counter</code>.\nThis will read one line from the standard input at a time and count the words with <code>counter.update()</code></p>\n<div class=\"code\"><pre class=\"code literal-block\">counts = collections.Counter()\nfor line in sys.stdin:\n    words = line.lower().split()\n    counts.update(words)\n\nfor word, count in counts.most_common():\n    print(word, count)\n</pre></div>\n\n<p>To start profiling, simply execute:\n<code>pypy -m vmprofconvert -run simple.py &lt;kjvbible_x10.txt</code></p>\n<p>This will run the above code with vmprof, automatically capture and convert the results and finally open the Firefox profiler. </p>\n<p>The input file is the king James version of the bible concatenated ten times.</p>\n<p>To get started, we take a look at the call stack.</p>\n<p><img src=\"https://github.com/Cskorpion/vmprof-firefox-converter/blob/main/images/blog/simple_call_stack_crp.png?raw=true\">\nHere we see that most of the time is spent in native code (marked as blue) e.g., the <code>counter.update()</code> or <code>split()</code> C implementation.</p>\n<p>Now let's proceed with the more optimized version.\nThis time we read 64 Kb of data from the standard input and count the words with <code>counter.update()</code>.</p>\n<div class=\"code\"><pre class=\"code literal-block\">counts = collections.Counter()\nremaining = ''\nwhile True:\n    chunk = remaining + sys.stdin.read(64*1024)\n    if not chunk:\n        break\n    last_lf = chunk.rfind('\\n')  # process to last LF character\n    if last_lf == -1:\n        remaining = ''\n    else:\n        remaining = chunk[last_lf+1:]\n        chunk = chunk[:last_lf]\n    counts.update(chunk.lower().split())\n\nfor word, count in counts.most_common():\n    print(word, count)\n</pre></div>\n\n<p>As we did before, we are going to take a peek at the call stack.</p>\n<p><img src=\"https://github.com/Cskorpion/vmprof-firefox-converter/blob/main/images/blog/optimized_call_stack_crp.png?raw=true\"> </p>\n<p>Now there is more time spent in native code, caused by larger chunks of text passed to  <code>counter.update()</code>.</p>\n<p>This becomes even more clear by comparing the stack charts.</p>\n<p><img src=\"https://github.com/Cskorpion/vmprof-firefox-converter/blob/main/images/blog/simple_stack_chart.png?raw=true\"></p>\n<p>Here, in the unoptimized case, we only read in one line at each loop iteration.\nThis results in small \"spikes\" in the stack chart. </p>\n<p>But let's take an even closer look.</p>\n<p><img src=\"https://github.com/Cskorpion/vmprof-firefox-converter/blob/main/images/blog/simple_stack_chart_zoom.png?raw=true\"></p>\n<p>Zoomed in, we see the call stack alternating between <code>_count_elements()</code> and (unfortunately unsymbolized) native calls coming from reading and splitting the input text (e.g., <code>decode()</code>).</p>\n<p>Let us now take a look at the optimized case.</p>\n<p><img src=\"https://github.com/Cskorpion/vmprof-firefox-converter/blob/main/images/blog/optimized_stack_chart.png?raw=true\"></p>\n<p>And if we look closer at the same interval as before, we see some spikes, but slightly different.</p>\n<p><img src=\"https://github.com/Cskorpion/vmprof-firefox-converter/blob/main/images/blog/optimized_stack_chart_zoom.png?raw=true\"></p>\n<p>Even though we do not want to compare the (amount of) milliseconds directly, we clearly see that the spikes are wider, i.e. the time spent in those function calls is longer.\nYou may already know where this comes from.\nWe read a 64 Kb chunk of data from std in and pass that to <code>counter.update()</code>, so both these tasks do more work and take longer.\nBigger chunks mean there is less alternating between reading and counting, so there is more time spent doing work than \"doing\" loop iterations.</p>\n<h3 id=\"getting-started\">Getting started</h3>\n<p>You can get the converter from <a href=\"https://github.com/Cskorpion/vmprof-firefox-converter\">GitHub</a>.</p>\n<p>Both VMProf and the vmprof-firefox-converter were created for profiling PyPy, but you can also use them with CPython. </p>\n<p>This project is still somewhat experimental, so if you want to try it out, please let us know whether it worked for you.</p>",
      "id": "https://www.pypy.org/posts/2024/05/vmprof-firefox-converter.html",
      "link": "https://www.pypy.org/posts/2024/05/vmprof-firefox-converter.html",
      "links": [],
      "published": "2024-04-26T14:38:00+00:00",
      "title": "Profiling PyPy using the Firefox profiler user interface"
    }
  ],
  "feed": {
    "generator": "Nikola (getnikola.com)",
    "id": null,
    "language": null,
    "link": "https://www.pypy.org/",
    "links": [],
    "subtitle": "A Faster Python",
    "subtitle_detail": {
      "base": null,
      "language": null,
      "type": "text/plain",
      "value": "A Faster Python"
    },
    "title": "PyPy",
    "title_detail": {
      "base": null,
      "language": null,
      "type": "text/plain",
      "value": "PyPy"
    },
    "updated": "Thu, 14 Nov 2024 08:45:19 GMT"
  }
}